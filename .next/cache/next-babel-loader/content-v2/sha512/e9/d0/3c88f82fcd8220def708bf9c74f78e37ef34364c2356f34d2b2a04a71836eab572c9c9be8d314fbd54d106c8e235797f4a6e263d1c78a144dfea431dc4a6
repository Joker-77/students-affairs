{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, Paper, Button } from \"@material-ui/core\";\nimport { Edit } from \"@material-ui/icons\";\n\nconst MTable = ({\n  metaData,\n  metDataCount,\n  data,\n  dataEachPropsCount,\n  hasActions,\n  actions\n}) => {\n  const [_data, setData] = React.useState(data);\n  const [_metaData, setMetaData] = React.useState(metaData);\n  const [_dataEachPropsCount, setDataEachPropsCount] = React.useState(dataEachPropsCount);\n  let calcWidth = 100 / _dataEachPropsCount;\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  useEffect(() => {\n    console.log(data);\n    setData(data);\n    setMetaData(metaData);\n    setDataEachPropsCount(dataEachPropsCount);\n  }, [data]);\n\n  const dataRow = row => {\n    return /*#__PURE__*/_jsxs(TableRow, {\n      children: [Object.entries(row).map(([rowId, rowData], index) => {\n        return /*#__PURE__*/_jsx(TableCell, {\n          align: \"center\",\n          style: {\n            width: `${calcWidth}%`\n          },\n          children: rowData\n        }, index);\n      }), /*#__PURE__*/_jsx(TableCell, {\n        align: \"center\",\n        style: {\n          width: `${calcWidth}%`\n        },\n        children: hasActions && actions != null && actions.length > 0 && actions.map((action, index) => {\n          return /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsx(Edit, {}),\n            onClick: action.onClick(row),\n            children: \"Edit\"\n          });\n        })\n      }, actions != null && actions.length > 0 ? actions.length.toString() : \"0\")]\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxs(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsx(TableHead, {\n          children: /*#__PURE__*/_jsx(TableRow, {\n            children: _metaData.map((item, index) => {\n              return /*#__PURE__*/_jsx(TableCell, {\n                align: \"center\",\n                children: item\n              });\n            })\n          })\n        }), /*#__PURE__*/_jsx(TableBody, {\n          children: _data != null && _data.length > 0 && _data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n            return dataRow(row);\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: _data.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    })]\n  });\n};\n\nexport default MTable;","map":null,"metadata":{},"sourceType":"module"}