{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { setLayout, clearSessionKey, collapseMenu, collapseToggle, navCollapseLeave, navContentLeave, setMessage, setSessionKey, updateProfile, lockScreen, setDirection, setCandidate } from \"../actions/actions\";\nvar initialState = {\n  isOpen: [],\n  //for active default menu\n  isTrigger: [],\n  //for active default menu, set blank for horizontal\n  collapseMenu: false,\n  isLocked: false,\n  // Lock all screens for protection against abuse\n  // ...config,\n  rememberMe: false,\n  //\n  sessionKey: \"\",\n  userProfile: null,\n  layout: \"page\",\n  direction: \"ltr\",\n  message: {\n    Content: \"\",\n    Type: 0\n  },\n  // 0 is confirmation 1 is error 2 is warning\n  candidate: null\n};\nexport var reducer = createReducer(initialState, function (builder) {\n  builder.addCase(setSessionKey, function (state, action) {\n    state.sessionKey = action.payload;\n  }).addCase(clearSessionKey, function (state) {\n    state.sessionKey = \"\", state.rememberMe = false;\n  }).addCase(setMessage, function (state, action) {\n    state.message = action.payload;\n  }).addCase(updateProfile, function (state, action) {\n    state.userProfile = action.payload;\n  }).addCase(collapseMenu, function (state, action) {\n    state.collapseMenu = !action.payload;\n  }).addCase(collapseToggle, function (state, action) {\n    var trigger = [];\n    var open = [];\n\n    if (action.payload.menu.type === \"sub\") {\n      open = state.isOpen;\n      trigger = state.isTrigger;\n      var triggerIndex = trigger.indexOf(action.payload.menu.id);\n\n      if (triggerIndex > -1) {\n        open = open.filter(function (item) {\n          return item !== action.payload.menu.id;\n        });\n        trigger = trigger.filter(function (item) {\n          return item !== action.payload.menu.id;\n        });\n      }\n\n      if (triggerIndex === -1) {\n        open = [].concat(_toConsumableArray(open), [action.payload.menu.id]);\n        trigger = [].concat(_toConsumableArray(trigger), [action.payload.menu.id]);\n      }\n    } else {\n      open = state.isOpen;\n\n      var _triggerIndex = state.isTrigger.indexOf(action.payload.menu.id);\n\n      trigger = _triggerIndex === -1 ? [action.payload.menu.id] : [];\n      open = _triggerIndex === -1 ? [action.payload.menu.id] : [];\n    }\n\n    state.isOpen = open;\n    state.isTrigger = trigger;\n  }).addCase(navContentLeave, function (state, action) {\n    var trigger = [];\n    var open = [];\n    state.isOpen = open;\n    state.isTrigger = trigger;\n  }).addCase(navCollapseLeave, function (state, action) {\n    var trigger = [];\n    var open = [];\n\n    if (action.payload.menu.type === \"sub\") {\n      open = state.isOpen;\n      trigger = state.isTrigger;\n      var triggerIndex = trigger.indexOf(action.payload.menu.id);\n\n      if (triggerIndex > -1) {\n        open = open.filter(function (item) {\n          return item !== action.payload.menu.id;\n        });\n        trigger = trigger.filter(function (item) {\n          return item !== action.payload.menu.id;\n        });\n      }\n\n      state.isOpen = open;\n      state.isTrigger = trigger;\n    }\n  }).addCase(setLayout, function (state, action) {\n    state.layout = action.payload;\n  }).addCase(lockScreen, function (state, action) {\n    state.isLocked = action.payload && !action.payload;\n  }).addCase(setDirection, function (state, action) {\n    state.direction = action.payload;\n  }).addCase(setCandidate, function (state, action) {\n    state.candidate = action.payload;\n  });\n});","map":null,"metadata":{},"sourceType":"module"}