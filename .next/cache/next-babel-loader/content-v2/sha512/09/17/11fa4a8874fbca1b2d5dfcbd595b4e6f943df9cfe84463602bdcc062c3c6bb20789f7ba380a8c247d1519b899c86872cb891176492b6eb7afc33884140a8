{"ast":null,"code":"/**\r\n=========================================================\r\n* Soft UI Dashboard React - v3.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/soft-ui-dashboard-pro-react\r\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\n\n/**\r\n * The base box-shadow styles for the Soft UI Dashboard React.\r\n * You can add new box-shadow using this file.\r\n * You can customized the box-shadow for the entire Soft UI Dashboard React using thie file.\r\n */\n// Soft UI Dashboard React Base Styles\nimport colors from \"assets/theme/base/colors\"; // Soft UI Dashboard React Helper Functions\n\nimport boxShadow from \"assets/theme/functions/boxShadow\";\nvar black = colors.black,\n    white = colors.white,\n    info = colors.info,\n    inputColors = colors.inputColors,\n    tabs = colors.tabs;\nvar boxShadows = {\n  xs: boxShadow([0, 2], [9, -5], black.main, 0.15),\n  sm: boxShadow([0, 5], [10, 0], black.main, 0.12),\n  md: \"\".concat(boxShadow([0, 4], [6, -1], black.light, 0.12), \", \").concat(boxShadow([0, 2], [4, -1], black.light, 0.07)),\n  lg: \"\".concat(boxShadow([0, 8], [26, -4], black.light, 0.15), \", \").concat(boxShadow([0, 8], [9, -5], black.light, 0.06)),\n  xl: boxShadow([0, 23], [45, -11], black.light, 0.25),\n  xxl: boxShadow([0, 20], [27, 0], black.main, 0.05),\n  inset: boxShadow([0, 1], [2, 0], black.main, 0.075, \"inset\"),\n  navbarBoxShadow: \"\".concat(boxShadow([0, 0], [1, 1], white.main, 0.9, \"inset\"), \", \").concat(boxShadow([0, 20], [27, 0], black.main, 0.05)),\n  buttonBoxShadow: {\n    main: \"\".concat(boxShadow([0, 4], [7, -1], black.main, 0.11), \", \").concat(boxShadow([0, 2], [4, -1], black.main, 0.07)),\n    stateOf: \"\".concat(boxShadow([0, 3], [5, -1], black.main, 0.09), \", \").concat(boxShadow([0, 2], [5, -1], black.main, 0.07)),\n    stateOfNotHover: boxShadow([0, 0], [0, 3.2], info.main, 0.5)\n  },\n  inputBoxShadow: {\n    focus: boxShadow([0, 0], [0, 2], inputColors.boxShadow, 1),\n    error: boxShadow([0, 0], [0, 2], inputColors.error, 0.6),\n    success: boxShadow([0, 0], [0, 2], inputColors.success, 0.6)\n  },\n  sliderBoxShadow: {\n    thumb: boxShadow([0, 1], [13, 0], black.main, 0.2)\n  },\n  tabsBoxShadow: {\n    indicator: boxShadow([0, 1], [5, 1], tabs.indicator.boxShadow, 1)\n  }\n};\nexport default boxShadows;","map":null,"metadata":{},"sourceType":"module"}