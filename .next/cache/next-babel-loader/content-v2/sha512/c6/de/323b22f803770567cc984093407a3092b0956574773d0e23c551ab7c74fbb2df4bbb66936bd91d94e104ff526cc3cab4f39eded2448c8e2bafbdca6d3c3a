{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport axios from \"../../../Services/ApiClient\"; //Api route function that is returned from next auth\n\nexport default NextAuth({\n  secret: process.env.SECRET,\n  logger: {\n    error(code, metadata) {\n      console.log({\n        type: \"inside error logger\",\n        code,\n        metadata\n      });\n    },\n\n    warn(code) {\n      console.log({\n        type: \"inside warn logger\",\n        code\n      });\n    },\n\n    debug(code, metadata) {\n      console.log({\n        type: \"inside debug logger\",\n        code,\n        metadata\n      });\n    }\n\n  },\n  providers: [GithubProvider({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }), CredentialsProvider({\n    // The name to display on the sign in form (e.g. \"Sign in with...\")\n    name: \"Credentials\",\n    // `credentials` is used to generate a form on the sign in page.\n    // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n    // e.g. domain, username, password, 2FA token, etc.\n    // You can pass any HTML attribute to the <input> tag through the object.\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      const {\n        email,\n        password\n      } = credentials;\n      const res = await fetch(\"http://teststudent.hiast.edu.sy/backend/public/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const user = await res.json();\n      console.log(user);\n      alert(\"user\");\n\n      if (res.ok && user) {\n        return user;\n      } else return null;\n    }\n\n  }) // ...add more providers here\n  ],\n  callbacks: {\n    // called after sucessful signin\n    jwt: async ({\n      token,\n      user\n    }) => {\n      user && (token.user = user);\n      if (user) return _objectSpread(_objectSpread({}, token), {}, {\n        accessToken: user.token\n      });\n      return token;\n    },\n    // called whenever session is checked\n    session: async ({\n      session,\n      token\n    }) => {\n      token && (session.user = token.user);\n      return session;\n    }\n  },\n  session: {\n    strategy: \"jwt\",\n    jwt: true,\n    maxAge: 30 * 24 * 60 * 60\n  },\n  pages: \"/authentication/sign-in\"\n});","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].js"],"names":["NextAuth","CredentialsProvider","axios","secret","process","env","SECRET","logger","error","code","metadata","console","log","type","warn","debug","providers","GithubProvider","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","name","credentials","email","label","placeholder","password","authorize","req","res","fetch","method","headers","body","JSON","stringify","user","json","alert","ok","callbacks","jwt","token","accessToken","session","strategy","maxAge","pages"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\n//Api route function that is returned from next auth\r\nexport default NextAuth({\r\n  secret: process.env.SECRET,\r\n  logger: {\r\n    error(code, metadata) {\r\n      console.log({ type: \"inside error logger\", code, metadata });\r\n    },\r\n    warn(code) {\r\n      console.log({ type: \"inside warn logger\", code });\r\n    },\r\n    debug(code, metadata) {\r\n      console.log({ type: \"inside debug logger\", code, metadata });\r\n    },\r\n  },\r\n  providers: [\r\n    GithubProvider({\r\n      clientId: process.env.GITHUB_ID,\r\n      clientSecret: process.env.GITHUB_SECRET,\r\n    }),\r\n    CredentialsProvider({\r\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n      name: \"Credentials\",\r\n      // `credentials` is used to generate a form on the sign in page.\r\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\r\n      // e.g. domain, username, password, 2FA token, etc.\r\n      // You can pass any HTML attribute to the <input> tag through the object.\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n      async authorize(credentials, req) {\r\n        const { email, password } = credentials;\r\n        const res = await fetch(\r\n          \"http://teststudent.hiast.edu.sy/backend/public/api/login\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              email,\r\n              password,\r\n            }),\r\n          }\r\n        );\r\n        const user = await res.json();\r\n        console.log(user);\r\n        alert(\"user\");\r\n        if (res.ok && user) {\r\n          return user;\r\n        } else return null;\r\n      },\r\n    }),\r\n    // ...add more providers here\r\n  ],\r\n  callbacks: {\r\n    // called after sucessful signin\r\n    jwt: async ({ token, user }) => {\r\n      user && (token.user = user);\r\n      if (user)\r\n        return {\r\n          ...token,\r\n          accessToken: user.token,\r\n        };\r\n      return token;\r\n    }, // called whenever session is checked\r\n    session: async ({ session, token }) => {\r\n      token && (session.user = token.user);\r\n      return session;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n    jwt: true,\r\n    maxAge: 30 * 24 * 60 * 60,\r\n  },\r\n  pages: \"/authentication/sign-in\",\r\n});\r\n"]},"metadata":{},"sourceType":"module"}