{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport SuiButton from \"../SuiButton\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../Utility/Translations/useTranslation\";\nimport { Box, Button, Dialog, DialogActions, DialogTitle, IconButton, Typography } from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport ActionTable from \"../MaterialTable/ActionTable\";\nimport { toast } from \"react-toastify\";\nimport Placeholder from \"../../Utility/Placeholders\";\nimport GridContainer from \"../Grid/GridContainer\";\nimport GridItem from \"../Grid/GridItem\";\nimport TeacherService from \"../../Services/TeacherService\";\nexport const AssignedTeachers = ({\n  planData,\n  refresh\n}) => {\n  const router = useRouter();\n  const {\n    translate\n  } = useTranslation();\n  const {\n    0: deleteId,\n    1: setDeleteId\n  } = useState(null);\n  const [confirmDelete, setConfirmDelete] = React.useState(false);\n  const [assignedTeachers, setAssignedTeachers] = React.useState([]);\n  const tableRef = useRef();\n  const {\n    0: teachers,\n    1: setTeachers\n  } = useState([]);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n\n  const fetch = () => {\n    TeacherService.GetAll().then(res => {\n      setTeachers(res.result);\n\n      if (planData.id && planData.edu_year_id) {\n        TeacherService.GetTeachersAssignments(planData.id, planData.edu_year_id).then(resp => {\n          if (resp.result != null && resp.result.length > 0) {\n            let assignedTeachers = resp.result.map(entity => {\n              var _res$result, _teacher$person, _teacher$person2;\n\n              const teacher = (_res$result = res.result) === null || _res$result === void 0 ? void 0 : _res$result.find(e => e.id == (entity === null || entity === void 0 ? void 0 : entity.teacher_id));\n              return {\n                id: entity.id,\n                teacher_id: entity.teacher_id,\n                teacher: `${teacher === null || teacher === void 0 ? void 0 : teacher.prefix_name} \n                                ${teacher === null || teacher === void 0 ? void 0 : (_teacher$person = teacher.person) === null || _teacher$person === void 0 ? void 0 : _teacher$person.first_name} \n                                ${teacher === null || teacher === void 0 ? void 0 : (_teacher$person2 = teacher.person) === null || _teacher$person2 === void 0 ? void 0 : _teacher$person2.last_name}`,\n                theo: `${entity.theoretical_hours}/${entity.theoretical_classes}`,\n                pract: `${entity.practical_hours}/${entity.practical_classes}`,\n                mixed: `${entity.mixed_hours}/${entity.mixed_classes}`\n              };\n            });\n            console.log(assignedTeachers);\n            setAssignedTeachers(assignedTeachers);\n          }\n        }).catch(err => {});\n      }\n    }).catch(err => {\n      toast.error(err === null || err === void 0 ? void 0 : err.error);\n    });\n  }; // useEffect(() => {\n  //   fetch();\n  // }, []);\n\n\n  useEffect(() => {\n    fetch();\n  }, [refresh]);\n  const columns = [{\n    title: \"المعرّف\",\n    field: \"id\",\n    hidden: true\n  }, {\n    title: \"المدرّس\",\n    field: \"teacher\"\n  }, {\n    title: \"نظري س/ف\",\n    field: \"theo\"\n  }, {\n    title: \"عملي س/ف\",\n    field: \"pract\"\n  }, {\n    title: \"نظري/عملي س/ف\",\n    field: \"mixed\"\n  }];\n\n  const ConfirmDialog = ({\n    id,\n    show,\n    handleClose,\n    handleDeleteCourse\n  }) => {\n    return /*#__PURE__*/_jsxs(Dialog, {\n      open: show,\n      maxWidth: \"sm\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsx(DialogTitle, {\n        children: /*#__PURE__*/_jsx(Typography, {\n          children: `هل تريد تأكيد إنهاء تكليف المدرّس ${name}`\n        })\n      }), /*#__PURE__*/_jsx(Box, {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        children: /*#__PURE__*/_jsx(IconButton, {\n          onClick: handleClose,\n          children: /*#__PURE__*/_jsx(Close, {})\n        })\n      }), /*#__PURE__*/_jsxs(DialogActions, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: handleClose,\n          color: \"secondary\",\n          variant: \"contained\",\n          children: translate(\"Cancel\")\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: () => handleDeleteCourse(id),\n          color: \"primary\",\n          variant: \"contained\",\n          children: translate(\"Confirm\")\n        })]\n      })]\n    });\n  };\n\n  const handleDeleteCourse = () => {\n    if (deleteId) {\n      TeacherService.DeleteTeachersAssignments(deleteId).then(resp => {\n        if (resp.success) {\n          toast.success(translate(\"Teacher disengage successfully\"));\n          setConfirmDelete(false);\n          fetch();\n        }\n      }).catch(err => {});\n    } else toast.error(\"يجب تحديد معرّف\");\n  };\n\n  const handleConfirmDialog = data => {\n    setName(data.teacher);\n    setDeleteId(data.id);\n    setConfirmDelete(true);\n  };\n\n  const handleCloseConfirmDialog = () => {\n    setDeleteId(null);\n    setConfirmDelete(false);\n  };\n\n  const renderPlanCourses = () => {\n    if (assignedTeachers != null && assignedTeachers.length > 0) {\n      let options = {\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        pageSize: 10,\n        maxBodyHeight: \"500px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      let actions = [{\n        icon: () => /*#__PURE__*/_jsx(SuiButton, {\n          style: {\n            minWidth: 80,\n            color: \"#dc3545\",\n            backgroundColor: \"transparent\",\n            border: \"1px solid #dc3545\"\n          },\n          color: \"danger\",\n          children: translate(\"Delete\")\n        }),\n        onClick: (evt, data) => handleConfirmDialog(data)\n      }];\n      return /*#__PURE__*/_jsxs(\"div\", {\n        ref: tableRef,\n        children: [/*#__PURE__*/_jsx(ActionTable, {\n          Title: `${translate(\"All\")} ${assignedTeachers.length}`,\n          Columns: columns,\n          Data: assignedTeachers,\n          Options: options,\n          Actions: actions\n        }), /*#__PURE__*/_jsx(ConfirmDialog, {\n          id: deleteId,\n          show: confirmDelete,\n          handleClose: handleCloseConfirmDialog,\n          handleDeleteCourse: handleDeleteCourse\n        }, \"Confirm Delete Course\")]\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {\n      loading: false\n    });\n  };\n\n  return /*#__PURE__*/_jsx(GridContainer, {\n    children: /*#__PURE__*/_jsx(GridItem, {\n      md: 12,\n      style: {\n        marginTop: \"1em .5em\"\n      },\n      children: renderPlanCourses()\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}