{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport Admin from \"../../../../layouts/Admin\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport * as yup from \"yup\";\nimport { Form, Formik } from \"formik\";\nimport SuiButton from \"../../../../components/SuiButton\";\nimport { toast } from \"react-toastify\";\nimport UserService from \"../../../../Services/UserService\";\nimport { ArrowBack, ArrowLeft, ArrowRight } from \"@material-ui/icons\";\nimport Card from \"../../../../components/Card/Card\";\nimport { Box, CardActions, Grid, TextField, Typography, Checkbox, FormGroup, FormControlLabel } from \"@material-ui/core\";\nimport GridItem from \"../../../../components/Grid/GridItem\";\n\nconst UserDetails = ({\n  isCreate,\n  details,\n  handleBack,\n  activateEdit,\n  isEditable\n}) => {\n  // User\n  const {\n    0: User,\n    1: setDetails\n  } = useState(details); // Roles\n\n  const [assignedRoles, setAssignedRoles] = React.useState([]);\n  const [unassignedRoles, setUnAssignedRoles] = React.useState([]); // Selected Roles\n\n  const [selectedAssignedRoles, setSelectedAssignedRoles] = React.useState([]);\n  const [selectedUnAssignedRoles, setSelectedUnAssignedRoles] = React.useState([]); // Permissions\n\n  const [assignedPermissions, setAssignedPermissions] = React.useState([]);\n  const [unassignedPermissions, setUnAssignedPermissions] = React.useState([]); // Selected Permissions\n\n  const [selectedAssignedPermissions, setSelectedAssignedPermissions] = React.useState([]);\n  const [selectedUnAssignedPermissions, setSelectedUnAssignedPermissions] = React.useState([]); //\n\n  const [role, setRole] = React.useState(0);\n  const {\n    translate\n  } = useTranslation();\n  let UserSchema = yup.object({\n    email: yup.string(translate(\"الإيميل\")).required(translate(\"Field is required\")),\n    password: yup.string(translate(\"كلمة السر\")).required(translate(\"Field is required\"))\n  });\n  let initialValues = isCreate ? {\n    email: User === null || User === void 0 ? void 0 : User.email\n  } : {\n    id: User.id,\n    email: User.email\n  };\n\n  const addToUnAssigned = id => {\n    let selectedAssigned = selectedAssignedRoles.slice();\n\n    if (selectedAssigned.includes(id)) {\n      let index = selectedAssigned.findIndex(e => e === id);\n      selectedAssigned.splice(index, 1);\n    } else {\n      selectedAssigned.push(id);\n    }\n\n    setSelectedAssignedRoles(selectedAssigned);\n  };\n\n  const addToAssigned = id => {\n    let selectedUnAssigned = selectedUnAssignedRoles.slice();\n\n    if (selectedUnAssigned.includes(id)) {\n      let index = selectedUnAssigned.findIndex(e => e === id);\n      selectedUnAssigned.splice(index, 1);\n    } else {\n      selectedUnAssigned.push(id);\n    }\n\n    setSelectedUnAssignedRoles(selectedUnAssigned);\n  };\n\n  const AssignRoles = () => {\n    let trues = [];\n    let errors = [];\n    selectedUnAssignedRoles.forEach(element => {\n      console.log(element);\n      let payload = {\n        user_id: User.id,\n        role_id: element\n      };\n      UserService.AssignUserToRole(payload).then(response => {\n        if (response.success) {\n          getData();\n          trues.push(element); // toast.success(\"تم إسناد الدور بنجاح\");\n        } else {\n          // console.log(response.error);\n          errors.push(response.error.message); // toast.error(response.error.message);\n        }\n      }).catch(error => {\n        // console.log(error.message);\n        // toast.error(error.message);\n        // throw new Error(error);\n        errors.push(error.message);\n      });\n    });\n  };\n\n  const UnAssignRoles = () => {\n    let trues = [];\n    let errors = [];\n    selectedAssignedRoles.forEach(element => {\n      console.log(element);\n      let payload = {\n        user_id: User.id,\n        role_id: element\n      };\n      UserService.RevokeRole(payload).then(response => {\n        console.log(response);\n\n        if (response.success) {\n          getData();\n          trues.push(element); // toast.success(\"تم إسناد الدور بنجاح\");\n        } else {\n          // console.log(response.error);\n          errors.push(response.error.message); // toast.error(response.error.message);\n        }\n      }).catch(error => {\n        // console.log(error.message);\n        // toast.error(error.message);\n        // throw new Error(error);\n        errors.push(error.message);\n      });\n    });\n  };\n  /************************* Handle Edit Permissions ************/\n\n\n  const addToUnAssignedPermission = id => {\n    let selectedAssigned = selectedAssignedPermissions.slice();\n\n    if (selectedAssigned.includes(id)) {\n      let index = selectedAssigned.findIndex(e => e === id);\n      selectedAssigned.splice(index, 1);\n    } else {\n      selectedAssigned.push(id);\n    }\n\n    setSelectedAssignedPermissions(selectedAssigned);\n  };\n\n  const addToAssignedPermission = id => {\n    let selectedUnAssigned = selectedUnAssignedPermissions.slice();\n\n    if (selectedUnAssigned.includes(id)) {\n      let index = selectedUnAssigned.findIndex(e => e === id);\n      selectedUnAssigned.splice(index, 1);\n    } else {\n      selectedUnAssigned.push(id);\n    }\n\n    setSelectedUnAssignedPermissions(selectedUnAssigned);\n  };\n\n  const AssignPermission = () => {\n    let trues = [];\n    let errors = [];\n    selectedUnAssignedPermissions.forEach(element => {\n      console.log(element);\n      let payload = {\n        user_id: User.id,\n        permission_id: element\n      };\n      UserService.AssignUserToPermission(payload).then(response => {\n        if (response.success) {\n          getData();\n          trues.push(element);\n        } else {\n          errors.push(response.error.message);\n        }\n      }).catch(error => {\n        errors.push(error.message);\n      });\n    });\n  };\n\n  const UnAssignPermission = () => {\n    let trues = [];\n    let errors = [];\n    selectedAssignedPermissions.forEach(element => {\n      console.log(element);\n      let payload = {\n        user_id: User.id,\n        permission_id: element\n      };\n      UserService.RevokePermission(payload).then(response => {\n        console.log(response);\n\n        if (response.success) {\n          getData();\n          trues.push(element);\n        } else {\n          errors.push(response.error.message);\n        }\n      }).catch(error => {\n        errors.push(error.message);\n      });\n    });\n  };\n  /************************* Handle Edit User ************/\n\n\n  const handleEditUser = event => {\n    event.preventDefault();\n    activateEdit();\n  };\n  /************************* Handle Add Description ************/\n\n\n  const validationSchema = yup.object({\n    email: yup.string(translate(\"English Name\")).required(translate(\"Field is required\")),\n    password: yup.string(translate(\"Arabic Name\")).required(translate(\"Field is required\"))\n  });\n  /*************** Handle End Add Description For User ******/\n\n  const {\n    0: errorPercentageMsg,\n    1: setErrorPercentageMsg\n  } = useState(\"\");\n\n  const submitForm = (values, setSubmitting) => {\n    if (isCreate) {\n      const payload = {\n        email: values.email,\n        password: values.password\n      };\n      console.clear();\n      UserService.Add(payload).then(response => {\n        if (response.success) {\n          toast.success(\"تمت إضافة المستخدم بنجاح\");\n          handleBack();\n        } else {\n          console.log(response.error);\n          toast.error(response.error.message);\n        }\n      }).catch(error => {\n        console.log(error.message);\n        toast.error(error.message);\n        throw new Error(error);\n      });\n    } else {\n      const payload = {\n        user_id: User.id,\n        // email: values.email,\n        password: values.password\n      };\n      UserService.Edit(payload).then(response => {\n        if (response.success) {\n          toast.success(\"تم تعديل معلومات المستخدم بنجاح\");\n        } else {\n          console.log(response.error);\n          toast.error(response.error.message);\n        }\n      }).catch(error => {\n        console.log(error.message);\n        toast.error(error.message);\n        throw new Error(error);\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  const getData = async () => {\n    setAssignedRoles([]);\n    setUnAssignedRoles([]);\n    setSelectedUnAssignedRoles([]);\n    setSelectedAssignedRoles([]); // permissions\n\n    setAssignedPermissions([]);\n    setUnAssignedPermissions([]);\n    setSelectedUnAssignedPermissions([]);\n    setSelectedAssignedPermissions([]);\n    let user = null;\n    let permissions = [];\n    await UserService.GetPermissions().then(response => {\n      permissions = response.result;\n    }).catch(e => {\n      throw new Error(e);\n    });\n    await UserService.Get(User.id.toString()).then(response => {\n      user = response.result;\n      setDetails(user);\n      setAssignedRoles(user.roles);\n    }).catch(e => {\n      throw new Error(e);\n    });\n    await UserService.GetRoles().then(response => {\n      var _user, _user$user_permission;\n\n      let roles = response.result.filter(e => !user.roles.map(c => c.id).includes(e.id));\n      setUnAssignedRoles(roles);\n      let userPerm = ((_user = user) === null || _user === void 0 ? void 0 : (_user$user_permission = _user.user_permissions) === null || _user$user_permission === void 0 ? void 0 : _user$user_permission.map(e => e.permission)) || [];\n      let unAssignedPerms = permissions.filter(e => !userPerm.map(c => c.id).includes(e.id));\n      setAssignedPermissions(userPerm);\n      setUnAssignedPermissions(unAssignedPerms);\n    }).catch(e => {\n      throw new Error(e);\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const submitPermission = () => {\n    if (selectedUnAssigned.length > 0) {\n      let trues = selectedUnAssigned.map(e => {\n        let payload = {\n          user_id: User.id,\n          permission_id: e\n        };\n        UserService.AssignUserToPermission(payload).then(response => {\n          console.clear();\n\n          if (response.success) {\n            console.log(response);\n            return e;\n          } else {\n            console.log(response.error); // toast.error(response.error.message);\n          }\n        }).catch(error => {\n          console.log(error.message);\n          toast.error(error.message);\n          throw new Error(error);\n        });\n      });\n\n      if (selectedUnAssigned.length > 0 && trues.length == selectedUnAssigned.length) {\n        getData();\n        toast.success(\"تم إسناد الصلاحيات بنجاح\");\n      }\n    } else {\n      toast.error(\"الرجاء اختيار صلاحية واحدة على الأقل\");\n    }\n  };\n\n  const revokePermission = () => {\n    if (selected.length > 0) {\n      let trues = selected.map(e => {\n        let payload = {\n          user_id: User.id,\n          permission_id: e\n        };\n        UserService.RevokePermission(payload).then(response => {\n          if (response.success) {\n            console.log(response);\n            return e;\n          } else {}\n        }).catch(error => {\n          toast.error(error.message);\n          throw new Error(error);\n        });\n      });\n\n      if (selected.length > 0 && trues.length == selected.length) {\n        getData();\n        toast.success(\"تم إلغاء إسناد الصلاحيات بنجاح\");\n      }\n    } else {\n      toast.error(\"الرجاء اختيار صلاحية واحدة على الأقل\");\n    }\n  };\n\n  const handleChange = event => {\n    const value = event.target.value;\n    console.clear();\n    console.log(value);\n    setSelected(value);\n  };\n\n  const handleChangeUnAssign = event => {\n    const value = event.target.value;\n    console.clear();\n    console.log(value);\n    setSelectedUnAssigned(value);\n  };\n\n  return /*#__PURE__*/_jsx(Grid, {\n    container: true,\n    md: 12,\n    sm: 12,\n    children: /*#__PURE__*/_jsxs(Grid, {\n      md: 12,\n      sm: 12,\n      xs: 12,\n      children: [/*#__PURE__*/_jsx(Card, {\n        style: {\n          padding: \"1em 4em\",\n          margin: \"5px 0px\"\n        },\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxs(GridItem, {\n            item: true,\n            md: 9,\n            xs: 12,\n            sm: 12,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h5\",\n              component: \"div\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              sx: {\n                mb: 1.5\n              },\n              color: \"text.secondary\",\n              children: translate(\"تفاصيل المستخدم\")\n            })]\n          }), /*#__PURE__*/_jsx(GridItem, {\n            md: 3,\n            xs: 12,\n            sm: 12,\n            children: /*#__PURE__*/_jsxs(SuiButton, {\n              onClick: () => handleBack(),\n              color: \"warning\",\n              children: [/*#__PURE__*/_jsx(ArrowBack, {}), translate(\"Back To Previous Page\")]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Card, {\n        style: {\n          padding: \"3em 3em\",\n          margin: \"5px 0px\"\n        },\n        children: /*#__PURE__*/_jsx(Formik, {\n          enableReinitialize: true,\n          initialValues: initialValues,\n          validationSchema: validationSchema,\n          onSubmit: (values, {\n            setSubmitting\n          }) => {\n            submitForm(values, setSubmitting); // console.clear();\n            // console.log(values);\n          },\n          children: formik => {\n            const {\n              values,\n              handleChange,\n              handleSubmit,\n              errors,\n              touched,\n              handleBlur,\n              isSubmitting,\n              isValid,\n              dirty,\n              setFieldValue\n            } = formik;\n            return /*#__PURE__*/_jsxs(Form, {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxs(Grid, {\n                container: true,\n                md: 12,\n                xs: 12,\n                style: {\n                  margin: \"1em 0em\"\n                },\n                children: [/*#__PURE__*/_jsx(Grid, {\n                  container: true,\n                  md: 12,\n                  style: {\n                    margin: \"1em 0em\",\n                    color: \"red\",\n                    display: errors && // 👈 null and undefined check\n                    Object.keys(errors).length === 0 && Object.getPrototypeOf(errors) === Object.prototype ? \"none\" : \"block\"\n                  }\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      disabled: isEditable,\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"text\",\n                      id: \"email\",\n                      name: \"email\",\n                      value: values.email,\n                      onBlur: handleBlur,\n                      error: Boolean(touched.email && errors.email),\n                      helperText: touched.email && errors.email,\n                      placeholder: translate(\"الإيميل\"),\n                      label: translate(\"الإيميل\"),\n                      fullWidth: true\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"password\",\n                      id: \"password\",\n                      name: \"password\",\n                      value: values.password,\n                      onBlur: handleBlur,\n                      error: Boolean(touched.password && errors.password),\n                      helperText: touched.password && errors.password,\n                      placeholder: translate(\"كلمة السر\"),\n                      label: translate(\"كلمة السر\"),\n                      fullWidth: true\n                    })\n                  })\n                })]\n              }), /*#__PURE__*/_jsx(Box, {\n                mt: 4,\n                mb: 1,\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"space-between\"\n                },\n                children: isSubmitting ? /*#__PURE__*/_jsx(SuiButton, {\n                  type: \"button\",\n                  disabled: true,\n                  variant: \"gradient\",\n                  color: \"info\",\n                  children: translate(\"Processing ...\")\n                }) : /*#__PURE__*/_jsx(SuiButton, {\n                  style: {\n                    color: \"rgb(255, 255, 255)\",\n                    background: \"rgb(23, 193, 232)\"\n                  },\n                  disabled: !isValid && isSubmitting,\n                  type: \"submit\",\n                  children: translate(\"Save\")\n                })\n              })]\n            });\n          }\n        })\n      }), isEditable && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          md: 12,\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n          },\n          children: [/*#__PURE__*/_jsxs(Grid, {\n            md: 5,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              children: \"\\u0627\\u0644\\u0623\\u062F\\u0648\\u0627\\u0631 \\u0627\\u0644\\u0645\\u0633\\u0646\\u062F\\u0629\"\n            }), /*#__PURE__*/_jsx(Card, {\n              style: {\n                padding: \"1em 3em\",\n                margin: \"5px 0px\",\n                height: \"15em\"\n              },\n              children: /*#__PURE__*/_jsx(FormGroup, {\n                children: assignedRoles.map(e => {\n                  return /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Checkbox, {\n                      value: e.id,\n                      checked: selectedAssignedRoles.includes(e.id),\n                      onChange: () => addToUnAssigned(e.id)\n                    }),\n                    label: e.name\n                  });\n                })\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            md: 1,\n            mt: 2,\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-around\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsx(SuiButton, {\n              style: {\n                color: \"rgb(255, 255, 255)\",\n                background: \"rgb(23, 193, 232)\",\n                height: \"3em\",\n                marginLeft: \"1em\"\n              },\n              onClick: AssignRoles,\n              children: /*#__PURE__*/_jsx(ArrowRight, {\n                style: {\n                  fontSize: \"50px\"\n                }\n              })\n            }), /*#__PURE__*/_jsx(SuiButton, {\n              style: {\n                color: \"rgb(255, 255, 255)\",\n                background: \"rgb(23, 193, 232)\",\n                height: \"3em\"\n              },\n              onClick: UnAssignRoles,\n              children: /*#__PURE__*/_jsx(ArrowLeft, {\n                style: {\n                  fontSize: \"50px\"\n                }\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            md: 5,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              children: \"\\u0627\\u0644\\u0623\\u062F\\u0648\\u0627\\u0631 \\u063A\\u064A\\u0631 \\u0627\\u0644\\u0645\\u0633\\u0646\\u062F\\u0629\"\n            }), /*#__PURE__*/_jsx(Card, {\n              style: {\n                padding: \"1em 3em\",\n                margin: \"5px 0px\",\n                height: \"15em\"\n              },\n              children: /*#__PURE__*/_jsx(FormGroup, {\n                children: unassignedRoles.map(e => {\n                  return /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Checkbox, {\n                      value: e.id,\n                      checked: selectedUnAssignedRoles.includes(e.id),\n                      onChange: () => addToAssigned(e.id)\n                    }),\n                    label: e.name\n                  });\n                })\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          md: 12,\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n          },\n          children: [/*#__PURE__*/_jsxs(Grid, {\n            md: 5,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              children: \"\\u0627\\u0644\\u0635\\u0644\\u0627\\u062D\\u064A\\u0627\\u062A \\u0627\\u0644\\u0645\\u0633\\u0646\\u062F\\u0629\"\n            }), /*#__PURE__*/_jsx(Card, {\n              style: {\n                padding: \"1em 3em\",\n                margin: \"5px 0px\",\n                height: \"15em\"\n              },\n              children: /*#__PURE__*/_jsx(FormGroup, {\n                children: assignedPermissions.map(e => {\n                  return /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Checkbox, {\n                      value: e.id,\n                      checked: selectedAssignedPermissions.includes(e.id),\n                      onChange: () => addToUnAssignedPermission(e.id)\n                    }),\n                    label: e.name\n                  });\n                })\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            md: 1,\n            mt: 2,\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-around\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsx(SuiButton, {\n              style: {\n                color: \"rgb(255, 255, 255)\",\n                background: \"rgb(23, 193, 232)\",\n                height: \"3em\",\n                marginLeft: \"1em\"\n              },\n              onClick: AssignPermission,\n              children: /*#__PURE__*/_jsx(ArrowRight, {\n                style: {\n                  fontSize: \"50px\"\n                }\n              })\n            }), /*#__PURE__*/_jsx(SuiButton, {\n              style: {\n                color: \"rgb(255, 255, 255)\",\n                background: \"rgb(23, 193, 232)\",\n                height: \"3em\"\n              },\n              onClick: UnAssignPermission,\n              children: /*#__PURE__*/_jsx(ArrowLeft, {\n                style: {\n                  fontSize: \"50px\"\n                }\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            md: 5,\n            children: [/*#__PURE__*/_jsx(Typography, {\n              children: \"\\u0627\\u0644\\u0635\\u0644\\u0627\\u062D\\u064A\\u0627\\u062A \\u063A\\u064A\\u0631 \\u0627\\u0644\\u0645\\u0633\\u0646\\u062F\\u0629\"\n            }), /*#__PURE__*/_jsx(Card, {\n              style: {\n                padding: \"1em 3em\",\n                margin: \"5px 0px\",\n                height: \"15em\",\n                overflowY: \"scroll\"\n              },\n              children: /*#__PURE__*/_jsx(FormGroup, {\n                children: unassignedPermissions.map(e => {\n                  return /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Checkbox, {\n                      value: e.id,\n                      checked: selectedUnAssignedPermissions.includes(e.id),\n                      onChange: () => addToAssignedPermission(e.id)\n                    }),\n                    label: e.name\n                  });\n                })\n              })\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(CardActions, {})]\n    })\n  });\n};\n\nUserDetails.layout = Admin;\nUserDetails.auth = false;\nexport default UserDetails; // <>\n//   <GridItem item md={3} xs={12} sm={6}>\n//     <Typography variant=\"h5\" component=\"div\">\n//       الأدوار غير المسندة\n//     </Typography>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={6}>\n//     <Typography variant=\"h5\" component=\"div\">\n//       الأدوار المسندة\n//     </Typography>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={6}>\n//     <Typography variant=\"h5\" component=\"div\">\n//       الصلاحيات غير المسندة\n//     </Typography>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={6}>\n//     <Typography variant=\"h5\" component=\"div\">\n//       الصلاحيات المسندة\n//     </Typography>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={12}>\n//     <TextField\n//       id=\"outlined-select-currency-native\"\n//       select\n//       label=\"\"\n//       defaultValue=\"\"\n//       onChange={(e) => changeRole(e.target.value)}\n//       helperText=\"الرجاء اختيار دور لهذا المستخدم\"\n//     >\n//       {unassignedRoles.map((option) => (\n//         <option key={option.id} value={option.id}>\n//           {option.name}\n//         </option>\n//       ))}\n//     </TextField>\n//     <SuiButton\n//       style={{\n//         color: \"rgb(255, 255, 255)\",\n//         background: \"rgb(23, 193, 232)\",\n//         margin: \"0 10px 0 10px\",\n//       }}\n//       onClick={assignRole}\n//     >\n//       {translate(\"إسناد\")}\n//     </SuiButton>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={12}>\n//     <TextField\n//       id=\"outlined-select-currency-native\"\n//       select\n//       label=\"\"\n//       defaultValue=\"\"\n//       onChange={(e) => changeAssignedRole(e.target.value)}\n//       helperText=\"الرجاء اختيار دور لهذا المستخدم\"\n//     >\n//       {assignedRoles.map((option) => (\n//         <option key={option.id} value={option.id}>\n//           {option.name}\n//         </option>\n//       ))}\n//     </TextField>\n//     <SuiButton\n//       style={{\n//         color: \"rgb(255, 255, 255)\",\n//         background: \"rgb(23, 193, 232)\",\n//         margin: \"0 10px 0 10px\",\n//       }}\n//       onClick={unAssignRole}\n//     >\n//       {translate(\"إلغاء الإسناد\")}\n//     </SuiButton>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={12}>\n//     <Select\n//       labelId=\"mutiple-select-label\"\n//       multiple\n//       value={selectedUnAssigned}\n//       onChange={handleChangeUnAssign}\n//       renderValue={(selected) => {\n//         return `${selected.map((e) => e.name).length} صلاحية مختارة`;\n//       }}\n//       MenuProps={MenuProps}\n//     >\n//       {unassignedPermissions.map((option) => (\n//         <MenuItem key={option.id} value={option.id}>\n//           <ListItemIcon>\n//             <Checkbox checked={selectedUnAssigned.indexOf(option.id) > -1} />\n//           </ListItemIcon>\n//           <ListItemText primary={option.name} />\n//         </MenuItem>\n//       ))}\n//     </Select>\n//     <SuiButton\n//       style={{\n//         color: \"rgb(255, 255, 255)\",\n//         background: \"rgb(23, 193, 232)\",\n//         margin: \"0 10px 0 10px\",\n//       }}\n//       onClick={submitPermission}\n//     >\n//       {translate(\"إسناد\")}\n//     </SuiButton>\n//   </GridItem>\n//   <GridItem item md={3} xs={12} sm={12}>\n//     <Select\n//       labelId=\"mutiple-select-label\"\n//       multiple\n//       value={selected}\n//       onChange={handleChange}\n//       renderValue={(selected) => {\n//         return `${selected.map((e) => e.name).length} صلاحية مختارة`;\n//       }}\n//       MenuProps={MenuProps}\n//     >\n//       {permissions.map((option) => (\n//         <MenuItem key={option.id} value={option.id}>\n//           <ListItemIcon>\n//             <Checkbox checked={selected.indexOf(option.id) > -1} />\n//           </ListItemIcon>\n//           <ListItemText primary={option.name} />\n//         </MenuItem>\n//       ))}\n//     </Select>\n//     <SuiButton\n//       style={{\n//         color: \"rgb(255, 255, 255)\",\n//         background: \"rgb(23, 193, 232)\",\n//         margin: \"0 10px 0 10px\",\n//       }}\n//       onClick={revokePermission}\n//     >\n//       {translate(\"إلغاء الإسناد\")}\n//     </SuiButton>\n//   </GridItem>\n// </>;","map":null,"metadata":{},"sourceType":"module"}