{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport apiConnector from \"./TokenizedApiClient\";\nexport default class ExamService {\n  static async GetAllCourses(programId, eduYearId) {\n    const listUrl = process.env.LIST_EXAM_COURSE_URL;\n    console.clear();\n    console.log(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`);\n    return await apiConnector.get(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async GetAllPlans(programId, eduYearId, eduCourseId, methodId) {\n    const listUrl = process.env.LIST_EXAM_URL;\n    return await apiConnector.get(`${listUrl}/plan?program_id=${programId}&edu_year_id=\n            ${eduYearId}&edu_course_id=${eduCourseId}&method_id=${methodId}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async GetAllHalls(date, edu_year_id = \"1\") {\n    const listUrl = process.env.LIST_EXAM_URL;\n    return await apiConnector.get(`${listUrl}halls?edu_year_id=${edu_year_id}&date=${date}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async Add(payload) {\n    const createUrl = process.env.CREATE_COURSE_URL;\n    console.log(createUrl);\n    return await apiConnector.post(createUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async getExams(plan_id) {\n    const getUrl = process.env.LIST_EXAM_URL;\n    return await apiConnector.get(getUrl + \"?plan_id=\" + plan_id).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n}\n\n_defineProperty(ExamService, \"async\", void 0);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/Services/ExamService.ts"],"names":["apiConnector","ExamService","GetAllCourses","programId","eduYearId","listUrl","process","env","LIST_EXAM_COURSE_URL","console","clear","log","get","then","response","data","success","result","catch","error","GetAllPlans","eduCourseId","methodId","LIST_EXAM_URL","GetAllHalls","date","edu_year_id","Add","payload","createUrl","CREATE_COURSE_URL","post","getExams","plan_id","getUrl"],"mappings":"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","sourcesContent":["import apiConnector from \"./TokenizedApiClient\";\r\nimport { ApiResponse } from \"../Models/ApiResponse/ApiResponse\";\r\n\r\nexport default class ExamService {\r\n  static async GetAllCourses(\r\n    programId?: string,\r\n    eduYearId?: string\r\n  ): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_COURSE_URL as string;\r\n    console.clear();\r\n    console.log(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`);\r\n    return await apiConnector\r\n      .get(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n  static async GetAllPlans(\r\n    programId?: string,\r\n    eduYearId?: string,\r\n    eduCourseId?: string,\r\n    methodId?: string\r\n  ): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_URL as string;\r\n    return await apiConnector\r\n      .get(\r\n        `${listUrl}/plan?program_id=${programId}&edu_year_id=\r\n            ${eduYearId}&edu_course_id=${eduCourseId}&method_id=${methodId}`\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async GetAllHalls(\r\n    date: string,\r\n    edu_year_id: string = \"1\"\r\n  ): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_URL as string;\r\n    return await apiConnector\r\n      .get(`${listUrl}halls?edu_year_id=${edu_year_id}&date=${date}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async Add(payload): Promise<ApiResponse> {\r\n    const createUrl = process.env.CREATE_COURSE_URL as string;\r\n    console.log(createUrl);\r\n    return await apiConnector\r\n      .post(createUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async getExams(plan_id: string): Promise<ApiResponse> {\r\n    const getUrl = process.env.LIST_EXAM_URL as string;\r\n    return await apiConnector\r\n      .get(getUrl + \"?plan_id=\" + plan_id)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async \r\n}\r\n"]},"metadata":{},"sourceType":"module"}