{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\StudentAffairs\\\\students\\\\students\\\\pages\\\\students_affairs\\\\admin\\\\observers\\\\observations.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport Admin from \"../../../../layouts/Admin\";\nimport { Box, Grid, TextField, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport SuiButton from \"../../../../components/SuiButton\";\nimport React from \"react\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport AssignObserversToHall from \"../../../../components/AssignObserversToHall\";\nimport * as Yup from \"yup\";\nimport EducationalYearService from \"../../../../Services/EducationalYearService\";\nimport ExamHallsService from \"../../../../Services/ExamHallsService\";\n\nconst Observations = () => {\n  _s();\n\n  const {\n    0: eduYear,\n    1: setEduYear\n  } = useState(null);\n  const today = new Date();\n  const todayStr = today.getFullYear() + \"-\" + (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + today.getDate().toString().padStart(2, \"0\");\n  const {\n    translate\n  } = useTranslation();\n  const {\n    0: examDate,\n    1: setExamDate\n  } = useState(todayStr);\n  const [showAssignObservers, setshowAssignObservers] = React.useState(false);\n\n  const setShow = () => {\n    setshowAssignObservers(!showAssignObservers);\n  };\n\n  const handleDateChange = event => {\n    setExamDate(event.target.value);\n  };\n\n  useEffect(() => {\n    if (eduYear) {\n      ExamHallsService.GetAll(eduYear.id, examDate).then(res => {\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(error => {\n        console.error(\"error\", error);\n      });\n    }\n  }, [examDate]);\n  useEffect(() => {\n    if (eduYear && !showAssignObservers) {\n      ExamHallsService.GetAll(eduYear.id, examDate).then(res => {\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(error => {\n        console.error(\"error\", error);\n      });\n    }\n  }, [showAssignObservers]);\n\n  const handleAddObserver = data => {\n    setHall(data);\n    setshowAssignObservers(true);\n  };\n\n  const handleClose = () => {\n    setshowAssignObservers(false);\n  };\n\n  const handleAddObserverSubmit = (values, submitting) => {};\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: halls,\n    1: setHalls\n  } = useState([]);\n  const {\n    0: hall,\n    1: setHall\n  } = useState(null);\n  /************** LOADING DATA ***************/\n\n  useEffect(() => {\n    EducationalYearService.GetAll().then(res => {\n      let edu_year = res.result.slice(0)[0];\n      setEduYear(edu_year);\n      ExamHallsService.GetAll(edu_year === null || edu_year === void 0 ? void 0 : edu_year.id, examDate).then(res => {\n        console.log(\"Exam Halls:\");\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(error => {\n        console.error(\"error\", error);\n      });\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  const addObserverScheme = Yup.object().shape({\n    employee: Yup.number().required(translate(\"{0} is required\", \"Observer\"))\n  });\n  let columns = [{\n    title: translate(\"Exam Halls Ids\"),\n    field: \"exam_halls_ids\",\n    hidden: true\n  }, {\n    title: translate(\"Hall Id\"),\n    field: \"hall\",\n    hidden: true\n  }, {\n    title: translate(\"Hall\"),\n    field: \"hallName\"\n  }, {\n    title: translate(\"From\"),\n    field: \"from\"\n  }, {\n    title: translate(\"To\"),\n    field: \"to\"\n  }, {\n    title: translate(\"Exams details\"),\n    field: \"examsDetails\"\n  }, {\n    title: translate(\"Number of observers\"),\n    field: \"observers\"\n  }];\n\n  const renderHalls = () => {\n    if (halls != null && halls.length > 0) {\n      let data = halls;\n      let options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        pageSize: 10,\n        maxBodyHeight: \"500px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      let actions = [{\n        icon: () => /*#__PURE__*/_jsxDEV(SuiButton, {\n          style: {\n            margin: 5\n          },\n          color: \"primary\",\n          children: translate(\"Assign Observers\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this),\n        onClick: (evt, data) => handleAddObserver(data)\n      }];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ActionTable, {\n          Title: \"\",\n          Columns: columns,\n          Data: data.map(item => {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              hallName: item.hall.name,\n              from: item.timePeriod.slice(11, 16),\n              to: item.timePeriod.slice(33, 38),\n              examsDetails: item.exams.reduce((acc, exam) => {\n                return acc ? `${acc} + ${exam.ar_year} ${exam.ar_name} ${exam.code}` : `${exam.ar_year} ${exam.ar_name} ${exam.code}`;\n              }, \"\")\n            });\n          }),\n          Options: options,\n          Actions: actions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(Placeholder, {\n      loading: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }, this);\n  };\n  /*return (\r\n      <React.Fragment>\r\n      <Grid container>\r\n          <Grid item md={12} spacing={2}>\r\n              <Grid item md={4}>\r\n                  <Box mb={2}>\r\n                      <Box mb={1} ml={0.5}>\r\n                          <Typography component=\"label\" variant=\"caption\">\r\n                              {translate(\"Examination Halls on\")}\r\n                          </Typography>\r\n                      </Box>\r\n                      <TextField\r\n                          disabled={false}\r\n                          onChange={handleDateChange}\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          type=\"date\"\r\n                          id=\"exam_date\"\r\n                          name=\"exam_date\"\r\n                          //defaultValue={todayStr}\r\n                          value={examDate}\r\n                          //onBlur={handleBlur}\r\n                          //error={Boolean(touched.birth_date && errors.birth_date)}\r\n                          //helperText={touched.birth_date && errors.birth_date}\r\n                          placeholder={translate(\"Exam date\")}\r\n                          fullWidth\r\n                      />\r\n                  </Box>\r\n              </Grid>\r\n              <Grid item md={8}>\r\n                  \r\n              </Grid>\r\n          </Grid>\r\n      </Grid>\r\n      {halls && halls.length > 0 ? (\r\n      <Grid container>\r\n          <Grid item md={12} spacing={2}>\r\n              <Grid item md={3}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Hall\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"From\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"To\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={3}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Exams details\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Number of observers\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <GridItem md={1.5}>\r\n                  \r\n              </GridItem>\r\n          </Grid>\r\n          <FieldArray\r\n              name=\"halls\"\r\n              render={(arrayHelpers) => (\r\n                  <div>\r\n                      {halls.map((hall, index) => (\r\n                          <div key={index}>\r\n                              <Grid container spacing={2}>\r\n                                  <Grid item xs={3}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.hallName}`}\r\n                                              name={`${hall.id}-${hall.hallName}`}\r\n                                              value={hall.hallName}\r\n                                              placeholder={translate(\"Hall\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.from}`}\r\n                                              name={`${hall.id}-${hall.from}`}\r\n                                              value={hall.from}\r\n                                              placeholder={translate(\"From\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.to}`}\r\n                                              name={`${hall.id}-${hall.to}`}\r\n                                              value={hall.to}\r\n                                              placeholder={translate(\"To\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={3}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.examsDetails}`}\r\n                                              name={`${hall.id}-${hall.examsDetails}`}\r\n                                              value={hall.examsDetails}\r\n                                              placeholder={translate(\"Exams details\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.observersNumber}`}\r\n                                              name={`${hall.id}-${hall.observersNumber}`}\r\n                                              value={hall.observersNumber}\r\n                                              placeholder={translate(\"Number of observers\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <SuiButton\r\n                                              style={{ margin: 5 }}\r\n                                              color=\"primary\"\r\n                                              onClick={handleAddObserver}\r\n                                          >\r\n                                              {translate(\"Assign Observers\")}\r\n                                          </SuiButton>\r\n                                      </Grid>\r\n                                  </Grid>\r\n                              </Grid>\r\n                          </div>\r\n                      ))}\r\n                  </div>\r\n              )}\r\n          />\r\n      </Grid>\r\n          ) : (\r\n                  <React.Fragment>\r\n                      {translate(\"No exams on this date\")}\r\n                  </React.Fragment>\r\n              )}\r\n      </React.Fragment>\r\n  );*/\n\n\n  return !showAssignObservers ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 12,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              mb: 1,\n              ml: 0.5,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"label\",\n                variant: \"caption\",\n                children: `${translate(\"Educational year\")}: ${eduYear === null || eduYear === void 0 ? void 0 : eduYear.year}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mb: 2,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              mb: 1,\n              ml: 0.5,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"label\",\n                variant: \"caption\",\n                children: translate(\"Examination Halls on\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: false,\n              onChange: handleDateChange,\n              variant: \"outlined\",\n              size: \"small\",\n              type: \"date\",\n              id: \"exam_date\",\n              name: \"exam_date\" //defaultValue={todayStr}\n              ,\n              value: examDate //onBlur={handleBlur}\n              //error={Boolean(touched.birth_date && errors.birth_date)}\n              //helperText={touched.birth_date && errors.birth_date}\n              ,\n              placeholder: translate(\"Exam date\"),\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this), renderHalls()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(AssignObserversToHall, {\n    setShow: setShow,\n    hall: hall,\n    formScheme: addObserverScheme,\n    examDate: examDate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Observations, \"DaSzLsazwnH2RSeSIZZeBEQTYb4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Observations;\nObservations.auth = true;\nObservations.layout = Admin;\nexport default Observations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Observations\");","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/students_affairs/admin/observers/observations.tsx"],"names":["useState","useEffect","Admin","Box","Grid","TextField","Typography","useTranslation","SuiButton","React","ActionTable","Placeholder","AssignObserversToHall","Yup","EducationalYearService","ExamHallsService","Observations","eduYear","setEduYear","today","Date","todayStr","getFullYear","getMonth","toString","padStart","getDate","translate","examDate","setExamDate","showAssignObservers","setshowAssignObservers","setShow","handleDateChange","event","target","value","GetAll","id","then","res","console","log","result","setHalls","catch","error","handleAddObserver","data","setHall","handleClose","handleAddObserverSubmit","values","submitting","loading","setLoading","halls","hall","edu_year","slice","addObserverScheme","object","shape","employee","number","required","columns","title","field","hidden","renderHalls","length","options","actionsColumnIndex","headerStyle","backgroundColor","color","fontWeight","filtering","paging","pageSize","maxBodyHeight","search","tableLayout","actions","icon","margin","onClick","evt","map","item","hallName","name","from","timePeriod","to","examsDetails","exams","reduce","acc","exam","ar_year","ar_name","code","year","auth","layout"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Admin from \"../../../../layouts/Admin\";\r\nimport GridContainer from \"../../../../components/Grid/GridContainer\";\r\nimport GridItem from \"../../../../components/Grid/GridItem\";\r\nimport { Box, Grid, TextField, Typography } from \"@material-ui/core\";\r\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\r\nimport { FieldArray } from \"formik\";\r\nimport SuiButton from \"../../../../components/SuiButton\";\r\nimport React from \"react\";\r\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\r\nimport Placeholder from \"../../../../Utility/Placeholders\";\r\nimport AssignObserversToHall from \"../../../../components/AssignObserversToHall\";\r\nimport * as Yup from \"yup\";\r\nimport EducationalYearService from \"../../../../Services/EducationalYearService\";\r\nimport { IEducationalYearModel } from \"../../../../Models/EducationalYearModel\";\r\nimport ExamHallsService from \"../../../../Services/ExamHallsService\";\r\n\r\ninterface IObservationsProps { }\r\n\r\nconst Observations: React.FC<IObservationsProps> = () => {\r\n    const [eduYear, setEduYear] = useState(null);\r\n    const today = new Date();\r\n    const todayStr = today.getFullYear() + \"-\" + \r\n                     (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" +\r\n                     today.getDate().toString().padStart(2, \"0\");\r\n    const { translate } = useTranslation();\r\n    const [examDate, setExamDate] = useState(todayStr);\r\n\r\n    const [showAssignObservers, setshowAssignObservers] = React.useState(false);\r\n    const setShow = () => {\r\n        setshowAssignObservers(!showAssignObservers);\r\n    };\r\n\r\n    const handleDateChange = (event) => {\r\n        setExamDate(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (eduYear) {\r\n            ExamHallsService.GetAll(eduYear.id, examDate)\r\n            .then((res) => {\r\n                console.log(res.result);\r\n                setHalls(res.result);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"error\", error);\r\n            });\r\n        }\r\n    }, [examDate]);\r\n\r\n    useEffect(() => {\r\n        if (eduYear && !showAssignObservers) {\r\n            ExamHallsService.GetAll(eduYear.id, examDate)\r\n            .then((res) => {\r\n                console.log(res.result);\r\n                setHalls(res.result);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"error\", error);\r\n            });\r\n        }\r\n    }, [showAssignObservers]);\r\n\r\n    const handleAddObserver = (data) => {\r\n        setHall(data);\r\n        setshowAssignObservers(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setshowAssignObservers(false);\r\n    }\r\n\r\n    const handleAddObserverSubmit = (values, submitting) => {}\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [halls, setHalls] = useState([]);\r\n    const [hall, setHall] = useState(null);\r\n    /************** LOADING DATA ***************/\r\n    useEffect(() => {\r\n        EducationalYearService.GetAll()\r\n            .then((res) => {\r\n                let edu_year = (res.result as IEducationalYearModel[]).slice(0)[0];\r\n                setEduYear(edu_year);\r\n                ExamHallsService.GetAll(edu_year?.id, examDate)\r\n                    .then((res) => {\r\n                        console.log(\"Exam Halls:\");\r\n                        console.log(res.result);\r\n                        setHalls(res.result);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"error\", error);\r\n                    });\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"error\", error);\r\n        });\r\n    }, []);\r\n\r\n    const addObserverScheme = Yup.object().shape({\r\n        employee: Yup.number().required(translate(\"{0} is required\", \"Observer\")),\r\n    });\r\n\r\n    let columns = [\r\n        {\r\n            title: translate(\"Exam Halls Ids\"),\r\n            field: \"exam_halls_ids\",\r\n            hidden: true,\r\n        },\r\n        {\r\n            title: translate(\"Hall Id\"),\r\n            field: \"hall\",\r\n            hidden: true,\r\n        },\r\n        {\r\n            title: translate(\"Hall\"),\r\n            field: \"hallName\",\r\n        },\r\n        {\r\n            title: translate(\"From\"),\r\n            field: \"from\",\r\n        },\r\n        {\r\n            title: translate(\"To\"),\r\n            field: \"to\",\r\n        },\r\n        {\r\n            title: translate(\"Exams details\"),\r\n            field: \"examsDetails\",\r\n        },\r\n        {\r\n            title: translate(\"Number of observers\"),\r\n            field: \"observers\",\r\n        },\r\n    ];\r\n\r\n    const renderHalls = () => {\r\n        if (halls != null && halls.length > 0) {\r\n          let data = halls;\r\n          let options = {\r\n            // exportAllData: true,\r\n            // exportButton: true,\r\n            actionsColumnIndex: -1,\r\n            headerStyle: {\r\n              backgroundColor: \"#01579b\",\r\n              color: \"#FFF\",\r\n              fontWeight: \"bold\",\r\n            },\r\n            filtering: false,\r\n            paging: true,\r\n            pageSize: 10,\r\n            maxBodyHeight: \"500px\",\r\n            search: false,\r\n            tableLayout: \"auto\",\r\n          };\r\n          let actions = [\r\n            {\r\n              icon: () => (\r\n                <SuiButton\r\n                    style={{ margin: 5 }}\r\n                    color=\"primary\"\r\n                >\r\n                    {translate(\"Assign Observers\")}\r\n                </SuiButton>\r\n              ),\r\n              onClick: (evt, data) => handleAddObserver(data),\r\n            },\r\n          ];\r\n          return (\r\n            <div>\r\n              <ActionTable\r\n                Title=\"\"\r\n                Columns={columns}\r\n                Data={data.map(item => { return {...item,\r\n                    hallName: item.hall.name,\r\n                    from: item.timePeriod.slice(11, 16),\r\n                    to: item.timePeriod.slice(33, 38),\r\n                    examsDetails: item.exams.reduce((acc, exam) => {\r\n                        return acc ? `${acc} + ${exam.ar_year} ${exam.ar_name} ${exam.code}` : `${exam.ar_year} ${exam.ar_name} ${exam.code}` \r\n                    }, \"\"),\r\n                }})}\r\n                Options={options}\r\n                Actions={actions}\r\n              />\r\n            </div>\r\n          );\r\n        } else return <Placeholder loading={false} />;\r\n      };\r\n\r\n    /*return (\r\n        <React.Fragment>\r\n        <Grid container>\r\n            <Grid item md={12} spacing={2}>\r\n                <Grid item md={4}>\r\n                    <Box mb={2}>\r\n                        <Box mb={1} ml={0.5}>\r\n                            <Typography component=\"label\" variant=\"caption\">\r\n                                {translate(\"Examination Halls on\")}\r\n                            </Typography>\r\n                        </Box>\r\n                        <TextField\r\n                            disabled={false}\r\n                            onChange={handleDateChange}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            type=\"date\"\r\n                            id=\"exam_date\"\r\n                            name=\"exam_date\"\r\n                            //defaultValue={todayStr}\r\n                            value={examDate}\r\n                            //onBlur={handleBlur}\r\n                            //error={Boolean(touched.birth_date && errors.birth_date)}\r\n                            //helperText={touched.birth_date && errors.birth_date}\r\n                            placeholder={translate(\"Exam date\")}\r\n                            fullWidth\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={8}>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        {halls && halls.length > 0 ? (\r\n        <Grid container>\r\n            <Grid item md={12} spacing={2}>\r\n                <Grid item md={3}>\r\n                        <Typography component=\"label\" variant=\"caption\">\r\n                            {translate(\"Hall\")}\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={1.5}>\r\n                        <Typography component=\"label\" variant=\"caption\">\r\n                            {translate(\"From\")}\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={1.5}>\r\n                        <Typography component=\"label\" variant=\"caption\">\r\n                            {translate(\"To\")}\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                        <Typography component=\"label\" variant=\"caption\">\r\n                            {translate(\"Exams details\")}\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={1.5}>\r\n                        <Typography component=\"label\" variant=\"caption\">\r\n                            {translate(\"Number of observers\")}\r\n                        </Typography>\r\n                </Grid>\r\n                <GridItem md={1.5}>\r\n                    \r\n                </GridItem>\r\n            </Grid>\r\n            <FieldArray\r\n                name=\"halls\"\r\n                render={(arrayHelpers) => (\r\n                    <div>\r\n                        {halls.map((hall, index) => (\r\n                            <div key={index}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={3}>\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                disabled={true}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                id={`${hall.id}-${hall.hallName}`}\r\n                                                name={`${hall.id}-${hall.hallName}`}\r\n                                                value={hall.hallName}\r\n                                                placeholder={translate(\"Hall\")}\r\n                                                fullWidth\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={1.5}>\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                disabled={true}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                id={`${hall.id}-${hall.from}`}\r\n                                                name={`${hall.id}-${hall.from}`}\r\n                                                value={hall.from}\r\n                                                placeholder={translate(\"From\")}\r\n                                                fullWidth\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={1.5}>\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                disabled={true}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                id={`${hall.id}-${hall.to}`}\r\n                                                name={`${hall.id}-${hall.to}`}\r\n                                                value={hall.to}\r\n                                                placeholder={translate(\"To\")}\r\n                                                fullWidth\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={3}>\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                disabled={true}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                id={`${hall.id}-${hall.examsDetails}`}\r\n                                                name={`${hall.id}-${hall.examsDetails}`}\r\n                                                value={hall.examsDetails}\r\n                                                placeholder={translate(\"Exams details\")}\r\n                                                fullWidth\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={1.5}>\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                disabled={true}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                id={`${hall.id}-${hall.observersNumber}`}\r\n                                                name={`${hall.id}-${hall.observersNumber}`}\r\n                                                value={hall.observersNumber}\r\n                                                placeholder={translate(\"Number of observers\")}\r\n                                                fullWidth\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={1.5}>\r\n                                        <Grid item>\r\n                                            <SuiButton\r\n                                                style={{ margin: 5 }}\r\n                                                color=\"primary\"\r\n                                                onClick={handleAddObserver}\r\n                                            >\r\n                                                {translate(\"Assign Observers\")}\r\n                                            </SuiButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            />\r\n        </Grid>\r\n            ) : (\r\n                    <React.Fragment>\r\n                        {translate(\"No exams on this date\")}\r\n                    </React.Fragment>\r\n                )}\r\n        </React.Fragment>\r\n    );*/\r\n    return (!showAssignObservers ? (\r\n        <React.Fragment>\r\n        <Grid container>\r\n            <Grid item md={12} spacing={2}>\r\n                <Grid item md={4}>\r\n                    <Box mb={2}>\r\n                        <Box mb={1} ml={0.5}>\r\n                            <Typography component=\"label\" variant=\"caption\">\r\n                                {`${translate(\"Educational year\")}: ${eduYear?.year}`}\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={4}>\r\n                    <Box mb={2}>\r\n                        <Box mb={1} ml={0.5}>\r\n                            <Typography component=\"label\" variant=\"caption\">\r\n                                {translate(\"Examination Halls on\")}\r\n                            </Typography>\r\n                        </Box>\r\n                        <TextField\r\n                            disabled={false}\r\n                            onChange={handleDateChange}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            type=\"date\"\r\n                            id=\"exam_date\"\r\n                            name=\"exam_date\"\r\n                            //defaultValue={todayStr}\r\n                            value={examDate}\r\n                            //onBlur={handleBlur}\r\n                            //error={Boolean(touched.birth_date && errors.birth_date)}\r\n                            //helperText={touched.birth_date && errors.birth_date}\r\n                            placeholder={translate(\"Exam date\")}\r\n                            fullWidth\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={8}>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        {renderHalls()}\r\n        </React.Fragment>\r\n    ) : (\r\n            <AssignObserversToHall\r\n              setShow={setShow}\r\n              hall={hall}\r\n              formScheme={addObserverScheme}\r\n              examDate={examDate}\r\n            />\r\n          )\r\n    );\r\n};\r\n\r\n(Observations as any).auth = true;\r\n(Observations as any).layout = Admin;\r\n\r\nexport default Observations;"]},"metadata":{},"sourceType":"module"}