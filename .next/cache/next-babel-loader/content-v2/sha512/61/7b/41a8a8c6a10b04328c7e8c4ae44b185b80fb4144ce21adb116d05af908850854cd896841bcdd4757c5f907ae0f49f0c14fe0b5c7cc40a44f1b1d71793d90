{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n//Api route function that is returned from next auth\nconst authOptions = {\n  secret: process.env.NextAuth_SECRET,\n  session: {\n    strategy: \"jwt\"\n  },\n  providers: [CredentialsProvider({\n    name: \"credentials\",\n    type: \"credentials\",\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      const payload = {\n        email: credentials.email,\n        password: credentials.password\n      };\n      const res = await fetch(`${process.env.BASE_URL}/api/login`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: JSON.stringify(payload)\n      });\n      let _user = null;\n      const response = res.json();\n\n      if (response.success) {\n        _user = {\n          id: response.result.id,\n          email: response.result.email,\n          token: response.result.token\n        };\n        return _user;\n      }\n\n      throw new Error(\"Invalid Credentials\");\n    }\n\n  })],\n  callbacks: {\n    async jwt({\n      token,\n      user\n    }) {\n      return _objectSpread(_objectSpread({}, token), user);\n    },\n\n    async session({\n      session,\n      token,\n      user\n    }) {\n      session.user = token;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/authentication/sign-in\"\n  }\n};\nexport default NextAuth(authOptions);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","CredentialsProvider","authOptions","secret","process","env","NextAuth_SECRET","session","strategy","providers","name","type","credentials","email","label","placeholder","password","authorize","req","payload","res","fetch","BASE_URL","method","headers","Accept","body","JSON","stringify","_user","response","json","success","id","result","token","Error","callbacks","jwt","user","pages","signIn"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAA0C,WAA1C;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AAWA;AACA,MAAMC,WAA4B,GAAG;AACnCC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,eADe;AAEnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH,GAF0B;AAKnCC,EAAAA,SAAS,EAAE,CACTR,mBAAmB,CAAC;AAClBS,IAAAA,IAAI,EAAE,aADY;AAElBC,IAAAA,IAAI,EAAE,aAFY;AAGlBC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELH,QAAAA,IAAI,EAAE,MAFD;AAGLI,QAAAA,WAAW,EAAE;AAHR,OADI;AAMXC,MAAAA,QAAQ,EAAE;AACRF,QAAAA,KAAK,EAAE,UADC;AAERH,QAAAA,IAAI,EAAE,UAFE;AAGRI,QAAAA,WAAW,EAAE;AAHL;AANC,KAHK;;AAelB,UAAME,SAAN,CAAgBL,WAAhB,EAA6BM,GAA7B,EAAkC;AAChC,YAAMC,OAAO,GAAG;AACdN,QAAAA,KAAK,EAAED,WAAW,CAACC,KADL;AAEdG,QAAAA,QAAQ,EAAEJ,WAAW,CAACI;AAFR,OAAhB;AAIA,YAAMI,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEjB,OAAO,CAACC,GAAR,CAAYiB,QAAS,YAAzB,EAAsC;AAC3DC,QAAAA,MAAM,EAAE,MADmD;AAE3DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAFkD;AAM3DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,OAAf;AANqD,OAAtC,CAAvB;AAQA,UAAIU,KAAK,GAAG,IAAZ;AACA,YAAMC,QAAQ,GAAGV,GAAG,CAACW,IAAJ,EAAjB;;AACA,UAAID,QAAQ,CAACE,OAAb,EAAsB;AACpBH,QAAAA,KAAK,GAAG;AACNI,UAAAA,EAAE,EAAEH,QAAQ,CAACI,MAAT,CAAgBD,EADd;AAENpB,UAAAA,KAAK,EAAEiB,QAAQ,CAACI,MAAT,CAAgBrB,KAFjB;AAGNsB,UAAAA,KAAK,EAAEL,QAAQ,CAACI,MAAT,CAAgBC;AAHjB,SAAR;AAKA,eAAON,KAAP;AACD;;AACD,YAAM,IAAIO,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAvCiB,GAAD,CADV,CALwB;AAgDnCC,EAAAA,SAAS,EAAE;AACT,UAAMC,GAAN,CAAU;AAAEH,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAV,EAA2B;AACzB,6CAAYJ,KAAZ,GAAsBI,IAAtB;AACD,KAHQ;;AAIT,UAAMhC,OAAN,CAAc;AAAEA,MAAAA,OAAF;AAAW4B,MAAAA,KAAX;AAAkBI,MAAAA;AAAlB,KAAd,EAAwC;AACtChC,MAAAA,OAAO,CAACgC,IAAR,GAAeJ,KAAf;AACA,aAAO5B,OAAP;AACD;;AAPQ,GAhDwB;AAyDnCiC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH;AAzD4B,CAArC;AA6DA,eAAezC,QAAQ,CAACE,WAAD,CAAvB","sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\nimport {\r\n  selectSessionKey,\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  setSessionKey,\r\n  selectDirection,\r\n} from \"../../../redux\";\r\nimport { SignInResponse } from \"next-auth/react\";\r\nimport { IUserSignInResponse } from \"../../../Models/ApiResponse/UserSignInResponse\";\r\n//Api route function that is returned from next auth\r\nconst authOptions: NextAuthOptions = {\r\n  secret: process.env.NextAuth_SECRET,\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      type: \"credentials\",\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n      async authorize(credentials, req) {\r\n        const payload = {\r\n          email: credentials.email,\r\n          password: credentials.password,\r\n        };\r\n        const res = await fetch(`${process.env.BASE_URL}/api/login`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          body: JSON.stringify(payload),\r\n        });\r\n        let _user = null;\r\n        const response = res.json() as IUserSignInResponse;\r\n        if (response.success) {\r\n          _user = {\r\n            id: response.result.id,\r\n            email: response.result.email,\r\n            token: response.result.token,\r\n          };\r\n          return _user;\r\n        }\r\n        throw new Error(\"Invalid Credentials\");\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      return { ...token, ...user };\r\n    },\r\n    async session({ session, token, user }) {\r\n      session.user = token;\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/authentication/sign-in\",\r\n  },\r\n};\r\nexport default NextAuth(authOptions);\r\n"]},"metadata":{},"sourceType":"module"}