{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Formik } from \"formik\";\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\nimport Admin from \"../../../../../layouts/Admin\";\nimport { Box, Card, Grid, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport GridItem from \"../../../../../components/Grid/GridItem\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../../Utility/Translations/useTranslation\";\nimport { toast } from \"react-toastify\";\nimport { Close } from \"@material-ui/icons\";\nimport SuiButton from \"../../../../../components/SuiButton\";\nimport TeacherService from \"../../../../../Services/TeacherService\";\nimport { AssignedTeachers } from \"../../../../../components/AssignedTeachers/AssignedTeachers\";\n\nconst AssignTeacher = ({\n  title,\n  data,\n  setShow\n}) => {\n  const router = useRouter();\n  const {\n    translate\n  } = useTranslation();\n  const {\n    0: teachers,\n    1: setTeachers\n  } = useState([]);\n  useEffect(() => {\n    TeacherService.GetAll().then(res => {\n      setTeachers(res.result);\n    }).catch(err => {\n      toast.error(err === null || err === void 0 ? void 0 : err.error);\n    });\n  }, []);\n  let asssignTeacherSchema = yup.object({\n    teacher_id: yup.number(translate(\"Teacher\")).positive(translate(\"You must select a teacher\")).required(translate(\"Field is required\")),\n    theoretical_hours: yup.number(translate(\"Theoretical Hours\")).positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    practical_hours: yup.number(\"Practical Hours\").positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    mixed_hours: yup.number(\"Practical Hours\").positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    theoretical_classes: yup.number(translate(\"Theoretical Classes\")).positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    practical_classes: yup.number(\"Practical Classes\").positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    mixed_classes: yup.number(\"Mixed Classes\").positive(translate(\"Field must be greater than 0\")).required(translate(\"Field is required\")),\n    notes: yup.string().nullable()\n  });\n  let initialValues = {\n    teacher_id: -1,\n    theoretical_hours: 0,\n    practical_hours: 0,\n    mixed_hours: 0,\n    theoretical_classes: 0,\n    practical_classes: 0,\n    mixed_classes: 0,\n    notes: \"\"\n  };\n  const {\n    0: refresh,\n    1: setRefresh\n  } = useState(false);\n\n  const submitForm = (values, setSubmitting, resetForm) => {\n    values = _objectSpread(_objectSpread({}, values), {}, {\n      plan_id: data.id\n    });\n    console.log(values);\n    TeacherService.AddTeachersAssignments(values).then(response => {\n      if (response.success) {\n        toast.success(translate(\"Teacher assigned successfully\"));\n        resetForm({});\n      } else {\n        console.log(response.error);\n        toast.error(response.error.message);\n      }\n    }).catch(error => {\n      console.log(error.message);\n    });\n    setRefresh(true);\n    setSubmitting(false);\n  };\n\n  return /*#__PURE__*/_jsx(Grid, {\n    container: true,\n    md: 12,\n    sm: 12,\n    children: /*#__PURE__*/_jsxs(Grid, {\n      md: 12,\n      sm: 12,\n      xs: 12,\n      children: [/*#__PURE__*/_jsx(Card, {\n        style: {\n          padding: \"1em 4em\",\n          margin: \"5px 0px\"\n        },\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsx(GridItem, {\n            item: true,\n            md: 9,\n            xs: 12,\n            sm: 12,\n            children: /*#__PURE__*/_jsx(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: title\n            })\n          }), /*#__PURE__*/_jsx(GridItem, {\n            md: 3,\n            xs: 12,\n            sm: 12,\n            children: /*#__PURE__*/_jsxs(SuiButton, {\n              onClick: setShow,\n              style: {\n                color: \"#dc3545\",\n                backgroundColor: \"transparent\",\n                border: \"1px solid #dc3545\"\n              },\n              children: [/*#__PURE__*/_jsx(Close, {}), translate(\"Cancel\")]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Card, {\n        style: {\n          padding: \"3em 3em\",\n          margin: \"5px 0px\"\n        },\n        children: /*#__PURE__*/_jsx(Formik, {\n          initialValues: initialValues,\n          validationSchema: asssignTeacherSchema,\n          onSubmit: (values, {\n            setSubmitting,\n            resetForm\n          }) => {\n            submitForm(values, setSubmitting, resetForm); // console.clear();\n            // console.log(values);\n          },\n          children: formik => {\n            const {\n              values,\n              handleChange,\n              handleSubmit,\n              errors,\n              touched,\n              handleBlur,\n              isSubmitting,\n              isValid,\n              dirty,\n              setFieldValue\n            } = formik;\n            return /*#__PURE__*/_jsxs(Form, {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxs(Grid, {\n                container: true,\n                md: 12,\n                xs: 12,\n                style: {\n                  margin: \"1em 0em\"\n                },\n                children: [/*#__PURE__*/_jsx(Grid, {\n                  container: true,\n                  md: 12,\n                  xs: 12,\n                  style: {\n                    margin: \"1em 0em\"\n                  },\n                  children: /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    md: 3,\n                    children: /*#__PURE__*/_jsx(GridItem, {\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        value: values.teacher_id || -1,\n                        variant: \"outlined\",\n                        size: \"small\",\n                        type: \"select\",\n                        id: \"teacher_id\",\n                        name: \"teacher_id\",\n                        select: true,\n                        onChange: handleChange,\n                        onBlur: handleBlur,\n                        placeholder: translate(\"Teacher\"),\n                        label: translate(\"Teacher\"),\n                        error: Boolean(touched.teacher_id && errors.teacher_id),\n                        helperText: touched.teacher_id && errors.teacher_id,\n                        fullWidth: true,\n                        children: teachers === null || teachers === void 0 ? void 0 : teachers.map(t => {\n                          var _t$person, _t$person2;\n\n                          return /*#__PURE__*/_jsx(MenuItem, {\n                            value: t.id,\n                            children: `${(_t$person = t.person) === null || _t$person === void 0 ? void 0 : _t$person.first_name} ${(_t$person2 = t.person) === null || _t$person2 === void 0 ? void 0 : _t$person2.last_name}`\n                          }, t.id);\n                        })\n                      })\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      value: values.theoretical_hours || \"\",\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"theoretical_hours\",\n                      name: \"theoretical_hours\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.theoretical_hours && errors.theoretical_hours),\n                      helperText: touched.theoretical_hours && errors.theoretical_hours,\n                      placeholder: translate(\"Theoretical Hours\"),\n                      label: translate(\"Theoretical Hours\"),\n                      fullWidth: true\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      value: values.practical_hours || \"\",\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"practical_hours\",\n                      name: \"practical_hours\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.practical_hours && errors.practical_hours),\n                      helperText: touched.practical_hours && errors.practical_hours,\n                      placeholder: translate(\"Practical Hours\"),\n                      label: translate(\"Practical Hours\"),\n                      fullWidth: true\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      value: values.mixed_hours || \"\",\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"mixed_hours\",\n                      name: \"mixed_hours\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.mixed_hours && errors.mixed_hours),\n                      helperText: touched.mixed_hours && errors.mixed_hours,\n                      placeholder: translate(\"Mixed Hours\"),\n                      label: translate(\"Mixed Hours\"),\n                      fullWidth: true\n                    })\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(Grid, {\n                container: true,\n                md: 12,\n                xs: 12,\n                style: {\n                  margin: \"1em 0em\"\n                },\n                children: [/*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      value: values.theoretical_classes || \"\",\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"theoretical_classes\",\n                      name: \"theoretical_classes\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.theoretical_classes && errors.theoretical_classes),\n                      helperText: touched.theoretical_classes && errors.theoretical_classes,\n                      placeholder: translate(\"Theoretical Classes\"),\n                      label: translate(\"Theoretical Classes\"),\n                      fullWidth: true\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"practical_classes\",\n                      name: \"practical_classes\",\n                      value: values.practical_classes || \"\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.practical_classes && errors.practical_classes),\n                      helperText: touched.practical_classes && errors.practical_classes,\n                      placeholder: translate(\"Practical Classes\"),\n                      label: translate(\"Practical Classes\"),\n                      fullWidth: true\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 3,\n                  md: 3,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"number\",\n                      id: \"mixed_classes\",\n                      name: \"mixed_classes\",\n                      value: values.mixed_classes || \"\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.mixed_classes && errors.mixed_classes),\n                      helperText: touched.mixed_classes && errors.mixed_classes,\n                      placeholder: translate(\"Mixed Classes\"),\n                      label: translate(\"Mixed Classes\"),\n                      fullWidth: true\n                    })\n                  })\n                })]\n              }), /*#__PURE__*/_jsx(Grid, {\n                container: true,\n                md: 12,\n                xs: 12,\n                style: {\n                  margin: \"1em 0em\"\n                },\n                children: /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  xs: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(GridItem, {\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      type: \"text\",\n                      id: \"notes\",\n                      name: \"notes\",\n                      value: values.notes || \"\",\n                      onBlur: handleBlur,\n                      error: Boolean(touched.notes && errors.notes),\n                      helperText: touched.notes && errors.notes,\n                      placeholder: translate(\"Notes\"),\n                      label: translate(\"Notes\"),\n                      InputProps: {\n                        rows: 4\n                      },\n                      fullWidth: true\n                    })\n                  })\n                })\n              }), /*#__PURE__*/_jsx(Box, {\n                mt: 4,\n                mb: 1,\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"space-between\"\n                },\n                children: isSubmitting ? /*#__PURE__*/_jsx(SuiButton, {\n                  type: \"button\",\n                  disabled: true,\n                  variant: \"gradient\",\n                  color: \"info\",\n                  children: translate(\"Processing ...\")\n                }) : /*#__PURE__*/_jsx(SuiButton, {\n                  style: {\n                    color: \"rgb(255, 255, 255)\",\n                    background: \"rgb(23, 193, 232)\"\n                  },\n                  disabled: !isValid && isSubmitting,\n                  type: \"submit\",\n                  children: translate(\"Save\")\n                })\n              })]\n            });\n          }\n        })\n      }), /*#__PURE__*/_jsx(Card, {\n        children: /*#__PURE__*/_jsx(AssignedTeachers, {\n          planData: data,\n          refresh: refresh\n        })\n      })]\n    })\n  });\n};\n\nAssignTeacher.layout = Admin;\nAssignTeacher.auth = false;\nexport default AssignTeacher;","map":null,"metadata":{},"sourceType":"module"}