{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport axios from \"../../../Services/ApiClient\"; //Api route function that is returned from next auth\n\nexport const authOptions = {\n  secret: process.env.NextAuth_SECRET,\n  // Configure one or more authentication providers\n  providers: [GithubProvider({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }), CredentialsProvider({\n    // The name to display on the sign in form (e.g. \"Sign in with...\")\n    name: \"Credentials\",\n    // `credentials` is used to generate a form on the sign in page.\n    // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n    // e.g. domain, username, password, 2FA token, etc.\n    // You can pass any HTML attribute to the <input> tag through the object.\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      const {\n        email,\n        password\n      } = credentials;\n      const res = await fetch(\"http://teststudent.hiast.edu.sy/backend/public/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const user = await res.json();\n      console.log(user);\n\n      if (res.ok && user) {\n        return user;\n      } else return null;\n    }\n\n  }) // ...add more providers here\n  ],\n  callbacks: {\n    async jwt({\n      token,\n      user\n    }) {\n      return _objectSpread(_objectSpread({}, token), user);\n    },\n\n    async session({\n      session,\n      token,\n      user\n    }) {\n      // Send properties to the client, like an access_token from a provider.\n      session.user = token;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/auth/signin\"\n  }\n};\nexport default NextAuth(authOptions);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].js"],"names":["NextAuth","CredentialsProvider","axios","authOptions","secret","process","env","NextAuth_SECRET","providers","GithubProvider","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","name","credentials","email","label","type","placeholder","password","authorize","req","res","fetch","method","headers","body","JSON","stringify","user","json","console","log","ok","callbacks","jwt","token","session","pages","signIn"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,KAAP,MAAkB,6BAAlB,C,CACA;;AACA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,eADK;AAEzB;AACAC,EAAAA,SAAS,EAAE,CACTC,cAAc,CAAC;AACbC,IAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,SADT;AAEbC,IAAAA,YAAY,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAFb,GAAD,CADL,EAKTZ,mBAAmB,CAAC;AAClB;AACAa,IAAAA,IAAI,EAAE,aAFY;AAGlB;AACA;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELC,QAAAA,IAAI,EAAE,MAFD;AAGLC,QAAAA,WAAW,EAAE;AAHR,OADI;AAMXC,MAAAA,QAAQ,EAAE;AACRH,QAAAA,KAAK,EAAE,UADC;AAERC,QAAAA,IAAI,EAAE,UAFE;AAGRC,QAAAA,WAAW,EAAE;AAHL;AANC,KAPK;;AAoBlB,UAAME,SAAN,CAAgBN,WAAhB,EAA6BO,GAA7B,EAAkC;AAChC,YAAM;AAAEN,QAAAA,KAAF;AAASI,QAAAA;AAAT,UAAsBL,WAA5B;AACA,YAAMQ,GAAG,GAAG,MAAMC,KAAK,CACrB,0DADqB,EAErB;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFX;AAKEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBb,UAAAA,KADmB;AAEnBI,UAAAA;AAFmB,SAAf;AALR,OAFqB,CAAvB;AAaA,YAAMU,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,UAAIP,GAAG,CAACW,EAAJ,IAAUJ,IAAd,EAAoB;AAClB,eAAOA,IAAP;AACD,OAFD,MAEO,OAAO,IAAP;AACR;;AAxCiB,GAAD,CALV,CA+CT;AA/CS,GAHc;AAoDzBK,EAAAA,SAAS,EAAE;AACT,UAAMC,GAAN,CAAU;AAAEC,MAAAA,KAAF;AAASP,MAAAA;AAAT,KAAV,EAA2B;AACzB,6CAAYO,KAAZ,GAAsBP,IAAtB;AACD,KAHQ;;AAIT,UAAMQ,OAAN,CAAc;AAAEA,MAAAA,OAAF;AAAWD,MAAAA,KAAX;AAAkBP,MAAAA;AAAlB,KAAd,EAAwC;AACtC;AACAQ,MAAAA,OAAO,CAACR,IAAR,GAAeO,KAAf;AACA,aAAOC,OAAP;AACD;;AARQ,GApDc;AA8DzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH;AA9DkB,CAApB;AAkEP,eAAexC,QAAQ,CAACG,WAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\n//Api route function that is returned from next auth\r\nexport const authOptions = {\r\n  secret: process.env.NextAuth_SECRET,\r\n  // Configure one or more authentication providers\r\n  providers: [\r\n    GithubProvider({\r\n      clientId: process.env.GITHUB_ID,\r\n      clientSecret: process.env.GITHUB_SECRET,\r\n    }),\r\n    CredentialsProvider({\r\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n      name: \"Credentials\",\r\n      // `credentials` is used to generate a form on the sign in page.\r\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\r\n      // e.g. domain, username, password, 2FA token, etc.\r\n      // You can pass any HTML attribute to the <input> tag through the object.\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n\r\n      async authorize(credentials, req) {\r\n        const { email, password } = credentials;\r\n        const res = await fetch(\r\n          \"http://teststudent.hiast.edu.sy/backend/public/api/login\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              email,\r\n              password,\r\n            }),\r\n          }\r\n        );\r\n        const user = await res.json();\r\n        console.log(user);\r\n        if (res.ok && user) {\r\n          return user;\r\n        } else return null;\r\n      },\r\n    }),\r\n    // ...add more providers here\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      return { ...token, ...user };\r\n    },\r\n    async session({ session, token, user }) {\r\n      // Send properties to the client, like an access_token from a provider.\r\n      session.user = token;\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/auth/signin\",\r\n  },\r\n};\r\nexport default NextAuth(authOptions);\r\n"]},"metadata":{},"sourceType":"module"}