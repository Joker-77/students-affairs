{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"F:\\\\StudentAffairs\\\\students\\\\students\\\\components\\\\AssignObserversToHall.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { Box, Grid, Typography, TextField, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { useRouter } from \"next/router\";\nimport colors from \"../assets/theme/base/colors\";\nimport Card from \"./Card/Card\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useTranslation } from \"../Utility/Translations/useTranslation\";\nimport { Form, Formik } from \"formik\";\nimport { useEffect } from \"react\"; //import ObserverService from \"../../Services/ObserverService\";\n\nimport ObservationService from \"../Services/ObservationService\";\nimport SuiButton from \"./SuiButton\";\nimport ActionTable from \"./MaterialTable/ActionTable\";\nimport Placeholder from \"../Utility/Placeholders\";\nimport GridItem from \"./Grid/GridItem\";\nimport _ from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport Admin from \"../layouts/Admin\";\nimport ObserverService from \"../Services/ObserverService\"; //import {Autocomplete} from \"@material-ui/Autocomplete\";\n\nimport AlertDialog from \"./Modals/AlertDialog\";\n\nconst AssignObserversToHall = ({\n  setShow,\n  hall,\n  formScheme,\n  //submitForm,\n  examDate\n}) => {\n  _s();\n\n  const initValues = {\n    //from: hall.from,\n    //to: hall.to,\n    employee: null,\n    hallChef: 1\n  };\n  const {\n    locale\n  } = useRouter();\n  const {\n    translate\n  } = useTranslation();\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"70%\",\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\"\n  };\n  const cardStyle = {\n    position: \"absolute\",\n    //top: \"50%\",\n    //left: \"50%\",\n    //transform: \"translate(-50%, -50%)\",\n    // width: 400,\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\",\n    marginTop: \"0px\",\n    marginBottom: \"0px\"\n  };\n  const styles = {\n    modal: {\n      overflowY: \"scroll\",\n      overflowX: \"hidden\",\n      height: \"95%\",\n      direction: locale === 'ar' ? \"rtl\" : \"ltr\"\n    },\n    header: {\n      height: \"7em\",\n      position: \"sticky\",\n      borderTopRightRadius: \"inherit\",\n      borderTopLeftRadius: \"inherit\",\n      backgroundColor: colors.gradients.primary.main,\n      color: \"#fff\"\n    }\n  };\n  const [employees, setEmployees] = React.useState([]);\n  const [observers, setObservers] = React.useState([]);\n  const [initialObservers, setInitialObservers] = React.useState([]);\n  const [inactiveEmployees, setInactiveEmployees] = React.useState([]);\n  const [hallChefDisabled, setHallChefDisabled] = React.useState(false);\n  const [showAlert, setShowAlert] = React.useState(false);\n\n  const loadData = () => {\n    //console.log(`${examDate}===${hall.hall.id}`);\n    ObservationService.GetAll(examDate, '', hall.hall.id).then(res => {\n      let result = res.result; //console.log(result);\n\n      result.forEach(obs => {\n        if (obs.is_master) setHallChefDisabled(true);\n      });\n      let observers = [];\n      Promise.all(result.map(obs => {\n        return ObserverService.Get(obs.employee_id.toString()).then(res => {\n          let ovr = res.result;\n          return _objectSpread(_objectSpread({}, ovr), {}, {\n            hall_chef: obs.is_master,\n            obs_id: obs.id\n          });\n        }).catch(error => {\n          console.error(\"error\", error);\n        });\n      })).then(result => {\n        //console.log(result);\n        setObservers(result);\n        setInitialObservers(result);\n        setInactiveEmployees(result);\n      });\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n    ObservationService.GetAvailableObservers(examDate, hall.timePeriod.slice(11, 16), hall.timePeriod.slice(33, 38)).then(res => {\n      console.log(\"Observers\", res.result);\n      let result = res.result; //setEmployees(result.filter(emp => !emp.excluded));\n\n      setEmployees(result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n  const title = `${translate(\"Exam\")} ${hall === null || hall === void 0 ? void 0 : hall.examsDetails} ${translate(\"from\")} ${hall === null || hall === void 0 ? void 0 : hall.from} ${translate(\"to\")} ${hall === null || hall === void 0 ? void 0 : hall.to} ${translate(\"in\")} ${hall === null || hall === void 0 ? void 0 : hall.hallName} ${translate(\"on\")} ${examDate}`; //const [employee, setEmployee] = React.useState(null);\n\n  let columns = [{\n    title: translate(\"Id\"),\n    field: \"id\",\n    hidden: true\n  }, {\n    title: translate(\"Observer\"),\n    field: \"printing_name\"\n  }, {\n    title: translate(\"Hall chef\"),\n    field: \"is_hall_chef\"\n  }];\n\n  const handleAddObserver = (values, {\n    setSubmitting\n  }) => {\n    console.log(employees);\n    console.log(values.employee);\n    let emp = employees.find(emp => emp.id == values.employee);\n    setObservers([...observers, _objectSpread(_objectSpread({}, emp), {}, {\n      hall_chef: hallChefDisabled ? 0 : values.hallChef\n    })]);\n    setInactiveEmployees([...inactiveEmployees, _objectSpread({}, emp)]);\n    setEmployees(employees.filter(emp => emp.id != values.employee));\n    if (values.hallChef == 1) setHallChefDisabled(true);\n  };\n\n  const handleDeleteObserver = data => {\n    let emp = observers.find(emp => emp.id == data.id);\n    setObservers(observers.filter(emp => emp.id != data.id));\n    setInactiveEmployees(inactiveEmployees.filter(e => e.id != emp.id));\n    setEmployees([...employees, _objectSpread({}, emp)]);\n    if (emp.hall_chef) setHallChefDisabled(false);\n  };\n\n  const noHallChefAlert = () => {\n    return /*#__PURE__*/_jsxDEV(AlertDialog, {\n      open: showAlert,\n      handleClose: () => {\n        setShowAlert(false);\n      },\n      text: translate(\"There's no chef in this hall. Do you want to continue?\"),\n      handleOK: () => {\n        saveObservers();\n        setShowAlert(false);\n      },\n      ok: translate(\"Yes\"),\n      discard: translate(\"No\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  };\n\n  const saveObservers = () => {\n    if (!_.isEqual(observers, initialObservers)) {\n      let success = true;\n\n      if (initialObservers.length === 0) {\n        observers.forEach((observer, index, arr) => {\n          let payload = {\n            exam_halls_ids: hall.exam_halls_ids,\n            date: examDate,\n            from: hall.from,\n            to: hall.to,\n            hall_id: hall.hall.id,\n            employee_id: observer.id,\n            is_master: observer.hall_chef\n          };\n          ObservationService.Add(payload).then(response => {\n            if (response.success) {\n              if (index === observers.length - 1) {\n                if (success) toast.success(translate(\"Observations Updated Successfully\"));\n              }\n            } else {\n              console.log(response.error);\n              toast.error(response.error.message);\n              success = false;\n            }\n          }).catch(error => {\n            console.error(\"error\", error);\n            success = false;\n          }).finally(() => {\n            setShow();\n          });\n        });\n      }\n\n      initialObservers.forEach((observer, index, arr) => {\n        let payload = {\n          id: observer.obs_id\n        };\n        ObservationService.Delete(payload).then(response => {\n          if (response.success) {\n            if (index === initialObservers.length - 1) {\n              if (success && observers.length === 0) toast.success(translate(\"Observations Updated Successfully\"));\n              observers.forEach((observer, index, arr) => {\n                let payload = {\n                  exam_halls_ids: hall.exam_halls_ids,\n                  date: examDate,\n                  from: hall.from,\n                  to: hall.to,\n                  hall_id: hall.hall.id,\n                  employee_id: observer.id,\n                  is_master: observer.hall_chef\n                };\n                ObservationService.Add(payload).then(response => {\n                  if (response.success) {\n                    if (index === observers.length - 1) {\n                      if (success) toast.success(translate(\"Observations Updated Successfully\"));\n                    }\n                  } else {\n                    console.log(response.error);\n                    toast.error(response.error.message);\n                    success = false;\n                  }\n                }).catch(error => {\n                  console.error(\"error\", error);\n                  success = false;\n                });\n              });\n            }\n          } else {\n            console.log(response.error);\n            toast.error(response.error.message);\n            success = false;\n          }\n        }).catch(error => {\n          console.error(\"error\", error);\n          success = false;\n        }).finally(() => {\n          setShow();\n        });\n      });\n      /*observers.forEach((observer, index, arr) => {\r\n        let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                       date: examDate,\r\n                       from: hall.from,\r\n                       to: hall.to,\r\n                       hall_id: hall.hall.id,\r\n                       employee_id: observer.id,\r\n                       is_master: observer.hall_chef\r\n        };\r\n        ObservationService.Add(payload)\r\n          .then((response) => {\r\n            if (response.success) {\r\n              // Do Nothing\r\n            } else {\r\n              console.log(response.error);\r\n              toast.error(response.error.message);\r\n              success = false;\r\n            }\r\n          }).catch((error) => {\r\n            console.error(\"error\", error);\r\n            success = false;\r\n          });\r\n      });*/\n    } else setShow();\n  };\n\n  const handleSave = () => {\n    if (hallChefDisabled) {\n      saveObservers();\n    } else {\n      setShowAlert(true);\n    }\n  };\n\n  const renderObservers = () => {\n    if (observers && observers.length > 0) {\n      let data = observers;\n      let options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: false,\n        //pageSize: 10,\n        maxBodyHeight: \"300px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      let actions = [{\n        icon: () => /*#__PURE__*/_jsxDEV(SuiButton, {\n          style: {\n            minWidth: 80,\n            color: \"#dc3545\",\n            backgroundColor: \"transparent\",\n            border: \"1px solid #dc3545\"\n          },\n          children: translate(\"Delete\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this),\n        onClick: (evt, data) => handleDeleteObserver(data)\n      }];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ActionTable, {\n          Title: \"\",\n          Columns: columns,\n          Data: data.map(item => {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              is_hall_chef: item.hall_chef ? translate(\"Yes\") : translate(\"No\")\n            });\n          }),\n          Options: options,\n          Actions: actions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(Placeholder, {\n      loading: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      md: 12,\n      sm: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            padding: \"1em 4em\",\n            margin: \"5px 0px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(GridItem, {\n              item: true,\n              md: 9,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                component: \"div\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n              md: 3,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsxDEV(SuiButton, {\n                onClick: setShow,\n                color: \"warning\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBack, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 17\n                }, this), translate(\"Cancel\")]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            padding: \"3em 3em\",\n            margin: \"5px 0px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: initValues,\n            validationSchema: formScheme,\n            onSubmit: handleAddObserver,\n            children: formik => {\n              const {\n                values,\n                handleChange,\n                handleSubmit,\n                errors,\n                touched,\n                handleBlur,\n                isSubmitting,\n                isValid,\n                dirty\n              } = formik;\n              return /*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      disabled: false,\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"select\",\n                      id: \"employee\",\n                      name: \"employee\",\n                      select: true,\n                      value: values.employee,\n                      onBlur: handleBlur,\n                      error: Boolean(touched.employee && errors.employee),\n                      helperText: touched.employee && errors.employee,\n                      placeholder: translate(\"Observer\"),\n                      label: translate(\"Observer\"),\n                      fullWidth: true,\n                      children: employees === null || employees === void 0 ? void 0 : employees.map(emp => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: emp.id,\n                        children: emp.printing_name\n                      }, emp.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 443,\n                        columnNumber: 33\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                      label: translate(\"Hall chef\"),\n                      onChange: handleChange,\n                      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                        disabled: hallChefDisabled,\n                        onChange: handleChange,\n                        id: \"hallChef\",\n                        name: \"hallChef\" //checked={values.hallChef == 1} \n                        ,\n                        onBlur: handleBlur,\n                        placeholder: translate(\"Hall chef\"),\n                        defaultChecked: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 453,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 450,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsxDEV(SuiButton, {\n                      type: \"submit\",\n                      variant: \"gradient\",\n                      color: \"primary\",\n                      children: translate(\"Add observer\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 466,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 17\n          }, this), renderObservers(), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            mb: 1,\n            children: /*#__PURE__*/_jsxDEV(SuiButton, {\n              onClick: handleSave,\n              variant: \"gradient\",\n              color: \"primary\",\n              children: translate(\"Save\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }, this), noHallChefAlert()]\n  }, void 0, true);\n};\n\n_s(AssignObserversToHall, \"e7TwjbFxRRSTQ2Djv7d6WNO6/zA=\", false, function () {\n  return [useRouter, useTranslation];\n});\n\n_c = AssignObserversToHall;\nAssignObserversToHall.layout = Admin;\nAssignObserversToHall.auth = false;\nexport default AssignObserversToHall;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignObserversToHall\");","map":{"version":3,"sources":["F:/StudentAffairs/students/students/components/AssignObserversToHall.tsx"],"names":["React","Box","Grid","Typography","TextField","MenuItem","FormControlLabel","Checkbox","useRouter","colors","Card","ArrowBack","useTranslation","Form","Formik","useEffect","ObservationService","SuiButton","ActionTable","Placeholder","GridItem","_","toast","Admin","ObserverService","AlertDialog","AssignObserversToHall","setShow","hall","formScheme","examDate","initValues","employee","hallChef","locale","translate","style","position","top","left","transform","width","bgcolor","boxShadow","borderRadius","cardStyle","marginTop","marginBottom","styles","modal","overflowY","overflowX","height","direction","header","borderTopRightRadius","borderTopLeftRadius","backgroundColor","gradients","primary","main","color","employees","setEmployees","useState","observers","setObservers","initialObservers","setInitialObservers","inactiveEmployees","setInactiveEmployees","hallChefDisabled","setHallChefDisabled","showAlert","setShowAlert","loadData","GetAll","id","then","res","result","forEach","obs","is_master","Promise","all","map","Get","employee_id","toString","ovr","hall_chef","obs_id","catch","error","console","GetAvailableObservers","timePeriod","slice","log","title","examsDetails","from","to","hallName","columns","field","hidden","handleAddObserver","values","setSubmitting","emp","find","filter","handleDeleteObserver","data","e","noHallChefAlert","saveObservers","isEqual","success","length","observer","index","arr","payload","exam_halls_ids","date","hall_id","Add","response","message","finally","Delete","handleSave","renderObservers","options","actionsColumnIndex","headerStyle","fontWeight","filtering","paging","maxBodyHeight","search","tableLayout","actions","icon","minWidth","border","onClick","evt","item","is_hall_chef","padding","margin","formik","handleChange","handleSubmit","errors","touched","handleBlur","isSubmitting","isValid","dirty","Boolean","printing_name","layout","auth"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  Box, Grid, IconButton, Typography, TextField, MenuItem, FormControlLabel, Checkbox, Button,\r\n} from \"@material-ui/core\";\r\nimport {useRouter} from \"next/router\";\r\nimport colors from \"../assets/theme/base/colors\";\r\nimport Card from \"./Card/Card\";\r\nimport CardHeader from \"./Card/CardHeader\";\r\nimport {ArrowBack, Close} from \"@material-ui/icons\";\r\nimport CardBody from \"./Card/CardBody\";\r\nimport {useTranslation} from \"../Utility/Translations/useTranslation\";\r\nimport { Form, Formik, setIn } from \"formik\";\r\nimport { useEffect } from \"react\";\r\n//import ObserverService from \"../../Services/ObserverService\";\r\nimport { IObserverModel } from \"../Models/Observers/ObserverModel\";\r\nimport ObservationService from \"../Services/ObservationService\";\r\nimport SuiButton from \"./SuiButton\";\r\nimport ActionTable from \"./MaterialTable/ActionTable\";\r\nimport Placeholder from \"../Utility/Placeholders\";\r\nimport GridItem from \"./Grid/GridItem\";\r\nimport _ from \"lodash\";\r\nimport { toast } from \"react-toastify\";\r\nimport Admin from \"../layouts/Admin\";\r\nimport { IObservationModel } from \"../Models/ObservationModel\";\r\nimport ObserverService from \"../Services/ObserverService\";\r\n//import {Autocomplete} from \"@material-ui/Autocomplete\";\r\nimport AlertDialog from \"./Modals/AlertDialog\";\r\n\r\ninterface IAssignObserversToHallProps {\r\n  setShow(): void;\r\n  hall: any;\r\n  formScheme: any;\r\n  //submitForm(values, submitting): void;\r\n  examDate: string;\r\n}\r\nconst AssignObserversToHall: React.FC<IAssignObserversToHallProps> = ({\r\n  setShow,\r\n  hall,\r\n  formScheme,\r\n  //submitForm,\r\n  examDate\r\n}) => {\r\n  const initValues = {\r\n    //from: hall.from,\r\n    //to: hall.to,\r\n    employee: null,\r\n    hallChef: 1,\r\n  };\r\n\r\n  const {locale} = useRouter();\r\n  const {translate} = useTranslation();\r\n\r\n  const style = {\r\n    position: \"absolute\" as \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"70%\",\r\n    bgcolor: \"background.paper\",\r\n    // border: \"2px solid brown\",\r\n    boxShadow: 24,\r\n    borderRadius: \"20px\",\r\n  };\r\n  const cardStyle = {\r\n    position: \"absolute\" as \"absolute\",\r\n    //top: \"50%\",\r\n    //left: \"50%\",\r\n    //transform: \"translate(-50%, -50%)\",\r\n    // width: 400,\r\n    bgcolor: \"background.paper\",\r\n    // border: \"2px solid brown\",\r\n    boxShadow: 24,\r\n    borderRadius: \"20px\",\r\n    marginTop: \"0px\",\r\n    marginBottom: \"0px\",\r\n  };\r\n  const styles = {\r\n    modal: {\r\n      overflowY: \"scroll\",\r\n      overflowX: \"hidden\",\r\n      height: \"95%\",\r\n      direction: locale === 'ar' ? \"rtl\" : \"ltr\",\r\n    },\r\n    header: {\r\n      height: \"7em\",\r\n      position: \"sticky\",\r\n      borderTopRightRadius: \"inherit\",\r\n      borderTopLeftRadius: \"inherit\",\r\n      backgroundColor: colors.gradients.primary.main,\r\n      color: \"#fff\",\r\n    },\r\n  };\r\n\r\n  const [employees, setEmployees] = React.useState([]);\r\n  const [observers, setObservers] = React.useState([]);\r\n  const [initialObservers, setInitialObservers] = React.useState([]);\r\n  const [inactiveEmployees, setInactiveEmployees] = React.useState([]);\r\n  const [hallChefDisabled, setHallChefDisabled] = React.useState(false);\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n\r\n  const loadData = () => {\r\n    //console.log(`${examDate}===${hall.hall.id}`);\r\n    ObservationService.GetAll(examDate, '', hall.hall.id)\r\n      .then((res) => {\r\n        let result = res.result as IObservationModel[];\r\n        //console.log(result);\r\n        result.forEach(obs => {\r\n          if (obs.is_master)\r\n            setHallChefDisabled(true);\r\n        });\r\n        let observers = [];\r\n        Promise.all(result.map(obs => {\r\n          return ObserverService.Get(obs.employee_id.toString())\r\n            .then((res) => {\r\n              let ovr = res.result as IObserverModel;\r\n              return {...ovr, hall_chef: obs.is_master, obs_id: obs.id};\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"error\", error);\r\n            });\r\n        }))\r\n        .then((result) => {\r\n          //console.log(result);\r\n          setObservers(result);\r\n          setInitialObservers(result);\r\n          setInactiveEmployees(result);\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"error\", error);\r\n      });\r\n\r\n    ObservationService.GetAvailableObservers(examDate, hall.timePeriod.slice(11, 16), hall.timePeriod.slice(33, 38))\r\n      .then((res) => {\r\n        console.log(\"Observers\", res.result);\r\n        let result = res.result as IObserverModel[];\r\n        //setEmployees(result.filter(emp => !emp.excluded));\r\n        setEmployees(result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"error\", error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const title = `${translate(\"Exam\")} ${hall?.examsDetails} ${translate(\"from\")} ${hall?.from} ${translate(\"to\")} ${hall?.to} ${translate(\"in\")} ${hall?.hallName} ${translate(\"on\")} ${examDate}`;\r\n  //const [employee, setEmployee] = React.useState(null);\r\n\r\n  let columns = [\r\n    {\r\n        title: translate(\"Id\"),\r\n        field: \"id\",\r\n        hidden: true,\r\n    },\r\n    {\r\n        title: translate(\"Observer\"),\r\n        field: \"printing_name\",\r\n    },\r\n    {\r\n        title: translate(\"Hall chef\"),\r\n        field: \"is_hall_chef\",\r\n    },\r\n  ];\r\n\r\n  const handleAddObserver = (values, { setSubmitting }) => {\r\n    console.log(employees);\r\n    console.log(values.employee);\r\n    let emp = employees.find(emp => emp.id == values.employee);\r\n    setObservers([...observers, {...emp,\r\n      hall_chef: hallChefDisabled ? 0 : values.hallChef\r\n    }]);\r\n    setInactiveEmployees([...inactiveEmployees, {...emp}]);\r\n    setEmployees(employees.filter(emp => emp.id != values.employee));\r\n    if (values.hallChef == 1)\r\n      setHallChefDisabled(true);\r\n  }\r\n\r\n  const handleDeleteObserver = (data) => {\r\n    let emp = observers.find(emp => emp.id == data.id);\r\n    setObservers(observers.filter(emp => emp.id != data.id));\r\n    setInactiveEmployees(inactiveEmployees.filter(e => e.id != emp.id));\r\n    setEmployees([...employees, {...emp}]);\r\n    if (emp.hall_chef)\r\n      setHallChefDisabled(false);\r\n  }\r\n\r\n  const noHallChefAlert = () => {\r\n    return (\r\n      <AlertDialog\r\n        open={showAlert}\r\n        handleClose={() => {setShowAlert(false);}}\r\n        text={translate(\"There's no chef in this hall. Do you want to continue?\")}\r\n        handleOK={() => {saveObservers(); setShowAlert(false);}}\r\n        ok={translate(\"Yes\")}\r\n        discard={translate(\"No\")}\r\n      />\r\n    );\r\n  };\r\n\r\n  const saveObservers = () => {\r\n    if (!_.isEqual(observers, initialObservers)) {\r\n      let success = true;\r\n      if (initialObservers.length === 0) {\r\n        observers.forEach((observer, index, arr) => {\r\n          let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                         date: examDate,\r\n                         from: hall.from,\r\n                         to: hall.to,\r\n                         hall_id: hall.hall.id,\r\n                         employee_id: observer.id,\r\n                         is_master: observer.hall_chef\r\n          };\r\n          ObservationService.Add(payload)\r\n            .then((response) => {\r\n              if (response.success) {\r\n                if (index === observers.length - 1) {\r\n                  if (success)\r\n                    toast.success(translate(\"Observations Updated Successfully\"));\r\n                }\r\n              } else {\r\n                console.log(response.error);\r\n                toast.error(response.error.message);\r\n                success = false;\r\n              }\r\n            }).catch((error) => {\r\n              console.error(\"error\", error);\r\n              success = false;\r\n            }).finally(() => {setShow();})\r\n        });\r\n      }\r\n      initialObservers.forEach((observer, index, arr) => {\r\n        let payload = {id: observer.obs_id};\r\n        ObservationService.Delete(payload)\r\n          .then((response) => {\r\n            if (response.success) {\r\n              if (index === initialObservers.length - 1) {\r\n                if (success && observers.length === 0)\r\n                  toast.success(translate(\"Observations Updated Successfully\"));\r\n                observers.forEach((observer, index, arr) => {\r\n                  let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                                 date: examDate,\r\n                                 from: hall.from,\r\n                                 to: hall.to,\r\n                                 hall_id: hall.hall.id,\r\n                                 employee_id: observer.id,\r\n                                 is_master: observer.hall_chef\r\n                  };\r\n                  ObservationService.Add(payload)\r\n                    .then((response) => {\r\n                      if (response.success) {\r\n                        if (index === observers.length - 1) {\r\n                          if (success)\r\n                            toast.success(translate(\"Observations Updated Successfully\"));\r\n                        }\r\n                      } else {\r\n                        console.log(response.error);\r\n                        toast.error(response.error.message);\r\n                        success = false;\r\n                      }\r\n                    }).catch((error) => {\r\n                      console.error(\"error\", error);\r\n                      success = false;\r\n                    });\r\n                });\r\n              }\r\n            } else {\r\n              console.log(response.error);\r\n              toast.error(response.error.message);\r\n              success = false;\r\n            }\r\n          }).catch((error) => {\r\n            console.error(\"error\", error);\r\n            success = false;\r\n          }).finally(() => {setShow();})\r\n      });\r\n      /*observers.forEach((observer, index, arr) => {\r\n        let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                       date: examDate,\r\n                       from: hall.from,\r\n                       to: hall.to,\r\n                       hall_id: hall.hall.id,\r\n                       employee_id: observer.id,\r\n                       is_master: observer.hall_chef\r\n        };\r\n        ObservationService.Add(payload)\r\n          .then((response) => {\r\n            if (response.success) {\r\n              // Do Nothing\r\n            } else {\r\n              console.log(response.error);\r\n              toast.error(response.error.message);\r\n              success = false;\r\n            }\r\n          }).catch((error) => {\r\n            console.error(\"error\", error);\r\n            success = false;\r\n          });\r\n      });*/\r\n    }\r\n    else\r\n      setShow();\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (hallChefDisabled) {\r\n      saveObservers();\r\n    }\r\n    else {\r\n      setShowAlert(true);\r\n    }\r\n  }\r\n\r\n  const renderObservers = () => {\r\n    if (observers && observers.length > 0) {\r\n      let data = observers;\r\n      let options = {\r\n        // exportAllData: true,\r\n        // exportButton: true,\r\n        actionsColumnIndex: -1,\r\n        headerStyle: {\r\n          backgroundColor: \"#01579b\",\r\n          color: \"#FFF\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        filtering: false,\r\n        paging: false,\r\n        //pageSize: 10,\r\n        maxBodyHeight: \"300px\",\r\n        search: false,\r\n        tableLayout: \"auto\",\r\n      };\r\n      let actions = [\r\n        {\r\n          icon: () => (\r\n            <SuiButton\r\n              style={{\r\n                minWidth: 80,\r\n                color: \"#dc3545\",\r\n                backgroundColor: \"transparent\",\r\n                border: \"1px solid #dc3545\",\r\n              }}\r\n            >\r\n                {translate(\"Delete\")}\r\n            </SuiButton>\r\n          ),\r\n          onClick: (evt, data) => handleDeleteObserver(data),\r\n        },\r\n      ];\r\n      return (\r\n        <div>\r\n          <ActionTable\r\n            Title=\"\"\r\n            Columns={columns}\r\n            Data={data.map(item => { return {...item,\r\n              is_hall_chef: item.hall_chef ? translate(\"Yes\") : translate(\"No\"),\r\n              }})}\r\n            Options={options}\r\n            Actions={actions}\r\n          />\r\n        </div>\r\n      );\r\n    } else return <Placeholder loading={false} />;\r\n  };\r\n  \r\n\r\n  return (\r\n    <>\r\n    <Grid container md={12} sm={12}>\r\n      <Grid md={12} sm={12} xs={12}>\r\n        <Card style={{ padding: \"1em 4em\", margin: \"5px 0px\" }}>\r\n          <Grid container>\r\n            <GridItem item md={9} xs={12} sm={12}>\r\n              <Typography variant=\"h5\" component=\"div\">\r\n                {title}\r\n              </Typography>\r\n            </GridItem>\r\n            <GridItem md={3} xs={12} sm={12}>\r\n              <SuiButton onClick={setShow} color={\"warning\"}>\r\n                <ArrowBack />\r\n                {translate(\"Cancel\")}\r\n              </SuiButton>\r\n            </GridItem>\r\n          </Grid>\r\n        </Card>\r\n        <Card style={{ padding: \"3em 3em\", margin: \"5px 0px\" }}>\r\n                <Formik\r\n                    initialValues={initValues}\r\n                    validationSchema={formScheme}\r\n                    onSubmit={handleAddObserver}\r\n                >\r\n                {(formik) => {\r\n                    const {\r\n                        values,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        errors,\r\n                        touched,\r\n                        handleBlur,\r\n                        isSubmitting,\r\n                        isValid,\r\n                        dirty,\r\n                    } = formik;\r\n                return (\r\n                <Form>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={3}>\r\n                            {/*}\r\n                            <Autocomplete\r\n                              disablePortal\r\n                              id=\"select-observer\"\r\n                              options={employees.map(emp => {\r\n                                return {label: `${emp.firstName} ${emp.lastName}`, id: emp.id};\r\n                              })}\r\n                              sx={{ width: 300 }}\r\n                              renderInput={(params) => <TextField {...params} label={translate(\"Observer\")} />}\r\n                            />\r\n                            {*/}\r\n                            <TextField\r\n                              disabled={false}\r\n                              onChange={handleChange}\r\n                              variant=\"outlined\"\r\n                              size=\"small\"\r\n                              type=\"select\"\r\n                              id=\"employee\"\r\n                              name=\"employee\"\r\n                              select={true}\r\n                              value={values.employee}\r\n                              onBlur={handleBlur}\r\n                              error={Boolean(\r\n                                touched.employee && errors.employee\r\n                              )}\r\n                              helperText={\r\n                                touched.employee && errors.employee\r\n                              }\r\n                              placeholder={translate(\"Observer\")}\r\n                              label={translate(\"Observer\")}\r\n                              fullWidth\r\n                            >\r\n                              {employees?.map((emp) => (\r\n                                <MenuItem key={emp.id} value={emp.id}>\r\n                                  {emp.printing_name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                      <FormControlLabel label={translate(\"Hall chef\")}\r\n                        onChange={handleChange}\r\n                        control={\r\n                          <Checkbox\r\n                            disabled={hallChefDisabled}\r\n                            onChange={handleChange}\r\n                            id=\"hallChef\"\r\n                            name=\"hallChef\"\r\n                            //checked={values.hallChef == 1} \r\n                            onBlur={handleBlur}\r\n                            placeholder={translate(\"Hall chef\")}\r\n                            defaultChecked\r\n                          />\r\n                        } />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                      <SuiButton\r\n                        type=\"submit\"\r\n                        variant=\"gradient\"\r\n                        color=\"primary\"\r\n                      >\r\n                        {translate(\"Add observer\")}\r\n                      </SuiButton>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Form>\r\n                    )}}\r\n            </Formik>\r\n            {renderObservers()}\r\n            <Box mt={4} mb={1}>\r\n              <SuiButton\r\n                onClick={handleSave}\r\n                variant=\"gradient\"\r\n                color=\"primary\">\r\n                {translate(\"Save\")}\r\n              </SuiButton>\r\n            </Box>\r\n          </Card>\r\n      </Grid>\r\n    </Grid>\r\n    {noHallChefAlert()}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n(AssignObserversToHall as any).layout = Admin;\r\n(AssignObserversToHall as any).auth = false;\r\n\r\nexport default AssignObserversToHall;"]},"metadata":{},"sourceType":"module"}