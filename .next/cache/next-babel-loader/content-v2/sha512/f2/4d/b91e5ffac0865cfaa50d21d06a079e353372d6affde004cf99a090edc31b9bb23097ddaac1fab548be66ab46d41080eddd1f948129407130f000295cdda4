{"ast":null,"code":"import apiConnector from \"./TokenizedApiClient\";\nexport default class TeacherService {\n  static async GetAll() {\n    const listUrl = process.env.LIST_TEACHER_URL;\n    return await apiConnector.get(listUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n  /*static async AddAfterSearch(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.SEARCH_ADD_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\n\n\n  static async Add(payload) {\n    const addUrl = process.env.ADD_TEACHER_URL;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      var _response$data;\n\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) {\n        let result = response === null || response === void 0 ? void 0 : response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n  /*static async Search(payload): Promise<ApiResponse> {\r\n    const searchUrl = process.env.SEARCH_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .get(searchUrl, {\r\n        params: payload,\r\n      })\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\n\n\n  static async Edit(payload) {\n    const editUrl = process.env.EDIT_TEACHER_URL;\n    return await apiConnector.post(editUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async Get(id) {\n    const detailUrl = process.env.LIST_TEACHER_URL + `/${id}`;\n    return await apiConnector.get(detailUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n  /* Teacher Assignments */\n\n\n  static async GetTeachersAssignments(plan_id, edu_year_id) {\n    const detailUrl = process.env.LIST_TEACHER_ASSIGNMENT + `?plan_id=${plan_id}&edu_year_id=${edu_year_id}`;\n    return await apiConnector.get(detailUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async AddTeachersAssignments(payload) {\n    const addUrl = process.env.ADD_TEACHER_ASSIGNMENT;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async DeleteTeachersAssignments(_id) {\n    const delUrl = process.env.ADD_TEACHER_ASSIGNMENT;\n    let data = new FormData();\n    return await apiConnector.post(delUrl, {\n      id: _id\n    }).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n}","map":{"version":3,"sources":["F:/StudentAffairs/students/students/Services/TeacherService.ts"],"names":["apiConnector","TeacherService","GetAll","listUrl","process","env","LIST_TEACHER_URL","get","then","response","data","success","result","catch","error","Add","payload","addUrl","ADD_TEACHER_URL","post","Edit","editUrl","EDIT_TEACHER_URL","Get","id","detailUrl","console","log","GetTeachersAssignments","plan_id","edu_year_id","LIST_TEACHER_ASSIGNMENT","AddTeachersAssignments","ADD_TEACHER_ASSIGNMENT","DeleteTeachersAssignments","_id","delUrl","FormData"],"mappings":"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","sourcesContent":["import apiConnector from \"./TokenizedApiClient\";\r\nimport { ApiResponse } from \"../Models/ApiResponse/ApiResponse\";\r\n\r\nexport default class TeacherService {\r\n  static async GetAll(): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_TEACHER_URL as string;\r\n\r\n    return await apiConnector\r\n      .get(listUrl)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /*static async AddAfterSearch(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.SEARCH_ADD_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\r\n\r\n  static async Add(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.ADD_TEACHER_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /*static async Search(payload): Promise<ApiResponse> {\r\n    const searchUrl = process.env.SEARCH_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .get(searchUrl, {\r\n        params: payload,\r\n      })\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\r\n\r\n  static async Edit(payload): Promise<ApiResponse> {\r\n    const editUrl = process.env.EDIT_TEACHER_URL as string;\r\n    return await apiConnector\r\n      .post(editUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async Get(id: string): Promise<ApiResponse> {\r\n    const detailUrl = (process.env.LIST_TEACHER_URL as string) + `/${id}`;\r\n    return await apiConnector\r\n      .get(detailUrl)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /* Teacher Assignments */\r\n  static async GetTeachersAssignments(\r\n    plan_id: number,\r\n    edu_year_id: number\r\n  ): Promise<ApiResponse> {\r\n    const detailUrl =\r\n      (process.env.LIST_TEACHER_ASSIGNMENT as string) +\r\n      `?plan_id=${plan_id}&edu_year_id=${edu_year_id}`;\r\n    return await apiConnector\r\n      .get(detailUrl)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async AddTeachersAssignments(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.ADD_TEACHER_ASSIGNMENT as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async DeleteTeachersAssignments(_id: number): Promise<ApiResponse> {\r\n    const delUrl = process.env.ADD_TEACHER_ASSIGNMENT as string;\r\n    let data = new FormData()\r\n    return await apiConnector\r\n      .post(delUrl, {\r\n        id: _id,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}