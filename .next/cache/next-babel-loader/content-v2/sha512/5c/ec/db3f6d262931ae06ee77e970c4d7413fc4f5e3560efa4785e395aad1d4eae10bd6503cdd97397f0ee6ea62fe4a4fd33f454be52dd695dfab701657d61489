{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { Box, Grid, Typography, TextField, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { useRouter } from \"next/router\";\nimport colors from \"../assets/theme/base/colors\";\nimport Card from \"./Card/Card\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useTranslation } from \"../Utility/Translations/useTranslation\";\nimport { Form, Formik } from \"formik\";\nimport { useEffect } from \"react\"; //import ObserverService from \"../../Services/ObserverService\";\n\nimport ObservationService from \"../Services/ObservationService\";\nimport SuiButton from \"./SuiButton\";\nimport ActionTable from \"./MaterialTable/ActionTable\";\nimport Placeholder from \"../Utility/Placeholders\";\nimport GridItem from \"./Grid/GridItem\";\nimport _ from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport Admin from \"../layouts/Admin\";\nimport ObserverService from \"../Services/ObserverService\"; //import {Autocomplete} from \"@material-ui/Autocomplete\";\n\nimport AlertDialog from \"./Modals/AlertDialog\";\n\nvar AssignObserversToHall = function AssignObserversToHall(_ref) {\n  var setShow = _ref.setShow,\n      hall = _ref.hall,\n      formScheme = _ref.formScheme,\n      examDate = _ref.examDate;\n  var initValues = {\n    //from: hall.from,\n    //to: hall.to,\n    employee: null,\n    hallChef: 1\n  };\n\n  var _useRouter = useRouter(),\n      locale = _useRouter.locale;\n\n  var _useTranslation = useTranslation(),\n      translate = _useTranslation.translate;\n\n  var style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"70%\",\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\"\n  };\n  var cardStyle = {\n    position: \"absolute\",\n    //top: \"50%\",\n    //left: \"50%\",\n    //transform: \"translate(-50%, -50%)\",\n    // width: 400,\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\",\n    marginTop: \"0px\",\n    marginBottom: \"0px\"\n  };\n  var styles = {\n    modal: {\n      overflowY: \"scroll\",\n      overflowX: \"hidden\",\n      height: \"95%\",\n      direction: locale === 'ar' ? \"rtl\" : \"ltr\"\n    },\n    header: {\n      height: \"7em\",\n      position: \"sticky\",\n      borderTopRightRadius: \"inherit\",\n      borderTopLeftRadius: \"inherit\",\n      backgroundColor: colors.gradients.primary.main,\n      color: \"#fff\"\n    }\n  };\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      employees = _React$useState2[0],\n      setEmployees = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      observers = _React$useState4[0],\n      setObservers = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      initialObservers = _React$useState6[0],\n      setInitialObservers = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      inactiveEmployees = _React$useState8[0],\n      setInactiveEmployees = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      hallChefDisabled = _React$useState10[0],\n      setHallChefDisabled = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      showAlert = _React$useState12[0],\n      setShowAlert = _React$useState12[1];\n\n  var loadData = function loadData() {\n    //console.log(`${examDate}===${hall.hall.id}`);\n    ObservationService.GetAll(examDate, '', hall.hall.id).then(function (res) {\n      var result = res.result; //console.log(result);\n\n      result.forEach(function (obs) {\n        if (obs.is_master) setHallChefDisabled(true);\n      });\n      var observers = [];\n      Promise.all(result.map(function (obs) {\n        return ObserverService.Get(obs.employee_id.toString()).then(function (res) {\n          var ovr = res.result;\n          return _objectSpread(_objectSpread({}, ovr), {}, {\n            hall_chef: obs.is_master,\n            obs_id: obs.id\n          });\n        }).catch(function (error) {\n          console.error(\"error\", error);\n        });\n      })).then(function (result) {\n        //console.log(result);\n        setObservers(result);\n        setInitialObservers(result);\n        setInactiveEmployees(result);\n      });\n    }).catch(function (error) {\n      console.error(\"error\", error);\n    });\n    ObservationService.GetAvailableObservers(examDate, hall.timePeriod.slice(11, 16), hall.timePeriod.slice(33, 38)).then(function (res) {\n      console.log(\"Observers\", res.result);\n      var result = res.result; //setEmployees(result.filter(emp => !emp.excluded));\n\n      setEmployees(result);\n    }).catch(function (error) {\n      console.error(\"error\", error);\n    });\n  };\n\n  useEffect(function () {\n    loadData();\n  }, []);\n  var title = \"\".concat(translate(\"Exam\"), \" \").concat(hall === null || hall === void 0 ? void 0 : hall.examsDetails, \" \").concat(translate(\"from\"), \" \").concat(hall === null || hall === void 0 ? void 0 : hall.from, \" \").concat(translate(\"to\"), \" \").concat(hall === null || hall === void 0 ? void 0 : hall.to, \" \").concat(translate(\"in\"), \" \").concat(hall === null || hall === void 0 ? void 0 : hall.hallName, \" \").concat(translate(\"on\"), \" \").concat(examDate); //const [employee, setEmployee] = React.useState(null);\n\n  var columns = [{\n    title: translate(\"Id\"),\n    field: \"id\",\n    hidden: true\n  }, {\n    title: translate(\"Observer\"),\n    field: \"printing_name\"\n  }, {\n    title: translate(\"Hall chef\"),\n    field: \"is_hall_chef\"\n  }];\n\n  var handleAddObserver = function handleAddObserver(values, _ref2) {\n    var setSubmitting = _ref2.setSubmitting;\n    console.log(employees);\n    console.log(values.employee);\n    var emp = employees.find(function (emp) {\n      return emp.id == values.employee;\n    });\n    setObservers([].concat(_toConsumableArray(observers), [_objectSpread(_objectSpread({}, emp), {}, {\n      hall_chef: hallChefDisabled ? 0 : values.hallChef\n    })]));\n    setInactiveEmployees([].concat(_toConsumableArray(inactiveEmployees), [_objectSpread({}, emp)]));\n    setEmployees(employees.filter(function (emp) {\n      return emp.id != values.employee;\n    }));\n    if (values.hallChef == 1) setHallChefDisabled(true);\n  };\n\n  var handleDeleteObserver = function handleDeleteObserver(data) {\n    var emp = observers.find(function (emp) {\n      return emp.id == data.id;\n    });\n    setObservers(observers.filter(function (emp) {\n      return emp.id != data.id;\n    }));\n    setInactiveEmployees(inactiveEmployees.filter(function (e) {\n      return e.id != emp.id;\n    }));\n    setEmployees([].concat(_toConsumableArray(employees), [_objectSpread({}, emp)]));\n    if (emp.hall_chef) setHallChefDisabled(false);\n  };\n\n  var noHallChefAlert = function noHallChefAlert() {\n    return /*#__PURE__*/_jsx(AlertDialog, {\n      open: showAlert,\n      handleClose: function handleClose() {\n        setShowAlert(false);\n      },\n      text: translate(\"There's no chef in this hall. Do you want to continue?\"),\n      handleOK: function handleOK() {\n        saveObservers();\n        setShowAlert(false);\n      },\n      ok: translate(\"Yes\"),\n      discard: translate(\"No\")\n    });\n  };\n\n  var saveObservers = function saveObservers() {\n    if (!_.isEqual(observers, initialObservers)) {\n      var success = true;\n\n      if (initialObservers.length === 0) {\n        observers.forEach(function (observer, index, arr) {\n          var payload = {\n            exam_halls_ids: hall.exam_halls_ids,\n            date: examDate,\n            from: hall.from,\n            to: hall.to,\n            hall_id: hall.hall.id,\n            employee_id: observer.id,\n            is_master: observer.hall_chef\n          };\n          ObservationService.Add(payload).then(function (response) {\n            if (response.success) {\n              if (index === observers.length - 1) {\n                if (success) toast.success(translate(\"Observations Updated Successfully\"));\n              }\n            } else {\n              console.log(response.error);\n              toast.error(response.error.message);\n              success = false;\n            }\n          }).catch(function (error) {\n            console.error(\"error\", error);\n            success = false;\n          }).finally(function () {\n            setShow();\n          });\n        });\n      }\n\n      initialObservers.forEach(function (observer, index, arr) {\n        var payload = {\n          id: observer.obs_id\n        };\n        ObservationService.Delete(payload).then(function (response) {\n          if (response.success) {\n            if (index === initialObservers.length - 1) {\n              if (success && observers.length === 0) toast.success(translate(\"Observations Updated Successfully\"));\n              observers.forEach(function (observer, index, arr) {\n                var payload = {\n                  exam_halls_ids: hall.exam_halls_ids,\n                  date: examDate,\n                  from: hall.from,\n                  to: hall.to,\n                  hall_id: hall.hall.id,\n                  employee_id: observer.id,\n                  is_master: observer.hall_chef\n                };\n                ObservationService.Add(payload).then(function (response) {\n                  if (response.success) {\n                    if (index === observers.length - 1) {\n                      if (success) toast.success(translate(\"Observations Updated Successfully\"));\n                    }\n                  } else {\n                    console.log(response.error);\n                    toast.error(response.error.message);\n                    success = false;\n                  }\n                }).catch(function (error) {\n                  console.error(\"error\", error);\n                  success = false;\n                });\n              });\n            }\n          } else {\n            console.log(response.error);\n            toast.error(response.error.message);\n            success = false;\n          }\n        }).catch(function (error) {\n          console.error(\"error\", error);\n          success = false;\n        }).finally(function () {\n          setShow();\n        });\n      });\n      /*observers.forEach((observer, index, arr) => {\r\n        let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                       date: examDate,\r\n                       from: hall.from,\r\n                       to: hall.to,\r\n                       hall_id: hall.hall.id,\r\n                       employee_id: observer.id,\r\n                       is_master: observer.hall_chef\r\n        };\r\n        ObservationService.Add(payload)\r\n          .then((response) => {\r\n            if (response.success) {\r\n              // Do Nothing\r\n            } else {\r\n              console.log(response.error);\r\n              toast.error(response.error.message);\r\n              success = false;\r\n            }\r\n          }).catch((error) => {\r\n            console.error(\"error\", error);\r\n            success = false;\r\n          });\r\n      });*/\n    } else setShow();\n  };\n\n  var handleSave = function handleSave() {\n    if (hallChefDisabled) {\n      saveObservers();\n    } else {\n      setShowAlert(true);\n    }\n  };\n\n  var renderObservers = function renderObservers() {\n    if (observers && observers.length > 0) {\n      var data = observers;\n      var options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: false,\n        //pageSize: 10,\n        maxBodyHeight: \"300px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      var actions = [{\n        icon: function icon() {\n          return /*#__PURE__*/_jsx(SuiButton, {\n            style: {\n              minWidth: 80,\n              color: \"#dc3545\",\n              backgroundColor: \"transparent\",\n              border: \"1px solid #dc3545\"\n            },\n            children: translate(\"Delete\")\n          });\n        },\n        onClick: function onClick(evt, data) {\n          return handleDeleteObserver(data);\n        }\n      }];\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(ActionTable, {\n          Title: \"\",\n          Columns: columns,\n          Data: data.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              is_hall_chef: item.hall_chef ? translate(\"Yes\") : translate(\"No\")\n            });\n          }),\n          Options: options,\n          Actions: actions\n        })\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {\n      loading: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      container: true,\n      md: 12,\n      sm: 12,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(Card, {\n          style: {\n            padding: \"1em 4em\",\n            margin: \"5px 0px\"\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsx(GridItem, {\n              item: true,\n              md: 9,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"h5\",\n                component: \"div\",\n                children: title\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 3,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsxs(SuiButton, {\n                onClick: setShow,\n                color: \"warning\",\n                children: [/*#__PURE__*/_jsx(ArrowBack, {}), translate(\"Cancel\")]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(Card, {\n          style: {\n            padding: \"3em 3em\",\n            margin: \"5px 0px\"\n          },\n          children: [/*#__PURE__*/_jsx(Formik, {\n            initialValues: initValues,\n            validationSchema: formScheme,\n            onSubmit: handleAddObserver,\n            children: function children(formik) {\n              var values = formik.values,\n                  handleChange = formik.handleChange,\n                  handleSubmit = formik.handleSubmit,\n                  errors = formik.errors,\n                  touched = formik.touched,\n                  handleBlur = formik.handleBlur,\n                  isSubmitting = formik.isSubmitting,\n                  isValid = formik.isValid,\n                  dirty = formik.dirty;\n              return /*#__PURE__*/_jsx(Form, {\n                children: /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      disabled: false,\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"select\",\n                      id: \"employee\",\n                      name: \"employee\",\n                      select: true,\n                      value: values.employee,\n                      onBlur: handleBlur,\n                      error: Boolean(touched.employee && errors.employee),\n                      helperText: touched.employee && errors.employee,\n                      placeholder: translate(\"Observer\"),\n                      label: translate(\"Observer\"),\n                      fullWidth: true,\n                      children: employees === null || employees === void 0 ? void 0 : employees.map(function (emp) {\n                        return /*#__PURE__*/_jsx(MenuItem, {\n                          value: emp.id,\n                          children: emp.printing_name\n                        }, emp.id);\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(FormControlLabel, {\n                      label: translate(\"Hall chef\"),\n                      onChange: handleChange,\n                      control: /*#__PURE__*/_jsx(Checkbox, {\n                        disabled: hallChefDisabled,\n                        onChange: handleChange,\n                        id: \"hallChef\",\n                        name: \"hallChef\" //checked={values.hallChef == 1} \n                        ,\n                        onBlur: handleBlur,\n                        placeholder: translate(\"Hall chef\"),\n                        defaultChecked: true\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(SuiButton, {\n                      type: \"submit\",\n                      variant: \"gradient\",\n                      color: \"primary\",\n                      children: translate(\"Add observer\")\n                    })\n                  })]\n                })\n              });\n            }\n          }), renderObservers(), /*#__PURE__*/_jsx(Box, {\n            mt: 4,\n            mb: 1,\n            children: /*#__PURE__*/_jsx(SuiButton, {\n              onClick: handleSave,\n              variant: \"gradient\",\n              color: \"primary\",\n              children: translate(\"Save\")\n            })\n          })]\n        })]\n      })\n    }), noHallChefAlert()]\n  });\n};\n\nAssignObserversToHall.layout = Admin;\nAssignObserversToHall.auth = false;\nexport default AssignObserversToHall;","map":null,"metadata":{},"sourceType":"module"}