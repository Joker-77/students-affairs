{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n//Api route function that is returned from next auth\nconst authOptions = {\n  secret: process.env.NextAuth_SECRET,\n  session: {\n    strategy: \"jwt\"\n  },\n  providers: [CredentialsProvider({\n    type: \"credentials\",\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      alert(\"hello\");\n      return null;\n    }\n\n  })],\n  callbacks: {\n    async jwt({\n      token,\n      user\n    }) {\n      return _objectSpread(_objectSpread({}, token), user);\n    },\n\n    async session({\n      session,\n      token,\n      user\n    }) {\n      // Send properties to the client, like an access_token from a provider.\n      session.user = token;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/authentication/sign-in\"\n  }\n};\nexport default NextAuth(authOptions);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","CredentialsProvider","authOptions","secret","process","env","NextAuth_SECRET","session","strategy","providers","type","credentials","email","label","placeholder","password","authorize","req","alert","callbacks","jwt","token","user","pages","signIn"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAA0C,WAA1C;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AASA;AACA,MAAMC,WAA4B,GAAG;AACnCC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,eADe;AAEnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH,GAF0B;AAKnCC,EAAAA,SAAS,EAAE,CACTR,mBAAmB,CAAC;AAClBS,IAAAA,IAAI,EAAE,aADY;AAElBC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELH,QAAAA,IAAI,EAAE,MAFD;AAGLI,QAAAA,WAAW,EAAE;AAHR,OADI;AAMXC,MAAAA,QAAQ,EAAE;AACRF,QAAAA,KAAK,EAAE,UADC;AAERH,QAAAA,IAAI,EAAE,UAFE;AAGRI,QAAAA,WAAW,EAAE;AAHL;AANC,KAFK;;AAclB,UAAME,SAAN,CAAgBL,WAAhB,EAA6BM,GAA7B,EAAkC;AAChCC,MAAAA,KAAK,CAAC,OAAD,CAAL;AACA,aAAO,IAAP;AACD;;AAjBiB,GAAD,CADV,CALwB;AA0BnCC,EAAAA,SAAS,EAAE;AACT,UAAMC,GAAN,CAAU;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAV,EAA2B;AACzB,6CAAYD,KAAZ,GAAsBC,IAAtB;AACD,KAHQ;;AAIT,UAAMf,OAAN,CAAc;AAAEA,MAAAA,OAAF;AAAWc,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAd,EAAwC;AACtC;AACAf,MAAAA,OAAO,CAACe,IAAR,GAAeD,KAAf;AACA,aAAOd,OAAP;AACD;;AARQ,GA1BwB;AAoCnCgB,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH;AApC4B,CAArC;AAwCA,eAAexB,QAAQ,CAACE,WAAD,CAAvB","sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\nimport {\r\n  selectSessionKey,\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  setSessionKey,\r\n  selectDirection,\r\n} from \"../../../redux\";\r\n//Api route function that is returned from next auth\r\nconst authOptions: NextAuthOptions = {\r\n  secret: process.env.NextAuth_SECRET,\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      type: \"credentials\",\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n      async authorize(credentials, req) {\r\n        alert(\"hello\");\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      return { ...token, ...user };\r\n    },\r\n    async session({ session, token, user }) {\r\n      // Send properties to the client, like an access_token from a provider.\r\n      session.user = token;\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/authentication/sign-in\",\r\n  },\r\n};\r\nexport default NextAuth(authOptions);\r\n"]},"metadata":{},"sourceType":"module"}