{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport axios from \"../../../Services/ApiClient\"; //Api route function that is returned from next auth\n\nexport default NextAuth({\n  secret: process.env.SECRET,\n  logger: {\n    error(code, metadata) {\n      console.log({\n        type: \"inside error logger\",\n        code,\n        metadata\n      });\n    },\n\n    warn(code) {\n      console.log({\n        type: \"inside warn logger\",\n        code\n      });\n    },\n\n    debug(code, metadata) {\n      console.log({\n        type: \"inside debug logger\",\n        code,\n        metadata\n      });\n    }\n\n  },\n  providers: [CredentialsProvider({\n    id: \"Hiast\",\n    name: \"Hiast\",\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      console.log(\"credentials\", credentials);\n    }\n\n  })],\n  callbacks: {\n    // called after sucessful signin\n    jwt: async ({\n      token,\n      user\n    }) => {\n      user && (token.user = user);\n      if (user) return _objectSpread(_objectSpread({}, token), {}, {\n        accessToken: user.token\n      });\n      return token;\n    },\n    // called whenever session is checked\n    session: async ({\n      session,\n      token\n    }) => {\n      token && (session.user = token.user);\n      return session;\n    }\n  },\n  session: {\n    strategy: \"jwt\",\n    jwt: true,\n    maxAge: 30 * 24 * 60 * 60\n  },\n  pages: \"/authentication/sign-in\"\n});","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].js"],"names":["NextAuth","CredentialsProvider","axios","secret","process","env","SECRET","logger","error","code","metadata","console","log","type","warn","debug","providers","id","name","credentials","email","label","placeholder","password","authorize","req","callbacks","jwt","token","user","accessToken","session","strategy","maxAge","pages"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,KAAP,MAAkB,6BAAlB,C,CACA;;AACA,eAAeF,QAAQ,CAAC;AACtBG,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,MADE;AAEtBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,QAAAA,IAAI,EAAE,qBAAR;AAA+BJ,QAAAA,IAA/B;AAAqCC,QAAAA;AAArC,OAAZ;AACD,KAHK;;AAINI,IAAAA,IAAI,CAACL,IAAD,EAAO;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,QAAAA,IAAI,EAAE,oBAAR;AAA8BJ,QAAAA;AAA9B,OAAZ;AACD,KANK;;AAONM,IAAAA,KAAK,CAACN,IAAD,EAAOC,QAAP,EAAiB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,QAAAA,IAAI,EAAE,qBAAR;AAA+BJ,QAAAA,IAA/B;AAAqCC,QAAAA;AAArC,OAAZ;AACD;;AATK,GAFc;AAatBM,EAAAA,SAAS,EAAE,CACTf,mBAAmB,CAAC;AAClBgB,IAAAA,EAAE,EAAE,OADc;AAElBC,IAAAA,IAAI,EAAE,OAFY;AAGlBC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELR,QAAAA,IAAI,EAAE,MAFD;AAGLS,QAAAA,WAAW,EAAE;AAHR,OADI;AAMXC,MAAAA,QAAQ,EAAE;AACRF,QAAAA,KAAK,EAAE,UADC;AAERR,QAAAA,IAAI,EAAE,UAFE;AAGRS,QAAAA,WAAW,EAAE;AAHL;AANC,KAHK;;AAelB,UAAME,SAAN,CAAgBL,WAAhB,EAA6BM,GAA7B,EAAkC;AAChCd,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BO,WAA3B;AACD;;AAjBiB,GAAD,CADV,CAbW;AAkCtBO,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,GAAG,EAAE,OAAO;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP,KAA2B;AAC9BA,MAAAA,IAAI,KAAKD,KAAK,CAACC,IAAN,GAAaA,IAAlB,CAAJ;AACA,UAAIA,IAAJ,EACE,uCACKD,KADL;AAEEE,QAAAA,WAAW,EAAED,IAAI,CAACD;AAFpB;AAIF,aAAOA,KAAP;AACD,KAVQ;AAUN;AACHG,IAAAA,OAAO,EAAE,OAAO;AAAEA,MAAAA,OAAF;AAAWH,MAAAA;AAAX,KAAP,KAA8B;AACrCA,MAAAA,KAAK,KAAKG,OAAO,CAACF,IAAR,GAAeD,KAAK,CAACC,IAA1B,CAAL;AACA,aAAOE,OAAP;AACD;AAdQ,GAlCW;AAkDtBA,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,KADH;AAEPL,IAAAA,GAAG,EAAE,IAFE;AAGPM,IAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe;AAHhB,GAlDa;AAuDtBC,EAAAA,KAAK,EAAE;AAvDe,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\n//Api route function that is returned from next auth\r\nexport default NextAuth({\r\n  secret: process.env.SECRET,\r\n  logger: {\r\n    error(code, metadata) {\r\n      console.log({ type: \"inside error logger\", code, metadata });\r\n    },\r\n    warn(code) {\r\n      console.log({ type: \"inside warn logger\", code });\r\n    },\r\n    debug(code, metadata) {\r\n      console.log({ type: \"inside debug logger\", code, metadata });\r\n    },\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      id: \"Hiast\",\r\n      name: \"Hiast\",\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n      async authorize(credentials, req) {\r\n        console.log(\"credentials\", credentials);\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    // called after sucessful signin\r\n    jwt: async ({ token, user }) => {\r\n      user && (token.user = user);\r\n      if (user)\r\n        return {\r\n          ...token,\r\n          accessToken: user.token,\r\n        };\r\n      return token;\r\n    }, // called whenever session is checked\r\n    session: async ({ session, token }) => {\r\n      token && (session.user = token.user);\r\n      return session;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n    jwt: true,\r\n    maxAge: 30 * 24 * 60 * 60,\r\n  },\r\n  pages: \"/authentication/sign-in\",\r\n});\r\n"]},"metadata":{},"sourceType":"module"}