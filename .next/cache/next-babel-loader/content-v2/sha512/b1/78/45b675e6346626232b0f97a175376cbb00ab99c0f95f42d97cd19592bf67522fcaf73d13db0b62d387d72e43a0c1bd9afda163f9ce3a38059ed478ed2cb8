{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport axios from \"../../../Services/ApiClient\";\nimport { selectSessionKey, useAppDispatch, useAppSelector, setSessionKey, selectDirection } from \"../../../redux\"; //Api route function that is returned from next auth\n\nexport const authOptions = {\n  secret: process.env.NextAuth_SECRET,\n  // Configure one or more authentication providers\n  providers: [CredentialsProvider({\n    // The name to display on the sign in form (e.g. \"Sign in with...\")\n    name: \"Credentials\",\n    // `credentials` is used to generate a form on the sign in page.\n    // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n    // e.g. domain, username, password, 2FA token, etc.\n    // You can pass any HTML attribute to the <input> tag through the object.\n    credentials: {\n      email: {\n        label: \"Email\",\n        type: \"text\",\n        placeholder: \"Enter email\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\",\n        placeholder: \"Enter Password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      // const { email, password } = credentials;\n      // const res = await fetch(\n      //   \"http://teststudent.hiast.edu.sy/backend/public/api/login\",\n      //   {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //     },\n      //     body: JSON.stringify({\n      //       email,\n      //       password,\n      //     }),\n      //   }\n      // );\n      // const user = await res.json();\n      // console.log(user);\n      // if (res.ok && user) {\n      //   return user;\n      // } else return null;\n      const payload = {\n        // userName: credentials.user,\n        email: credentials.email,\n        password: credentials.password\n      };\n      console.log(\"Starting the signup/login process ---\");\n      const response = await axios.post(\"/login\", payload).then(resp => {\n        console.log(\"resp\", resp);\n        if (resp.data.success) return resp.data;else console.log(resp.data.error);\n      }).catch(error => {\n        console.log(\"error resp\", error);\n      }); // credentials will to passed from our login form\n      // Your own logic here either check agains database or api endpoint\n      // e.g. verify password if valid return user object.\n\n      console.log(\"Credentials\", response);\n\n      if (response && response.success) {\n        let _user = {\n          name: response.result.userName,\n          img: response.result.image,\n          email: response.result.email,\n          token: response.result.token\n        };\n        alert(response.result.token);\n        const dispatch = useAppDispatch();\n        dispatch(setSessionKey(response.result.token));\n        return _user;\n      } else return null;\n    }\n\n  }) // ...add more providers here\n  ],\n  callbacks: {\n    async jwt({\n      token,\n      user\n    }) {\n      return _objectSpread(_objectSpread({}, token), user);\n    },\n\n    async session({\n      session,\n      token,\n      user\n    }) {\n      // Send properties to the client, like an access_token from a provider.\n      session.user = token;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/authentication/sign-in\"\n  }\n};\nexport default NextAuth(authOptions);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/api/auth/[...nextauth].js"],"names":["NextAuth","CredentialsProvider","axios","selectSessionKey","useAppDispatch","useAppSelector","setSessionKey","selectDirection","authOptions","secret","process","env","NextAuth_SECRET","providers","name","credentials","email","label","type","placeholder","password","authorize","req","payload","console","log","response","post","then","resp","data","success","error","catch","_user","result","userName","img","image","token","alert","dispatch","callbacks","jwt","user","session","pages","signIn"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"../../../Services/ApiClient\";\r\nimport {\r\n  selectSessionKey,\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  setSessionKey,\r\n  selectDirection,\r\n} from \"../../../redux\";\r\n//Api route function that is returned from next auth\r\nexport const authOptions = {\r\n  secret: process.env.NextAuth_SECRET,\r\n  // Configure one or more authentication providers\r\n  providers: [\r\n    CredentialsProvider({\r\n      // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n      name: \"Credentials\",\r\n      // `credentials` is used to generate a form on the sign in page.\r\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\r\n      // e.g. domain, username, password, 2FA token, etc.\r\n      // You can pass any HTML attribute to the <input> tag through the object.\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"Enter email\",\r\n        },\r\n        password: {\r\n          label: \"Password\",\r\n          type: \"password\",\r\n          placeholder: \"Enter Password\",\r\n        },\r\n      },\r\n\r\n      async authorize(credentials, req) {\r\n        // const { email, password } = credentials;\r\n        // const res = await fetch(\r\n        //   \"http://teststudent.hiast.edu.sy/backend/public/api/login\",\r\n        //   {\r\n        //     method: \"POST\",\r\n        //     headers: {\r\n        //       \"Content-Type\": \"application/json\",\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //       email,\r\n        //       password,\r\n        //     }),\r\n        //   }\r\n        // );\r\n        // const user = await res.json();\r\n        // console.log(user);\r\n        // if (res.ok && user) {\r\n        //   return user;\r\n        // } else return null;\r\n        const payload = {\r\n          // userName: credentials.user,\r\n          email: credentials.email,\r\n          password: credentials.password,\r\n        };\r\n        console.log(\"Starting the signup/login process ---\");\r\n        const response = await axios\r\n          .post(\"/login\", payload)\r\n          .then((resp) => {\r\n            console.log(\"resp\", resp);\r\n            if (resp.data.success) return resp.data;\r\n            else console.log(resp.data.error);\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"error resp\", error);\r\n          });\r\n        // credentials will to passed from our login form\r\n        // Your own logic here either check agains database or api endpoint\r\n        // e.g. verify password if valid return user object.\r\n        console.log(\"Credentials\", response);\r\n        if (response && response.success) {\r\n          let _user = {\r\n            name: response.result.userName,\r\n            img: response.result.image,\r\n            email: response.result.email,\r\n            token: response.result.token,\r\n          };\r\n          alert(response.result.token);\r\n          const dispatch = useAppDispatch();\r\n          dispatch(setSessionKey(response.result.token));\r\n          return _user;\r\n        } else return null;\r\n      },\r\n    }),\r\n    // ...add more providers here\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      return { ...token, ...user };\r\n    },\r\n    async session({ session, token, user }) {\r\n      // Send properties to the client, like an access_token from a provider.\r\n      session.user = token;\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/authentication/sign-in\",\r\n  },\r\n};\r\nexport default NextAuth(authOptions);\r\n"]},"metadata":{},"sourceType":"module"}