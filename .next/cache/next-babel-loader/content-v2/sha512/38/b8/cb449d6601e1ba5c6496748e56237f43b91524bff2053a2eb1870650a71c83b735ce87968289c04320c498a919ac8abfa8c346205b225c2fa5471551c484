{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Box, Grid, Typography, TextField, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { useRouter } from \"next/router\";\nimport colors from \"../assets/theme/base/colors\";\nimport Card from \"./Card/Card\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useTranslation } from \"../Utility/Translations/useTranslation\";\nimport { Form, Formik } from \"formik\";\nimport { useEffect } from \"react\"; //import ObserverService from \"../../Services/ObserverService\";\n\nimport ObservationService from \"../Services/ObservationService\";\nimport SuiButton from \"./SuiButton\";\nimport ActionTable from \"./MaterialTable/ActionTable\";\nimport Placeholder from \"../Utility/Placeholders\";\nimport GridItem from \"./Grid/GridItem\";\nimport _ from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport Admin from \"../layouts/Admin\";\nimport ObserverService from \"../Services/ObserverService\"; //import {Autocomplete} from \"@material-ui/Autocomplete\";\n\nimport AlertDialog from \"./Modals/AlertDialog\";\n\nconst AssignObserversToHall = ({\n  setShow,\n  hall,\n  formScheme,\n  //submitForm,\n  examDate\n}) => {\n  const initValues = {\n    //from: hall.from,\n    //to: hall.to,\n    employee: null,\n    hallChef: 1\n  };\n  const {\n    locale\n  } = useRouter();\n  const {\n    translate\n  } = useTranslation();\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"70%\",\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\"\n  };\n  const cardStyle = {\n    position: \"absolute\",\n    //top: \"50%\",\n    //left: \"50%\",\n    //transform: \"translate(-50%, -50%)\",\n    // width: 400,\n    bgcolor: \"background.paper\",\n    // border: \"2px solid brown\",\n    boxShadow: 24,\n    borderRadius: \"20px\",\n    marginTop: \"0px\",\n    marginBottom: \"0px\"\n  };\n  const styles = {\n    modal: {\n      overflowY: \"scroll\",\n      overflowX: \"hidden\",\n      height: \"95%\",\n      direction: locale === 'ar' ? \"rtl\" : \"ltr\"\n    },\n    header: {\n      height: \"7em\",\n      position: \"sticky\",\n      borderTopRightRadius: \"inherit\",\n      borderTopLeftRadius: \"inherit\",\n      backgroundColor: colors.gradients.primary.main,\n      color: \"#fff\"\n    }\n  };\n  const [employees, setEmployees] = React.useState([]);\n  const [observers, setObservers] = React.useState([]);\n  const [initialObservers, setInitialObservers] = React.useState([]);\n  const [inactiveEmployees, setInactiveEmployees] = React.useState([]);\n  const [hallChefDisabled, setHallChefDisabled] = React.useState(false);\n  const [showAlert, setShowAlert] = React.useState(false);\n\n  const loadData = () => {\n    //console.log(`${examDate}===${hall.hall.id}`);\n    ObservationService.GetAll(examDate, '', hall.hall.id).then(res => {\n      let result = res.result; //console.log(result);\n\n      result.forEach(obs => {\n        if (obs.is_master) setHallChefDisabled(true);\n      });\n      let observers = [];\n      Promise.all(result.map(obs => {\n        return ObserverService.Get(obs.employee_id.toString()).then(res => {\n          let ovr = res.result;\n          return _objectSpread(_objectSpread({}, ovr), {}, {\n            hall_chef: obs.is_master,\n            obs_id: obs.id\n          });\n        }).catch(error => {\n          console.error(\"error\", error);\n        });\n      })).then(result => {\n        //console.log(result);\n        setObservers(result);\n        setInitialObservers(result);\n        setInactiveEmployees(result);\n      });\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n    ObservationService.GetAvailableObservers(examDate, hall.timePeriod.slice(11, 16), hall.timePeriod.slice(33, 38)).then(res => {\n      console.log(\"Observers\", res.result);\n      let result = res.result; //setEmployees(result.filter(emp => !emp.excluded));\n\n      setEmployees(result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n  const title = `${translate(\"Exam\")} ${hall === null || hall === void 0 ? void 0 : hall.examsDetails} ${translate(\"from\")} ${hall === null || hall === void 0 ? void 0 : hall.from} ${translate(\"to\")} ${hall === null || hall === void 0 ? void 0 : hall.to} ${translate(\"in\")} ${hall === null || hall === void 0 ? void 0 : hall.hallName} ${translate(\"on\")} ${examDate}`; //const [employee, setEmployee] = React.useState(null);\n\n  let columns = [{\n    title: translate(\"Id\"),\n    field: \"id\",\n    hidden: true\n  }, {\n    title: translate(\"Observer\"),\n    field: \"printing_name\"\n  }, {\n    title: translate(\"Hall chef\"),\n    field: \"is_hall_chef\"\n  }];\n\n  const handleAddObserver = (values, {\n    setSubmitting\n  }) => {\n    console.log(employees);\n    console.log(values.employee);\n    let emp = employees.find(emp => emp.id == values.employee);\n    setObservers([...observers, _objectSpread(_objectSpread({}, emp), {}, {\n      hall_chef: hallChefDisabled ? 0 : values.hallChef\n    })]);\n    setInactiveEmployees([...inactiveEmployees, _objectSpread({}, emp)]);\n    setEmployees(employees.filter(emp => emp.id != values.employee));\n    if (values.hallChef == 1) setHallChefDisabled(true);\n  };\n\n  const handleDeleteObserver = data => {\n    let emp = observers.find(emp => emp.id == data.id);\n    setObservers(observers.filter(emp => emp.id != data.id));\n    setInactiveEmployees(inactiveEmployees.filter(e => e.id != emp.id));\n    setEmployees([...employees, _objectSpread({}, emp)]);\n    if (emp.hall_chef) setHallChefDisabled(false);\n  };\n\n  const noHallChefAlert = () => {\n    return /*#__PURE__*/_jsx(AlertDialog, {\n      open: showAlert,\n      handleClose: () => {\n        setShowAlert(false);\n      },\n      text: translate(\"There's no chef in this hall. Do you want to continue?\"),\n      handleOK: () => {\n        saveObservers();\n        setShowAlert(false);\n      },\n      ok: translate(\"Yes\"),\n      discard: translate(\"No\")\n    });\n  };\n\n  const saveObservers = () => {\n    if (!_.isEqual(observers, initialObservers)) {\n      let success = true;\n\n      if (initialObservers.length === 0) {\n        observers.forEach((observer, index, arr) => {\n          let payload = {\n            exam_halls_ids: hall.exam_halls_ids,\n            date: examDate,\n            from: hall.from,\n            to: hall.to,\n            hall_id: hall.hall.id,\n            employee_id: observer.id,\n            is_master: observer.hall_chef\n          };\n          ObservationService.Add(payload).then(response => {\n            if (response.success) {\n              if (index === observers.length - 1) {\n                if (success) toast.success(translate(\"Observations Updated Successfully\"));\n              }\n            } else {\n              console.log(response.error);\n              toast.error(response.error.message);\n              success = false;\n            }\n          }).catch(error => {\n            console.error(\"error\", error);\n            success = false;\n          }).finally(() => {\n            setShow();\n          });\n        });\n      }\n\n      initialObservers.forEach((observer, index, arr) => {\n        let payload = {\n          id: observer.obs_id\n        };\n        ObservationService.Delete(payload).then(response => {\n          if (response.success) {\n            if (index === initialObservers.length - 1) {\n              if (success && observers.length === 0) toast.success(translate(\"Observations Updated Successfully\"));\n              observers.forEach((observer, index, arr) => {\n                let payload = {\n                  exam_halls_ids: hall.exam_halls_ids,\n                  date: examDate,\n                  from: hall.from,\n                  to: hall.to,\n                  hall_id: hall.hall.id,\n                  employee_id: observer.id,\n                  is_master: observer.hall_chef\n                };\n                ObservationService.Add(payload).then(response => {\n                  if (response.success) {\n                    if (index === observers.length - 1) {\n                      if (success) toast.success(translate(\"Observations Updated Successfully\"));\n                    }\n                  } else {\n                    console.log(response.error);\n                    toast.error(response.error.message);\n                    success = false;\n                  }\n                }).catch(error => {\n                  console.error(\"error\", error);\n                  success = false;\n                });\n              });\n            }\n          } else {\n            console.log(response.error);\n            toast.error(response.error.message);\n            success = false;\n          }\n        }).catch(error => {\n          console.error(\"error\", error);\n          success = false;\n        }).finally(() => {\n          setShow();\n        });\n      });\n      /*observers.forEach((observer, index, arr) => {\r\n        let payload = {exam_halls_ids: hall.exam_halls_ids,\r\n                       date: examDate,\r\n                       from: hall.from,\r\n                       to: hall.to,\r\n                       hall_id: hall.hall.id,\r\n                       employee_id: observer.id,\r\n                       is_master: observer.hall_chef\r\n        };\r\n        ObservationService.Add(payload)\r\n          .then((response) => {\r\n            if (response.success) {\r\n              // Do Nothing\r\n            } else {\r\n              console.log(response.error);\r\n              toast.error(response.error.message);\r\n              success = false;\r\n            }\r\n          }).catch((error) => {\r\n            console.error(\"error\", error);\r\n            success = false;\r\n          });\r\n      });*/\n    } else setShow();\n  };\n\n  const handleSave = () => {\n    if (hallChefDisabled) {\n      saveObservers();\n    } else {\n      setShowAlert(true);\n    }\n  };\n\n  const renderObservers = () => {\n    if (observers && observers.length > 0) {\n      let data = observers;\n      let options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: false,\n        //pageSize: 10,\n        maxBodyHeight: \"300px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      let actions = [{\n        icon: () => /*#__PURE__*/_jsx(SuiButton, {\n          style: {\n            minWidth: 80,\n            color: \"#dc3545\",\n            backgroundColor: \"transparent\",\n            border: \"1px solid #dc3545\"\n          },\n          children: translate(\"Delete\")\n        }),\n        onClick: (evt, data) => handleDeleteObserver(data)\n      }];\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(ActionTable, {\n          Title: \"\",\n          Columns: columns,\n          Data: data.map(item => {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              is_hall_chef: item.hall_chef ? translate(\"Yes\") : translate(\"No\")\n            });\n          }),\n          Options: options,\n          Actions: actions\n        })\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {\n      loading: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      container: true,\n      md: 12,\n      sm: 12,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(Card, {\n          style: {\n            padding: \"1em 4em\",\n            margin: \"5px 0px\"\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsx(GridItem, {\n              item: true,\n              md: 9,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"h5\",\n                component: \"div\",\n                children: title\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 3,\n              xs: 12,\n              sm: 12,\n              children: /*#__PURE__*/_jsxs(SuiButton, {\n                onClick: setShow,\n                color: \"warning\",\n                children: [/*#__PURE__*/_jsx(ArrowBack, {}), translate(\"Cancel\")]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(Card, {\n          style: {\n            padding: \"3em 3em\",\n            margin: \"5px 0px\"\n          },\n          children: [/*#__PURE__*/_jsx(Formik, {\n            initialValues: initValues,\n            validationSchema: formScheme,\n            onSubmit: handleAddObserver,\n            children: formik => {\n              const {\n                values,\n                handleChange,\n                handleSubmit,\n                errors,\n                touched,\n                handleBlur,\n                isSubmitting,\n                isValid,\n                dirty\n              } = formik;\n              return /*#__PURE__*/_jsx(Form, {\n                children: /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      disabled: false,\n                      onChange: handleChange,\n                      variant: \"outlined\",\n                      size: \"small\",\n                      type: \"select\",\n                      id: \"employee\",\n                      name: \"employee\",\n                      select: true,\n                      value: values.employee,\n                      onBlur: handleBlur,\n                      error: Boolean(touched.employee && errors.employee),\n                      helperText: touched.employee && errors.employee,\n                      placeholder: translate(\"Observer\"),\n                      label: translate(\"Observer\"),\n                      fullWidth: true,\n                      children: employees === null || employees === void 0 ? void 0 : employees.map(emp => /*#__PURE__*/_jsx(MenuItem, {\n                        value: emp.id,\n                        children: emp.printing_name\n                      }, emp.id))\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(FormControlLabel, {\n                      label: translate(\"Hall chef\"),\n                      onChange: handleChange,\n                      control: /*#__PURE__*/_jsx(Checkbox, {\n                        disabled: hallChefDisabled,\n                        onChange: handleChange,\n                        id: \"hallChef\",\n                        name: \"hallChef\" //checked={values.hallChef == 1} \n                        ,\n                        onBlur: handleBlur,\n                        placeholder: translate(\"Hall chef\"),\n                        defaultChecked: true\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: /*#__PURE__*/_jsx(SuiButton, {\n                      type: \"submit\",\n                      variant: \"gradient\",\n                      color: \"primary\",\n                      children: translate(\"Add observer\")\n                    })\n                  })]\n                })\n              });\n            }\n          }), renderObservers(), /*#__PURE__*/_jsx(Box, {\n            mt: 4,\n            mb: 1,\n            children: /*#__PURE__*/_jsx(SuiButton, {\n              onClick: handleSave,\n              variant: \"gradient\",\n              color: \"primary\",\n              children: translate(\"Save\")\n            })\n          })]\n        })]\n      })\n    }), noHallChefAlert()]\n  });\n};\n\nAssignObserversToHall.layout = Admin;\nAssignObserversToHall.auth = false;\nexport default AssignObserversToHall;","map":null,"metadata":{},"sourceType":"module"}