{"ast":null,"code":"import apiConnector from \"./ApiClient\";\nexport default class ObservationService {\n  static async GetAll(date, employee_id, hall_id) {\n    const listUrl = process.env.LIST_OBSERVATIONS_URL;\n    return await apiConnector.get(`${listUrl}?date=${date}&employee_id=${employee_id}&hall_id=${hall_id}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async GetAvailableObservers(date, from, to) {\n    const listUrl = process.env.LIST_AVAILABLE_OBSERVERS_URL;\n    return await apiConnector.get(`${listUrl}?date=${date}&from=${from}&to=${to}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Add(payload) {\n    const addUrl = process.env.ADD_OBSERVATION_URL;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Delete(payload) {\n    const deleteUrl = process.env.DELETE_OBSERVATION_URL;\n    return await apiConnector.post(deleteUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}