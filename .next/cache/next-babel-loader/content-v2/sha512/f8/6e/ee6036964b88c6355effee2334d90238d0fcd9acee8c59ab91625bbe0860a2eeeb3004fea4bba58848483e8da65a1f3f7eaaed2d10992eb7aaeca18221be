{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport Admin from \"layouts/Admin.js\";\nimport GridContainer from \"../../../../components/Grid/GridContainer\";\nimport { Button, FormControl, Grid, InputLabel, MenuItem, Select, Typography, makeStyles, TextField } from \"@material-ui/core\";\nimport GridItem from \"../../../../components/Grid/GridItem\";\nimport PlanService from \"../../../../Services/PlanService\";\nimport EduYearService from \"../../../../Services/EduYearService\";\nimport ExamService from \"../../../../Services/ExamService\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport styles from \"assets/jss/nextjs-material-dashboard/views/dashboardStyle.js\";\nimport { KeyboardDatePicker, TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { arSA } from \"date-fns/locale\";\nimport { toast } from \"react-toastify\";\nimport \"./exams-list-style.css\";\nimport { Card } from \"@material-ui/core\";\nimport SuiButton from \"../../../../components/SuiButton\";\n\nconst ExamsList = ({}) => {\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles(); // Programs\n\n  const {\n    0: programs,\n    1: setPrograms\n  } = useState([]);\n  const {\n    0: program,\n    1: setProgram\n  } = useState(null); // Courses\n\n  const {\n    0: courses,\n    1: setCourses\n  } = useState([]);\n  const {\n    0: course,\n    1: setCourse\n  } = useState(null); // Edu Year\n\n  const {\n    0: eduYears,\n    1: setEduYears\n  } = useState([]);\n  const {\n    0: eduYear,\n    1: setEduYear\n  } = useState(null); // Exam Type\n\n  const {\n    0: examsTypes,\n    1: setExamsType\n  } = useState([]);\n  const {\n    0: examType,\n    1: setExamType\n  } = useState(null);\n  useEffect(() => {\n    PlanService.GetAll().then(programs => {\n      EduYearService.GetYears(\"\").then(eduYears => {\n        setPrograms(programs.result);\n        setEduYears(eduYears.result);\n      }).catch(err => {\n        console.error(\"Error\", err);\n      });\n    }).catch(err => {\n      console.error(\"Error\", err);\n    });\n  }, []);\n\n  const changeProgram = val => {\n    setProgram(val);\n  };\n\n  const changeEduYear = val => {\n    setEduYear(val);\n    setLoadCourses(true);\n    ExamService.GetAllCourses(program, val.toString()).then(resp => {\n      console.log(resp.result);\n      setCourses(resp.result);\n    }).catch(error => {});\n    setLoadCourses(false);\n  };\n\n  const {\n    0: loadCourses,\n    1: setLoadCourses\n  } = useState(false);\n  const {\n    0: loadExamsType,\n    1: setLoadExamsType\n  } = useState(false);\n  const {\n    0: plans,\n    1: setPlans\n  } = useState([]); // Get Exams\n\n  useEffect(() => {}, []);\n\n  const addInputField = () => {\n    if (inputFields.length >= halls.length) toast.error(\"لايمكنك الإضافة! لايوجد سوى قاعتين\");else setInputFields([...inputFields, {\n      hall: 0,\n      date: getFullDate(selectedDate),\n      from: getFullTime(startTime),\n      to: getFullTime(endTime),\n      planId: 0,\n      num_studs: 0\n    }]);\n  };\n\n  const removeInputFields = index => {\n    const rows = [...inputFields];\n    rows.splice(index, 1);\n    setInputFields(rows);\n  };\n\n  const handleChange = (index, evnt) => {\n    const {\n      name,\n      value\n    } = evnt.target;\n    const list = [...inputFields];\n    list[index][name] = value;\n    setInputFields(list);\n    console.log(list);\n  }; //\n\n\n  const getFullDate = date => {\n    let day = date === null || date === void 0 ? void 0 : date.getDate();\n    let month = (date === null || date === void 0 ? void 0 : date.getMonth()) + 1;\n    let year = date === null || date === void 0 ? void 0 : date.getFullYear(); // This arrangement can be altered based on how we want the date's format to appear.\n\n    return `${(\"0\" + day).slice(-2)}-${(\"0\" + month).slice(-2)}-${year}`;\n  }; //\n\n\n  const getFullTime = date => {\n    return date.toLocaleTimeString();\n  }; // ------------------------\n\n\n  const clear = () => {\n    setSelectedNewStds(0);\n    setSelectedOldStds(0);\n    setSelectedPlans([]);\n    setPlans([]);\n    setSelectedPlanData([]);\n    setInputFields([{\n      hall: 0,\n      date: getFullDate(selectedDate),\n      from: getFullTime(startTime),\n      to: getFullTime(endTime),\n      num_studs: 0\n    }]);\n  };\n\n  const changeCourse = val => {\n    clear();\n    setCourse(val);\n    setLoadExamsType(true);\n\n    let _course = courses.find(e => e.id === val);\n\n    setExamsType(_course.evaluation_methods);\n    setLoadExamsType(false);\n  };\n\n  const changeExamType = val => {\n    clear();\n\n    let _course = courses.find(e => e.id == course);\n\n    setExamType(val);\n    ExamService.GetAllPlans(program, eduYear, _course.edu_course_id, val.toString()).then(resp => setPlans(resp.result)).catch(error => {});\n  }; // Halls\n  // const [halls, setHalls] = useState([]);\n  // handle add coursse to program\n\n\n  const {\n    0: selectedPlanData,\n    1: setSelectedPlanData\n  } = useState([]);\n  const {\n    0: selectedPlans,\n    1: setSelectedPlans\n  } = useState([]);\n  const {\n    0: selectedNewStds,\n    1: setSelectedNewStds\n  } = useState(0);\n  const {\n    0: selectedOldStds,\n    1: setSelectedOldStds\n  } = useState(0);\n  const {\n    0: selectedDate,\n    1: setSelectedDate\n  } = useState(new Date());\n  const {\n    0: startTime,\n    1: setStartTime\n  } = useState(new Date());\n  const {\n    0: endTime,\n    1: setEndTime\n  } = useState(new Date());\n  console.log(\"selectedDate\", selectedDate.getDay()); // Dynamic Halls\n\n  const {\n    0: inputFields,\n    1: setInputFields\n  } = useState([{\n    hall: 0,\n    date: getFullDate(selectedDate),\n    from: getFullTime(startTime),\n    to: getFullTime(endTime),\n    planId: 0,\n    num_studs: 0\n  }]);\n  console.log(inputFields);\n  const _halls = [{\n    id: 1,\n    name: \"ق1\",\n    selected: false\n  }, {\n    id: 2,\n    name: \"ق2\",\n    selected: false\n  }];\n  const {\n    0: halls,\n    1: setHalls\n  } = useState(_halls);\n\n  const handleDateChange = e => {\n    setSelectedDate(e);\n\n    let _inptFilds = inputFields.slice().map(dd => {\n      return {\n        hall: dd.hall,\n        date: getFullDate(e),\n        from: getFullTime(startTime),\n        to: getFullTime(endTime),\n        planId: dd.planId,\n        num_studs: dd.num_studs\n      };\n    });\n\n    setInputFields(_inptFilds);\n  };\n\n  const handleStartTime = e => {\n    setStartTime(e);\n\n    let _inptFilds = inputFields.slice().map(dd => {\n      return {\n        hall: dd.hall,\n        date: getFullDate(selectedDate),\n        from: getFullTime(e),\n        to: getFullTime(endTime),\n        planId: dd.planId,\n        num_studs: dd.num_studs\n      };\n    });\n\n    setInputFields(_inptFilds);\n  };\n\n  const handleEndTime = e => {\n    setEndTime(e);\n\n    let _inptFilds = inputFields.slice().map(dd => {\n      return {\n        hall: dd.hall,\n        date: getFullDate(selectedDate),\n        from: getFullTime(startTime),\n        to: getFullTime(e),\n        planId: dd.planId,\n        num_studs: dd.num_studs\n      };\n    });\n\n    setInputFields(_inptFilds);\n    const startHour = startTime.getHours();\n    const startMinute = startTime.getMinutes();\n    const endHour = e.getHours();\n    const endMinute = e.getMinutes();\n    if (e < startTime) toast.error(\"وقت الانتهاء يجب أن يكون بعد وقت البدء\");\n  }; // get selected plan exams\n\n\n  const {\n    0: selectedPlan,\n    1: setSelectedPlan\n  } = useState(0); //   useEffect(() => {\n  //     if (selectedPlan != 0 && !!selectedPlanData) {\n  //       ExamService.getExams(selectedPlan)\n  //         .then((resp) => {\n  //           console.clear();\n  //           console.log(resp);\n  //           if (resp.result?.length > 0) {\n  //             let exam = resp.result?.filter((dt, indx) => {\n  //               return dt.evaluation_method?.id == examType;\n  //             })[0];\n  //             if (exam.exam_halls && exam.exam_halls.length > 0) {\n  //               let fields = exam?.exam_halls?.map((e) => {\n  //                 return {\n  //                   planId: exam.plan_id,\n  //                   from: exam.from,\n  //                   to: exam.to,\n  //                   date: exam.date.split(\"T\")[0],\n  //                   hall: e.hall_id,\n  //                   num_studs: e.students_num,\n  //                 };\n  //               });\n  //               console.log(\"selectedPlanData\", selectedPlanData);\n  //               console.log(\"fields\", fields);\n  //               setInputFields(fields);\n  //             }\n  //           }\n  //         })\n  //         .catch((error) => {});\n  //     }\n  //   }, [selectedPlanData, selectedPlan]);\n  // Select Plan\n\n  const selectPlan = id => {\n    let valAsNum = parseInt(id); // setSelectedPlan(valAsNum);\n\n    let _arr = selectedPlans.slice();\n\n    if (_arr.includes(valAsNum)) {\n      let index = _arr.findIndex(e => e == valAsNum);\n\n      _arr.splice(index, 1);\n\n      setSelectedPlans(_arr);\n      let sel = _arr.length > 0 ? plans.map(e => {\n        if (_arr.includes(parseInt(e.id))) return e;\n      }) : [];\n      setSelectedPlanData(sel);\n\n      if (sel.length > 0) {\n        const sumOld = sel.reduce((partialSum, a) => partialSum + a.old_students_num, 0);\n        const sumNew = sel.reduce((partialSum, a) => partialSum + a.new_students_num, 0);\n        setSelectedNewStds(sumNew);\n        setSelectedOldStds(sumOld);\n      } else {\n        setSelectedNewStds(0);\n        setSelectedOldStds(0);\n      }\n    } else {\n      _arr.push(valAsNum);\n\n      setSelectedPlans(_arr);\n      let sel = _arr.length > 0 ? plans.map(e => {\n        if (_arr.includes(parseInt(e.id))) return e;\n      }) : [];\n      setSelectedPlanData(sel);\n      const sumOld = sel.reduce((partialSum, a) => partialSum + a.old_students_num, 0);\n      const sumNew = sel.reduce((partialSum, a) => partialSum + a.new_students_num, 0);\n      setSelectedNewStds(sumNew);\n      setSelectedOldStds(sumOld);\n    }\n  };\n\n  const handleAddExam = () => {\n    const payLoad = {\n      plan_ids: [...selectedPlans],\n      type: `${examsTypes.filter(e => e.id == examType)[0].name}`,\n      date: getFullDate(selectedDate),\n      from: getFullTime(startTime),\n      to: getFullTime(endTime),\n      halls: inputFields.map(dd => {\n        return {\n          id: dd.hall,\n          plan_id: dd.planId,\n          students_num: parseInt(`${dd.num_studs}`)\n        };\n      })\n    };\n    console.log(payLoad); // PlanService.AddCourse(payLoad)\n    //   .then((result) => {\n    //     if (result.success) {\n    //       toast.success(translate(\"Course Added To Plan Successfully\"));\n    //       PlanService.GetProgramCourses(program, specYear, year)\n    //         .then((resp) => {\n    //           if (resp.success) {\n    //             setProgramCourses(resp.result);\n    //           }\n    //         })\n    //         .catch((err) => {});\n    //     }\n    //   })\n    //   .catch((error) => {\n    //     toast.error(error.message);\n    //   });\n  };\n\n  const renderPlans = plans => {\n    if (plans.length > 0) {\n      return /*#__PURE__*/_jsxs(MuiPickersUtilsProvider, {\n        locale: arSA,\n        utils: DateFnsUtils,\n        children: [/*#__PURE__*/_jsxs(Card, {\n          style: {\n            margin: \"5px 0px\",\n            width: \"100%\",\n            paddingRight: \"1em\",\n            paddingBottom: \"1em\"\n          },\n          children: [/*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            md: 12,\n            style: {\n              height: \"7em\"\n            },\n            children: [/*#__PURE__*/_jsx(GridItem, {\n              md: 2,\n              children: /*#__PURE__*/_jsx(\"h5\", {\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: \"\\u0627\\u0644\\u0633\\u0646\\u0629\"\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 2,\n              children: /*#__PURE__*/_jsx(\"h5\", {\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: \"\\u0627\\u0644\\u0627\\u062E\\u062A\\u0635\\u0627\\u0635\"\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 2,\n              children: /*#__PURE__*/_jsx(\"h5\", {\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: \"\\u0627\\u0644\\u0641\\u0635\\u0644\"\n              })\n            }), /*#__PURE__*/_jsxs(GridItem, {\n              md: 2,\n              children: [/*#__PURE__*/_jsxs(\"h5\", {\n                style: {\n                  fontWeight: \"bold\",\n                  marginBottom: \"0\"\n                },\n                children: [\"\\u0639\\u062F\\u062F \\u0627\\u0644\\u0637\\u0644\\u0627\\u0628\", \" \"]\n              }), /*#__PURE__*/_jsxs(\"h5\", {\n                style: {\n                  fontWeight: \"bold\",\n                  marginTop: \"0\"\n                },\n                children: [\"\\u0645\\u0633\\u062A\\u062C\\u062F | \\u0645\\u0639\\u064A\\u062F\", \" \"]\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(Grid, {\n            container: true,\n            md: 12,\n            style: {\n              margin: \"2em 0em\"\n            },\n            children: plans.map(e => {\n              var _e$year, _e$year2, _e$year2$speciality;\n\n              return /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    variant: \"outlined\",\n                    size: \"small\",\n                    disabled: true,\n                    value: (_e$year = e.year) === null || _e$year === void 0 ? void 0 : _e$year.ar_name\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    variant: \"outlined\",\n                    size: \"small\",\n                    disabled: true,\n                    value: (_e$year2 = e.year) === null || _e$year2 === void 0 ? void 0 : (_e$year2$speciality = _e$year2.speciality) === null || _e$year2$speciality === void 0 ? void 0 : _e$year2$speciality.ar_name\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    variant: \"outlined\",\n                    size: \"small\",\n                    disabled: true,\n                    value: e.semester\n                  })\n                }), /*#__PURE__*/_jsxs(GridItem, {\n                  md: 1,\n                  children: [e.new_students_num, \" | \", e.old_students_num]\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 1,\n                  children: /*#__PURE__*/_jsx(\"input\", {\n                    type: \"checkbox\",\n                    checked: selectedPlans.includes(e.id),\n                    value: e.id,\n                    onChange: p => selectPlan(p.target.value)\n                  })\n                })]\n              });\n            })\n          }), /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            md: 12,\n            children: [/*#__PURE__*/_jsx(GridItem, {\n              md: 1,\n              children: \"\\u0627\\u0644\\u062A\\u0627\\u0631\\u064A\\u062E\"\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 3,\n              children: /*#__PURE__*/_jsx(KeyboardDatePicker, {\n                clearable: true,\n                value: selectedDate,\n                onChange: date => handleDateChange(date),\n                minDate: new Date(),\n                format: \"MM/dd/yyyy\" // inputVariant=\"outlined\"\n\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            md: 12,\n            style: {\n              marginTop: \"3em\"\n            },\n            children: [/*#__PURE__*/_jsx(GridItem, {\n              style: {\n                display: \"flex\",\n                marginTop: \"1em\"\n              },\n              md: 1,\n              children: /*#__PURE__*/_jsx(\"span\", {\n                children: \" \\u0627\\u0644\\u0648\\u0642\\u062A\"\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 2,\n              children: /*#__PURE__*/_jsx(TimePicker, {\n                clearable: true,\n                label: \"\\u0645\\u0646\",\n                value: startTime,\n                onChange: handleStartTime\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 2,\n              children: /*#__PURE__*/_jsx(TimePicker, {\n                showTodayButton: true,\n                todayLabel: \"now\",\n                label: \"\\u0625\\u0644\\u0649\",\n                value: endTime,\n                minutesStep: 5,\n                onChange: handleEndTime\n              })\n            }), /*#__PURE__*/_jsx(GridItem, {\n              md: 1\n            }), /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              md: 4,\n              children: [/*#__PURE__*/_jsxs(Grid, {\n                item: true,\n                md: 5,\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: \"\\u0627\\u0644\\u0645\\u062C\\u0645\\u0648\\u0639 \\u0627\\u0644\\u0643\\u0644\\u064A\"\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: \"\\u0645\\u0633\\u062A\\u062C\\u062F\"\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: \"\\u0645\\u0639\\u064A\\u062F\"\n                })]\n              }), /*#__PURE__*/_jsxs(Grid, {\n                item: true,\n                md: 3,\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: `${selectedNewStds + selectedOldStds}`\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: selectedNewStds\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  style: {\n                    margin: \"0\"\n                  },\n                  children: selectedOldStds\n                })]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(Grid, {\n          container: true,\n          md: 12,\n          style: {\n            marginTop: \"1em\"\n          },\n          children: /*#__PURE__*/_jsxs(Card, {\n            style: {\n              margin: \"5px 0px\",\n              width: \"100%\",\n              paddingRight: \"1em\",\n              paddingBottom: \"1em\"\n            },\n            children: [/*#__PURE__*/_jsx(Grid, {\n              container: true,\n              children: /*#__PURE__*/_jsx(Button, {\n                style: {\n                  margin: \"10px 5px\"\n                },\n                variant: \"contained\",\n                className: classes.submitBtn,\n                onClick: addInputField,\n                children: \"\\u062A\\u062E\\u0635\\u064A\\u0635 \\u0642\\u0627\\u0639\\u0629\"\n              })\n            }), inputFields.map((data, index) => {\n              console.log(data);\n              console.log(selectedPlanData);\n              return /*#__PURE__*/_jsxs(Grid, {\n                container: true,\n                md: 12,\n                style: {\n                  marginTop: \"1em\"\n                },\n                children: [/*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsxs(FormControl, {\n                    fullWidth: true,\n                    variant: \"filled\",\n                    size: \"small\",\n                    size: \"small\",\n                    children: [/*#__PURE__*/_jsx(InputLabel, {\n                      id: \"demo-simple-select-label\",\n                      children: \"\\u0627\\u0644\\u0642\\u0627\\u0639\\u0629\"\n                    }), /*#__PURE__*/_jsx(Select, {\n                      fullWidth: true,\n                      labelId: \"demo-simple-select-label\",\n                      id: \"demo-simple-select\",\n                      value: data.hall,\n                      label: \"halls\",\n                      name: \"hall\",\n                      onChange: evnt => handleChange(index, evnt),\n                      children: halls.map(hall => !hall.selected && /*#__PURE__*/_jsx(MenuItem, {\n                        value: hall.id,\n                        children: hall.name\n                      }, hall.id))\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsxs(FormControl, {\n                    fullWidth: true,\n                    variant: \"filled\",\n                    size: \"small\",\n                    size: \"small\",\n                    children: [/*#__PURE__*/_jsx(InputLabel, {\n                      id: \"demo-simple-select-label\",\n                      children: \"\\u0627\\u0644\\u0633\\u0646\\u0629 \\u0648\\u0627\\u0644\\u0627\\u062E\\u062A\\u0635\\u0627\\u0635\"\n                    }), /*#__PURE__*/_jsx(Select, {\n                      fullWidth: true,\n                      labelId: \"demo-simple-select-label\",\n                      id: \"demo-simple-select\",\n                      value: data.planId,\n                      label: \"halls\",\n                      name: \"planId\",\n                      onChange: evnt => handleChange(index, evnt),\n                      children: selectedPlanData.map(data => {\n                        var _data$year, _data$year2, _data$year2$specialit;\n\n                        return /*#__PURE__*/_jsx(MenuItem, {\n                          value: data.id,\n                          children: `${(_data$year = data.year) === null || _data$year === void 0 ? void 0 : _data$year.ar_name} - ${(_data$year2 = data.year) === null || _data$year2 === void 0 ? void 0 : (_data$year2$specialit = _data$year2.speciality) === null || _data$year2$specialit === void 0 ? void 0 : _data$year2$specialit.ar_name}`\n                        }, data.id);\n                      })\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    disabled: true,\n                    variant: \"outlined\",\n                    size: \"small\",\n                    type: \"text\",\n                    value: data.date,\n                    label: translate(\"التاريخ\"),\n                    fullWidth: true\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    disabled: true,\n                    variant: \"outlined\",\n                    size: \"small\",\n                    type: \"text\",\n                    value: data.from,\n                    label: translate(\"من\"),\n                    fullWidth: true\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    disabled: true,\n                    variant: \"outlined\",\n                    size: \"small\",\n                    type: \"text\",\n                    value: data.to,\n                    label: translate(\"إلى\"),\n                    fullWidth: true\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 2,\n                  children: /*#__PURE__*/_jsx(TextField, {\n                    onChange: evnt => handleChange(index, evnt),\n                    variant: \"outlined\",\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"num_studs\",\n                    value: data.num_studs,\n                    label: translate(\"عدد الطلّاب\"),\n                    fullWidth: true\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  md: 3,\n                  children: inputFields.length !== 1 ? /*#__PURE__*/_jsx(Button, {\n                    type: \"button\",\n                    style: {\n                      width: \"10%\",\n                      color: \"white\",\n                      background: \"red\"\n                    },\n                    variant: \"outlined\",\n                    className: classes.closeBtn,\n                    onClick: removeInputFields,\n                    children: \"x\"\n                  }) : \"\"\n                })]\n              });\n            }), /*#__PURE__*/_jsx(SuiButton, {\n              onClick: handleAddExam,\n              style: {\n                margin: \"2em 0\",\n                color: \"rgb(255, 255, 255)\",\n                background: \"rgb(23, 193, 232)\"\n              },\n              type: \"button\",\n              children: `إضافة واقعة امتحانية`\n            })]\n          })\n        })]\n      });\n    } else {\n      return /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        md: 12,\n        style: {\n          margin: \"2em 0em\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/_jsx(Typography, {\n          style: {\n            textAlign: \"center\"\n          },\n          variant: \"h5\",\n          component: \"div\",\n          children: `لاتوجد بيانات لعرضها`\n        })\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(GridContainer, {\n    md: 12,\n    children: [/*#__PURE__*/_jsx(GridContainer, {\n      md: 12,\n      children: /*#__PURE__*/_jsx(GridItem, {\n        style: {\n          margin: \"-1em 0 1em 0\"\n        },\n        md: 12,\n        className: classes.typography,\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          children: `إضافة واقعة امتحانية`\n        })\n      })\n    }), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      md: 12,\n      style: {\n        margin: \"2em 0em\"\n      },\n      children: [/*#__PURE__*/_jsx(GridItem, {\n        md: 2,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          size: \"small\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"demo-simple-select-label\",\n            children: \"\\u0627\\u0644\\u0628\\u0631\\u0646\\u0627\\u0645\\u062C\"\n          }), /*#__PURE__*/_jsx(Select, {\n            labelId: \"demo-simple-select-label\",\n            id: \"demo-simple-select\",\n            value: program,\n            label: \"programs\",\n            onChange: e => changeProgram(e.target.value),\n            children: programs === null || programs === void 0 ? void 0 : programs.map(program => /*#__PURE__*/_jsx(MenuItem, {\n              value: program.id,\n              children: program.name\n            }, program.id))\n          })]\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        md: 2,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"demo-simple-select-label\",\n            children: \"\\u0627\\u0644\\u0633\\u0646\\u0629\"\n          }), /*#__PURE__*/_jsx(Select, {\n            labelId: \"demo-simple-select-label\",\n            id: \"demo-simple-select\",\n            value: eduYear,\n            label: \"specYears\",\n            onChange: e => changeEduYear(e.target.value),\n            children: eduYears.map(spYear => /*#__PURE__*/_jsx(MenuItem, {\n              value: spYear.id,\n              children: spYear.year\n            }, spYear.id))\n          })]\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        md: 2,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          size: \"small\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"demo-simple-select-label\",\n            children: \"\\u0627\\u0644\\u0645\\u0642\\u0631\\u0651\\u0631\"\n          }), /*#__PURE__*/_jsx(Select, {\n            disabled: loadCourses,\n            labelId: \"demo-simple-select-label\",\n            id: \"demo-simple-select\",\n            value: course,\n            label: \"courses\",\n            onChange: e => changeCourse(e.target.value),\n            children: courses.map(course => /*#__PURE__*/_jsx(MenuItem, {\n              value: course.id,\n              children: course.ar_name\n            }, course.id))\n          })]\n        })\n      }), /*#__PURE__*/_jsx(GridItem, {\n        md: 2,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          size: \"small\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"demo-simple-select-label\",\n            children: \"\\u0646\\u0648\\u0639 \\u0627\\u0644\\u0648\\u0627\\u0642\\u0639\\u0629\"\n          }), /*#__PURE__*/_jsx(Select, {\n            disabled: loadExamsType,\n            labelId: \"demo-simple-select-label\",\n            id: \"demo-simple-select\",\n            value: examType,\n            label: \"examTypes\",\n            onChange: e => changeExamType(e.target.value),\n            children: examsTypes.map(exam => /*#__PURE__*/_jsx(MenuItem, {\n              value: exam.id,\n              children: exam.name\n            }, exam.id))\n          })]\n        })\n      })]\n    }), renderPlans(plans)]\n  });\n};\n\nExamsList.auth = true;\nExamsList.layout = Admin;\nexport default ExamsList;","map":null,"metadata":{},"sourceType":"module"}