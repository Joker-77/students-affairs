{"ast":null,"code":"import apiConnector from \"./TokenizedApiClient\";\nexport default class CertificateService {\n  static async GetAll(id) {\n    const listUrl = process.env.LIST_CERTIFICATE_URL;\n    return await apiConnector.get(`${listUrl}?candidate_id=${id}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Add(payload) {\n    const addUrl = process.env.ADD_CERTIFICATE_URL;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Edit(payload) {\n    const editUrl = process.env.EDIT_CERTIFICATE_URL;\n    return await apiConnector.post(editUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Get() {\n    const detailUrl = process.env.DETAILS_CERTIFICATE_URL;\n    return await apiConnector.get(detailUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n}","map":{"version":3,"sources":["F:/StudentAffairs/students/students/Services/CertificateService.tsx"],"names":["apiConnector","CertificateService","GetAll","id","listUrl","process","env","LIST_CERTIFICATE_URL","get","then","response","data","success","result","catch","error","console","log","Add","payload","addUrl","ADD_CERTIFICATE_URL","post","Edit","editUrl","EDIT_CERTIFICATE_URL","Get","detailUrl","DETAILS_CERTIFICATE_URL"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,sBAAzB;AAGA,eAAe,MAAMC,kBAAN,CAAyB;AACtC,eAAaC,MAAb,CAAoBC,EAApB,EAA8C;AAC5C,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA5B;AACA,WAAO,MAAMP,YAAY,CACtBQ,GADU,CACL,GAAEJ,OAAQ,iBAAgBD,EAAG,EADxB,EAEVM,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAED,eAAaG,GAAb,CAAiBC,OAAjB,EAAgD;AAC9C,UAAMC,MAAM,GAAGf,OAAO,CAACC,GAAR,CAAYe,mBAA3B;AACA,WAAO,MAAMrB,YAAY,CACtBsB,IADU,CACLF,MADK,EACGD,OADH,EAEVV,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAEC,eAAaQ,IAAb,CAAkBJ,OAAlB,EAAiD;AAC/C,UAAMK,OAAO,GAAGnB,OAAO,CAACC,GAAR,CAAYmB,oBAA5B;AACA,WAAO,MAAMzB,YAAY,CACtBsB,IADU,CACLE,OADK,EACIL,OADJ,EAEVV,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAEH,eAAaW,GAAb,GAAyC;AACvC,UAAMC,SAAS,GAAGtB,OAAO,CAACC,GAAR,CAAYsB,uBAA9B;AACA,WAAO,MAAM5B,YAAY,CACtBQ,GADU,CACNmB,SADM,EAEVlB,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AA/DqC","sourcesContent":["import apiConnector from \"./TokenizedApiClient\";\r\nimport { ApiResponse } from \"../Models/ApiResponse/ApiResponse\";\r\n\r\nexport default class CertificateService {\r\n  static async GetAll(id): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_CERTIFICATE_URL as string;\r\n    return await apiConnector\r\n      .get(`${listUrl}?candidate_id=${id}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async Add(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.ADD_CERTIFICATE_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n    static async Edit(payload): Promise<ApiResponse> {\r\n      const editUrl = process.env.EDIT_CERTIFICATE_URL as string;\r\n      return await apiConnector\r\n        .post(editUrl, payload)\r\n        .then((response) => {\r\n          if (response.data.success) {\r\n            let result = response.data;\r\n            return result;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Api Error:\", error);\r\n          throw error;\r\n        });\r\n    }\r\n\r\n  static async Get(): Promise<ApiResponse> {\r\n    const detailUrl = process.env.DETAILS_CERTIFICATE_URL as string;\r\n    return await apiConnector\r\n      .get(detailUrl)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}