{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\StudentAffairs\\\\students\\\\students\\\\pages\\\\students_affairs\\\\affairs_officer\\\\candidates\\\\certificates-list.tsx\";\nimport React, { useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport CertificateService from \"../../../../Services/CertificateService\";\nimport AddCertificateModal from \"../../../../components/Modals/AddCertificateModal\";\nimport * as Yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\n\nconst CertificateList = ({}) => {\n  var _router$query;\n\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const router = useRouter();\n  const candidateId = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id;\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [selectedCertificate, setSelectedCertificate] = React.useState(0);\n  const [initAddCertificate, setInitAddCertificate] = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  });\n  const AddCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n  const UpdateCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n\n  const submitAddCertificate = async (values, setSubmitting) => {\n    setSubmitting(true);\n    CertificateService.Add(values).then(res => {\n      console.log(\"Certificate\", res);\n      const CertificateCopy = [res.result, ...Certificates];\n      setCertificates(CertificateCopy);\n      setOpen(false);\n    }).catch(error => {\n      console.error(\"error\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Data ****************************/\n\n\n  useEffect(() => {\n    CertificateService.GetAll(candidateId).then(res => {\n      console.log(\"Certificate\", res);\n      setCertificates(res.result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  /************************** Finish Data ****************************/\n\n  /************************** Handle edit data ****************************/\n\n  const [openUpdateCertificate, setOpenUpdateCertificate] = React.useState(false);\n  const [openModalForDetails, setOpenModalForDetails] = React.useState(false);\n\n  const handleOpenUpdateCertificate = data => {\n    console.log(\"data\", data);\n    setInitUpdateCertificate({\n      id: data.id,\n      type: data.type,\n      year: data.year,\n      result: data.result,\n      city: data.city,\n      details: data.details,\n      round: data.round,\n      subscription_number: data.subscription_number,\n      candidate_id: data.candidate_id\n    });\n    setOpenUpdateCertificate(true);\n  };\n\n  const handleCloseUpdateCertificate = () => {\n    setOpenModalForDetails(false);\n    setDisabled(false);\n    setOpenUpdateCertificate(false);\n  };\n\n  const [initUpdateCertificate, setInitUpdateCertificate] = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  });\n\n  const submitUpdateCertificate = async (values, setSubmitting) => {\n    setSubmitting(true);\n    console.log(\"values\", values);\n    CertificateService.Edit(values).then(res => {\n      console.log(\"Certificate\", res);\n      const CertificateCopy = [...Certificates].map(item => item.id == res.result.id ? res.result : item);\n      setCertificates(CertificateCopy);\n      setOpenUpdateCertificate(false);\n    }).catch(error => {\n      console.error(\"roles\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Finish Handle edit data ****************************/\n\n\n  const [disabled, setDisabled] = React.useState(false);\n\n  const handleDetails = data => {\n    setOpenModalForDetails(true);\n    setDisabled(true);\n    handleOpenUpdateCertificate(data);\n  };\n\n  const [Certificates, setCertificates] = React.useState(null);\n\n  const renderCertificate = () => {\n    if (Certificates != null && Certificates.length > 0) {\n      let columns = [{\n        title: translate(\"Id\"),\n        field: \"id\",\n        hidden: true\n      }, {\n        title: translate(\"Type\"),\n        field: \"type\"\n      }, {\n        title: translate(\"Year\"),\n        field: \"year\"\n      }, {\n        title: translate(\"Result\"),\n        field: \"result\"\n      }, {\n        title: translate(\"City\"),\n        field: \"city\"\n      }, {\n        title: translate(\"Round\"),\n        field: \"round\"\n      }, {\n        title: translate(\"Subscription number\"),\n        field: \"subscription_number\"\n      }];\n      let data = Certificates;\n      let options = {\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        maxBodyHeight: \"500px\"\n      };\n      return /*#__PURE__*/_jsxDEV(ActionTable, {\n        Title: translate(\"Certificate List\"),\n        Columns: columns,\n        Data: data,\n        Options: options,\n        Actions: [{\n          tooltip: translate(\"Certificate Details\"),\n          icon: \"details\",\n          onClick: (evt, data) => handleDetails(data)\n        } // {\n        //   tooltip: translate(\"Edit Certificate\"),\n        //   icon: \"edit\",\n        //   onClick: (evt, data) => handleOpenUpdateCertificate(data),\n        // },\n        ]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(Placeholder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GridItem, {\n      md: 12,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        disabled: false,\n        variant: \"contained\",\n        className: classes.submitBtn,\n        onClick: handleOpen,\n        children: translate(\"Add New Certificate\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), renderCertificate()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddCertificateModal, {\n      disabled: disabled,\n      title: translate(\"Add Certificate\"),\n      open: open,\n      formScheme: AddCertificateScheme,\n      handleClose: handleClose,\n      initValues: initAddCertificate,\n      submitForm: submitAddCertificate\n    }, \"addCertificate\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddCertificateModal, {\n      disabled: disabled,\n      title: !openModalForDetails ? translate(\"Update Certificate\") : translate(\"Certificate Details\"),\n      open: openUpdateCertificate,\n      formScheme: UpdateCertificateScheme,\n      handleClose: handleCloseUpdateCertificate,\n      initValues: initUpdateCertificate,\n      submitForm: submitUpdateCertificate\n    }, \"updateCertificate\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n\nCertificateList.auth = true;\nCertificateList.layout = Admin;\nexport default CertificateList;","map":{"version":3,"sources":["F:/StudentAffairs/students/students/pages/students_affairs/affairs_officer/candidates/certificates-list.tsx"],"names":["React","useEffect","Button","Admin","styles","makeStyles","GridContainer","GridItem","ActionTable","Placeholder","CertificateService","AddCertificateModal","Yup","useRouter","useTranslation","CertificateList","translate","useStyles","classes","router","candidateId","query","id","open","setOpen","useState","handleOpen","handleClose","selectedCertificate","setSelectedCertificate","initAddCertificate","setInitAddCertificate","type","year","result","city","details","round","subscription_number","candidate_id","AddCertificateScheme","object","shape","string","required","UpdateCertificateScheme","submitAddCertificate","values","setSubmitting","Add","then","res","console","log","CertificateCopy","Certificates","setCertificates","catch","error","finally","GetAll","openUpdateCertificate","setOpenUpdateCertificate","openModalForDetails","setOpenModalForDetails","handleOpenUpdateCertificate","data","setInitUpdateCertificate","handleCloseUpdateCertificate","setDisabled","initUpdateCertificate","submitUpdateCertificate","Edit","map","item","disabled","handleDetails","renderCertificate","length","columns","title","field","hidden","options","headerStyle","backgroundColor","color","fontWeight","filtering","paging","maxBodyHeight","tooltip","icon","onClick","evt","submitBtn","auth","layout"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Admin from \"../../../../layouts/Admin\";\r\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\r\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\r\nimport { ICertificateModel } from \"../../../../Models/ApiResponse/CertificateModel\";\r\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\r\nimport Placeholder from \"../../../../Utility/Placeholders\";\r\nimport CertificateService from \"../../../../Services/CertificateService\";\r\nimport AddCertificateModal from \"../../../../components/Modals/AddCertificateModal\";\r\nimport * as Yup from \"yup\";\r\nimport {useRouter} from \"next/router\";\r\nimport {useTranslation} from \"../../../../Utility/Translations/useTranslation\";\r\n\r\ninterface ICertificateListProps {}\r\nconst CertificateList: React.FC<ICertificateListProps> = ({}) => {\r\n  const {translate} = useTranslation();\r\n  const useStyles = makeStyles(styles);\r\n  const classes = useStyles();\r\n  const router = useRouter();\r\n  const candidateId = router.query?.id;\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const [selectedCertificate, setSelectedCertificate] = React.useState<number>(0);\r\n  const [initAddCertificate, setInitAddCertificate] = React.useState<ICertificateModel>({\r\n    id: 0,\r\n    type: \"\",\r\n    year: \"\",\r\n    result: \"\",\r\n    city: \"\",\r\n    details: [],\r\n    round: \"\",\r\n    subscription_number: \"\",\r\n    candidate_id: +candidateId\r\n  });\r\n  const AddCertificateScheme = Yup.object().shape({\r\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\r\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\r\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\r\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\r\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\r\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\r\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\")),\r\n  });\r\n  const UpdateCertificateScheme = Yup.object().shape({\r\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\r\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\r\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\r\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\r\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\r\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\r\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\")),\r\n  });\r\n  const submitAddCertificate = async (values: any, setSubmitting) => {\r\n    setSubmitting(true);\r\n    CertificateService.Add(values)\r\n        .then((res) => {\r\n          console.log(\"Certificate\", res);\r\n          const CertificateCopy = [res.result, ...Certificates];\r\n          setCertificates(CertificateCopy);\r\n          setOpen(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"error\", error);\r\n        })\r\n        .finally(() => {\r\n          setSubmitting(false);\r\n        });\r\n  };\r\n\r\n  /************************** Data ****************************/\r\n  useEffect(() => {\r\n    CertificateService.GetAll(candidateId)\r\n      .then((res) => {\r\n        console.log(\"Certificate\", res);\r\n        setCertificates(res.result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"error\", error);\r\n      });\r\n  }, []);\r\n  /************************** Finish Data ****************************/\r\n  /************************** Handle edit data ****************************/\r\n\r\n  const [openUpdateCertificate, setOpenUpdateCertificate] = React.useState(false);\r\n  const [openModalForDetails, setOpenModalForDetails] = React.useState(false);\r\n  const handleOpenUpdateCertificate = (data: ICertificateModel) => {\r\n    console.log(\"data\", data);\r\n    setInitUpdateCertificate({\r\n      id: data.id,\r\n      type: data.type,\r\n      year: data.year,\r\n      result: data.result,\r\n      city: data.city,\r\n      details: data.details,\r\n      round: data.round,\r\n      subscription_number: data.subscription_number,\r\n      candidate_id: data.candidate_id\r\n    } as ICertificateModel);\r\n    setOpenUpdateCertificate(true);\r\n  };\r\n  const handleCloseUpdateCertificate = () => {\r\n    setOpenModalForDetails(false);\r\n    setDisabled(false);\r\n    setOpenUpdateCertificate(false);\r\n  };\r\n  const [initUpdateCertificate, setInitUpdateCertificate] = React.useState<ICertificateModel>({\r\n    id: 0,\r\n    type: \"\",\r\n    year: \"\",\r\n    result: \"\",\r\n    city: \"\",\r\n    details: [],\r\n    round: \"\",\r\n    subscription_number: \"\",\r\n    candidate_id: +candidateId\r\n  });\r\n\r\n  const submitUpdateCertificate = async (values: any, setSubmitting) => {\r\n    setSubmitting(true);\r\n    console.log(\"values\", values);\r\n    CertificateService.Edit(values)\r\n        .then((res) => {\r\n          console.log(\"Certificate\", res);\r\n          const CertificateCopy = [...Certificates].map(item => item.id == res.result.id ? res.result : item);\r\n          setCertificates(CertificateCopy);\r\n          setOpenUpdateCertificate(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"roles\", error);\r\n        })\r\n        .finally(() => {\r\n          setSubmitting(false);\r\n        });\r\n  };\r\n\r\n  /************************** Finish Handle edit data ****************************/\r\n  const [disabled, setDisabled] = React.useState<boolean>(false);\r\n  const handleDetails = (data: any) => {\r\n    setOpenModalForDetails(true);\r\n    setDisabled(true);\r\n    handleOpenUpdateCertificate(data);\r\n  };\r\n\r\n  const [Certificates, setCertificates] = React.useState<ICertificateModel[]>(null);\r\n  const renderCertificate = () => {\r\n    if (Certificates != null && Certificates.length > 0) {\r\n      let columns = [\r\n        {\r\n          title: translate(\"Id\"),\r\n          field: \"id\",\r\n          hidden: true,\r\n        },\r\n        {\r\n          title: translate(\"Type\"),\r\n          field: \"type\",\r\n        },\r\n        {\r\n          title: translate(\"Year\"),\r\n          field: \"year\",\r\n        },\r\n        {\r\n          title: translate(\"Result\"),\r\n          field: \"result\",\r\n        },\r\n        {\r\n          title: translate(\"City\"),\r\n          field: \"city\",\r\n        },\r\n        {\r\n          title: translate(\"Round\"),\r\n          field: \"round\",\r\n        },\r\n        {\r\n          title: translate(\"Subscription number\"),\r\n          field: \"subscription_number\",\r\n        },\r\n      ];\r\n      let data = Certificates;\r\n      let options = {\r\n        headerStyle: {\r\n          backgroundColor: \"#01579b\",\r\n          color: \"#FFF\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        filtering: false,\r\n        paging: true,\r\n        maxBodyHeight: \"500px\",\r\n      };\r\n      return (\r\n        <ActionTable\r\n          Title={translate(\"Certificate List\")}\r\n          Columns={columns}\r\n          Data={data}\r\n          Options={options}\r\n          Actions={[\r\n            {\r\n              tooltip: translate(\"Certificate Details\"),\r\n              icon: \"details\",\r\n              onClick: (evt, data) => handleDetails(data),\r\n            },\r\n            // {\r\n            //   tooltip: translate(\"Edit Certificate\"),\r\n            //   icon: \"edit\",\r\n            //   onClick: (evt, data) => handleOpenUpdateCertificate(data),\r\n            // },\r\n          ]}\r\n        />\r\n      );\r\n    } else return <Placeholder />;\r\n  };\r\n  return (\r\n    <GridContainer>\r\n      <GridItem md={12}>\r\n        <Button\r\n          disabled={false}\r\n          variant=\"contained\"\r\n          className={classes.submitBtn}\r\n          onClick={handleOpen}\r\n        >\r\n          {translate(\"Add New Certificate\")}\r\n        </Button>\r\n        {renderCertificate()}\r\n      </GridItem>\r\n      <AddCertificateModal\r\n        disabled={disabled}\r\n        key={\"addCertificate\"}\r\n        title={translate(\"Add Certificate\")}\r\n        open={open}\r\n        formScheme={AddCertificateScheme}\r\n        handleClose={handleClose}\r\n        initValues={initAddCertificate}\r\n        submitForm={submitAddCertificate}\r\n      ></AddCertificateModal>\r\n      <AddCertificateModal\r\n        disabled={disabled}\r\n        key={\"updateCertificate\"}\r\n        title={!openModalForDetails ? translate(\"Update Certificate\") : translate(\"Certificate Details\")}\r\n        open={openUpdateCertificate}\r\n        formScheme={UpdateCertificateScheme}\r\n        handleClose={handleCloseUpdateCertificate}\r\n        initValues={initUpdateCertificate}\r\n        submitForm={submitUpdateCertificate}\r\n      ></AddCertificateModal>\r\n    </GridContainer>\r\n  );\r\n};\r\n(CertificateList as any).auth = true;\r\n(CertificateList as any).layout = Admin;\r\nexport default CertificateList;\r\n"]},"metadata":{},"sourceType":"module"}