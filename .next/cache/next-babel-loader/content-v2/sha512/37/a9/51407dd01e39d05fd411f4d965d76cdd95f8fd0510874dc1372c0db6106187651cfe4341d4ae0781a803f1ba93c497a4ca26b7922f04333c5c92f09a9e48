{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { setLayout, clearSessionKey, collapseMenu, collapseToggle, navCollapseLeave, navContentLeave, setMessage, setSessionKey, updateProfile, lockScreen, setDirection, setCandidate } from \"../actions/actions\";\nconst initialState = {\n  isOpen: [],\n  //for active default menu\n  isTrigger: [],\n  //for active default menu, set blank for horizontal\n  collapseMenu: false,\n  isLocked: false,\n  // Lock all screens for protection against abuse\n  // ...config,\n  rememberMe: false,\n  //\n  sessionKey: \"\",\n  userProfile: null,\n  layout: \"page\",\n  direction: \"ltr\",\n  message: {\n    Content: \"\",\n    Type: 0\n  },\n  // 0 is confirmation 1 is error 2 is warning\n  candidate: null\n};\nexport const reducer = createReducer(initialState, builder => {\n  builder.addCase(setSessionKey, (state, action) => {\n    state.sessionKey = action.payload;\n  }).addCase(clearSessionKey, state => {\n    state.sessionKey = \"\", state.rememberMe = false;\n  }).addCase(setMessage, (state, action) => {\n    state.message = action.payload;\n  }).addCase(updateProfile, (state, action) => {\n    state.userProfile = action.payload;\n  }).addCase(collapseMenu, (state, action) => {\n    state.collapseMenu = !action.payload;\n  }).addCase(collapseToggle, (state, action) => {\n    let trigger = [];\n    let open = [];\n\n    if (action.payload.menu.type === \"sub\") {\n      open = state.isOpen;\n      trigger = state.isTrigger;\n      const triggerIndex = trigger.indexOf(action.payload.menu.id);\n\n      if (triggerIndex > -1) {\n        open = open.filter(item => item !== action.payload.menu.id);\n        trigger = trigger.filter(item => item !== action.payload.menu.id);\n      }\n\n      if (triggerIndex === -1) {\n        open = [...open, action.payload.menu.id];\n        trigger = [...trigger, action.payload.menu.id];\n      }\n    } else {\n      open = state.isOpen;\n      const triggerIndex = state.isTrigger.indexOf(action.payload.menu.id);\n      trigger = triggerIndex === -1 ? [action.payload.menu.id] : [];\n      open = triggerIndex === -1 ? [action.payload.menu.id] : [];\n    }\n\n    state.isOpen = open;\n    state.isTrigger = trigger;\n  }).addCase(navContentLeave, (state, action) => {\n    let trigger = [];\n    let open = [];\n    state.isOpen = open;\n    state.isTrigger = trigger;\n  }).addCase(navCollapseLeave, (state, action) => {\n    let trigger = [];\n    let open = [];\n\n    if (action.payload.menu.type === \"sub\") {\n      open = state.isOpen;\n      trigger = state.isTrigger;\n      const triggerIndex = trigger.indexOf(action.payload.menu.id);\n\n      if (triggerIndex > -1) {\n        open = open.filter(item => item !== action.payload.menu.id);\n        trigger = trigger.filter(item => item !== action.payload.menu.id);\n      }\n\n      state.isOpen = open;\n      state.isTrigger = trigger;\n    }\n  }).addCase(setLayout, (state, action) => {\n    state.layout = action.payload;\n  }).addCase(lockScreen, (state, action) => {\n    state.isLocked = action.payload && !action.payload;\n  }).addCase(setDirection, (state, action) => {\n    state.direction = action.payload;\n  }).addCase(setCandidate, (state, action) => {\n    state.candidate = action.payload;\n  });\n});","map":null,"metadata":{},"sourceType":"module"}