{"ast":null,"code":"import apiConnector from \"./ApiClient\";\nexport default class ObservationService {\n  static async GetAll(date, employee_id, hall_id) {\n    const listUrl = process.env.LIST_OBSERVATIONS_URL;\n    return await apiConnector.get(`${listUrl}?date=${date}&employee_id=${employee_id}&hall_id=${hall_id}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async GetAvailableObservers(date, from, to) {\n    const listUrl = process.env.LIST_AVAILABLE_OBSERVERS_URL;\n    return await apiConnector.get(`${listUrl}?date=${date}&from=${from}&to=${to}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Add(payload) {\n    const addUrl = process.env.ADD_OBSERVATION_URL;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async Delete(payload) {\n    const deleteUrl = process.env.DELETE_OBSERVATION_URL;\n    return await apiConnector.post(deleteUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n}","map":{"version":3,"sources":["F:/StudentAffairs/students/students/Services/ObservationService.tsx"],"names":["apiConnector","ObservationService","GetAll","date","employee_id","hall_id","listUrl","process","env","LIST_OBSERVATIONS_URL","get","then","response","data","success","result","catch","error","console","log","GetAvailableObservers","from","to","LIST_AVAILABLE_OBSERVERS_URL","Add","payload","addUrl","ADD_OBSERVATION_URL","post","Delete","deleteUrl","DELETE_OBSERVATION_URL"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,aAAzB;AAGA,eAAe,MAAMC,kBAAN,CAAyB;AACtC,eAAaC,MAAb,CAAoBC,IAApB,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAsE;AACpE,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA5B;AACA,WAAO,MAAMT,YAAY,CACtBU,GADU,CACL,GAAEJ,OAAQ,SAAQH,IAAK,gBAAeC,WAAY,YAAWC,OAAQ,EADhE,EAEVM,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAED,eAAaG,qBAAb,CAAmCjB,IAAnC,EAAyCkB,IAAzC,EAA+CC,EAA/C,EAAyE;AACvE,UAAMhB,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYe,4BAA5B;AACA,WAAO,MAAMvB,YAAY,CACtBU,GADU,CACL,GAAEJ,OAAQ,SAAQH,IAAK,SAAQkB,IAAK,OAAMC,EAAG,EADxC,EAEVX,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAED,eAAaO,GAAb,CAAiBC,OAAjB,EAAgD;AAC9C,UAAMC,MAAM,GAAGnB,OAAO,CAACC,GAAR,CAAYmB,mBAA3B;AACA,WAAO,MAAM3B,YAAY,CACtB4B,IADU,CACLF,MADK,EACGD,OADH,EAEVd,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAED,eAAaY,MAAb,CAAoBJ,OAApB,EAAmD;AACjD,UAAMK,SAAS,GAAGvB,OAAO,CAACC,GAAR,CAAYuB,sBAA9B;AACA,WAAO,MAAM/B,YAAY,CACtB4B,IADU,CACLE,SADK,EACML,OADN,EAEVd,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AACA,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AA/DqC","sourcesContent":["import apiConnector from \"./ApiClient\";\r\nimport { ApiResponse } from \"../Models/ApiResponse/ApiResponse\";\r\n\r\nexport default class ObservationService {\r\n  static async GetAll(date, employee_id, hall_id): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_OBSERVATIONS_URL as string;\r\n    return await apiConnector\r\n      .get(`${listUrl}?date=${date}&employee_id=${employee_id}&hall_id=${hall_id}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async GetAvailableObservers(date, from, to): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_AVAILABLE_OBSERVERS_URL as string;\r\n    return await apiConnector\r\n      .get(`${listUrl}?date=${date}&from=${from}&to=${to}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async Add(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.ADD_OBSERVATION_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static async Delete(payload): Promise<ApiResponse> {\r\n    const deleteUrl = process.env.DELETE_OBSERVATION_URL as string;\r\n    return await apiConnector\r\n      .post(deleteUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api Error:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}