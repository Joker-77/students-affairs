{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport React, { useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport CertificateService from \"../../../../Services/CertificateService\";\nimport AddCertificateModal from \"../../../../components/Modals/AddCertificateModal\";\nimport * as Yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\n\nvar CertificateList = function CertificateList(_ref) {\n  var _router$query;\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useTranslation = useTranslation(),\n      translate = _useTranslation.translate;\n\n  var useStyles = makeStyles(styles);\n  var classes = useStyles();\n  var router = useRouter();\n  var candidateId = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedCertificate = _React$useState4[0],\n      setSelectedCertificate = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      initAddCertificate = _React$useState6[0],\n      setInitAddCertificate = _React$useState6[1];\n\n  var AddCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n  var UpdateCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n\n  var submitAddCertificate = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, setSubmitting) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting(true);\n              CertificateService.Add(values).then(function (res) {\n                console.log(\"Certificate\", res);\n                var CertificateCopy = [res.result].concat(_toConsumableArray(Certificates));\n                setCertificates(CertificateCopy);\n                setOpen(false);\n              }).catch(function (error) {\n                console.error(\"error\", error);\n              }).finally(function () {\n                setSubmitting(false);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitAddCertificate(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /************************** Data ****************************/\n\n\n  useEffect(function () {\n    CertificateService.GetAll(candidateId).then(function (res) {\n      console.log(\"Certificate\", res);\n      setCertificates(res.result);\n    }).catch(function (error) {\n      console.error(\"error\", error);\n    });\n  }, []);\n  /************************** Finish Data ****************************/\n\n  /************************** Handle edit data ****************************/\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      openUpdateCertificate = _React$useState8[0],\n      setOpenUpdateCertificate = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      openModalForDetails = _React$useState10[0],\n      setOpenModalForDetails = _React$useState10[1];\n\n  var handleOpenUpdateCertificate = function handleOpenUpdateCertificate(data) {\n    console.log(\"data\", data);\n    setInitUpdateCertificate({\n      id: data.id,\n      type: data.type,\n      year: data.year,\n      result: data.result,\n      city: data.city,\n      details: data.details,\n      round: data.round,\n      subscription_number: data.subscription_number,\n      candidate_id: data.candidate_id\n    });\n    setOpenUpdateCertificate(true);\n  };\n\n  var handleCloseUpdateCertificate = function handleCloseUpdateCertificate() {\n    setOpenModalForDetails(false);\n    setDisabled(false);\n    setOpenUpdateCertificate(false);\n  };\n\n  var _React$useState11 = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      initUpdateCertificate = _React$useState12[0],\n      setInitUpdateCertificate = _React$useState12[1];\n\n  var submitUpdateCertificate = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, setSubmitting) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setSubmitting(true);\n              console.log(\"values\", values);\n              CertificateService.Edit(values).then(function (res) {\n                console.log(\"Certificate\", res);\n\n                var CertificateCopy = _toConsumableArray(Certificates).map(function (item) {\n                  return item.id == res.result.id ? res.result : item;\n                });\n\n                setCertificates(CertificateCopy);\n                setOpenUpdateCertificate(false);\n              }).catch(function (error) {\n                console.error(\"roles\", error);\n              }).finally(function () {\n                setSubmitting(false);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function submitUpdateCertificate(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /************************** Finish Handle edit data ****************************/\n\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      disabled = _React$useState14[0],\n      setDisabled = _React$useState14[1];\n\n  var handleDetails = function handleDetails(data) {\n    setOpenModalForDetails(true);\n    setDisabled(true);\n    handleOpenUpdateCertificate(data);\n  };\n\n  var _React$useState15 = React.useState(null),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      Certificates = _React$useState16[0],\n      setCertificates = _React$useState16[1];\n\n  var renderCertificate = function renderCertificate() {\n    if (Certificates != null && Certificates.length > 0) {\n      var columns = [{\n        title: translate(\"Id\"),\n        field: \"id\",\n        hidden: true\n      }, {\n        title: translate(\"Type\"),\n        field: \"type\"\n      }, {\n        title: translate(\"Year\"),\n        field: \"year\"\n      }, {\n        title: translate(\"Result\"),\n        field: \"result\"\n      }, {\n        title: translate(\"City\"),\n        field: \"city\"\n      }, {\n        title: translate(\"Round\"),\n        field: \"round\"\n      }, {\n        title: translate(\"Subscription number\"),\n        field: \"subscription_number\"\n      }];\n      var data = Certificates;\n      var options = {\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        maxBodyHeight: \"500px\"\n      };\n      return /*#__PURE__*/_jsx(ActionTable, {\n        Title: translate(\"Certificate List\"),\n        Columns: columns,\n        Data: data,\n        Options: options,\n        Actions: [{\n          tooltip: translate(\"Certificate Details\"),\n          icon: \"details\",\n          onClick: function onClick(evt, data) {\n            return handleDetails(data);\n          }\n        } // {\n        //   tooltip: translate(\"Edit Certificate\"),\n        //   icon: \"edit\",\n        //   onClick: (evt, data) => handleOpenUpdateCertificate(data),\n        // },\n        ]\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {});\n  };\n\n  return /*#__PURE__*/_jsxs(GridContainer, {\n    children: [/*#__PURE__*/_jsxs(GridItem, {\n      md: 12,\n      children: [/*#__PURE__*/_jsx(Button, {\n        disabled: false,\n        variant: \"contained\",\n        className: classes.submitBtn,\n        onClick: handleOpen,\n        children: translate(\"Add New Certificate\")\n      }), renderCertificate()]\n    }), /*#__PURE__*/_jsx(AddCertificateModal, {\n      disabled: disabled,\n      title: translate(\"Add Certificate\"),\n      open: open,\n      formScheme: AddCertificateScheme,\n      handleClose: handleClose,\n      initValues: initAddCertificate,\n      submitForm: submitAddCertificate\n    }, \"addCertificate\"), /*#__PURE__*/_jsx(AddCertificateModal, {\n      disabled: disabled,\n      title: !openModalForDetails ? translate(\"Update Certificate\") : translate(\"Certificate Details\"),\n      open: openUpdateCertificate,\n      formScheme: UpdateCertificateScheme,\n      handleClose: handleCloseUpdateCertificate,\n      initValues: initUpdateCertificate,\n      submitForm: submitUpdateCertificate\n    }, \"updateCertificate\")]\n  });\n};\n\nCertificateList.auth = true;\nCertificateList.layout = Admin;\nexport default CertificateList;","map":null,"metadata":{},"sourceType":"module"}