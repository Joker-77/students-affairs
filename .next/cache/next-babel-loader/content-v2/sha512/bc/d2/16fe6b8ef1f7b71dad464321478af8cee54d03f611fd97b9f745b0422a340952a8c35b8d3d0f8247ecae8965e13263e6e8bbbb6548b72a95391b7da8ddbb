{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Select, MenuItem, FormControl, InputLabel, TextField, InputAdornment, OutlinedInput, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Accordion, Typography, AccordionDetails, Checkbox } from \"@material-ui/core\";\nimport { FilterList, Sort, Search, Print, AddBox, Description } from \"@material-ui/icons\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport ObserverService from \"../../../../Services/ObserverService\";\nimport SuiButton from \"../../../../components/SuiButton\";\nimport ObserverDetails from \"./observer-details\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { useReactToPrint } from \"react-to-print\";\nimport _ from \"lodash\";\n\nconst ObserversList = () => {\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const router = useRouter();\n  const [showObserverDetail, setshowObserverDetail] = React.useState(false);\n  const [observer, setObserver] = React.useState();\n\n  const setShow = () => {\n    setshowObserverDetail(!showObserverDetail);\n  };\n\n  const activateEdit = () => {\n    setIsEditable(!isEditable);\n  };\n\n  const getObserver = data => {\n    let _observer = Observers.find((item, index) => item.id === (data === null || data === void 0 ? void 0 : data.id));\n\n    ObserverService.Get(data.id).then(res => {\n      let _observer = res.result;\n      setObserver(_observer);\n      console.log(_observer);\n      setIsCreate(false);\n      setIsEditable(false);\n      setshowObserverDetail(true);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  };\n\n  const {\n    0: levels,\n    1: setLevels\n  } = useState([]);\n  const {\n    0: activities,\n    1: setActivities\n  } = useState([]);\n  useEffect(() => {\n    ObserverService.GetLevels().then(res => {\n      console.log(\"Levels\", res.result);\n      setLevels(res.result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n    ObserverService.GetActivities().then(res => {\n      console.log(\"activities\", res.result);\n      setActivities(res.result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  const {\n    0: isCreate,\n    1: setIsCreate\n  } = useState(true);\n\n  const handleCreate = () => {\n    setObserver(null);\n    setIsCreate(true);\n    setIsEditable(true);\n    setshowObserverDetail(true);\n  };\n\n  const handleClose = () => {\n    //setSearchResult(null);\n    setshowObserverDetail(false);\n  };\n  /********************** Filter && Sort *********/\n\n\n  const inputLabel = React.useRef(null);\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  React.useEffect(() => {\n    var _inputLabel$current;\n\n    setLabelWidth(inputLabel === null || inputLabel === void 0 ? void 0 : (_inputLabel$current = inputLabel.current) === null || _inputLabel$current === void 0 ? void 0 : _inputLabel$current.offsetWidth);\n  }, []);\n  const inputSortLabel = React.useRef(null);\n  const [sortLabelWidth, setSortLabelWidth] = React.useState(0);\n  React.useEffect(() => {\n    var _inputSortLabel$curre;\n\n    setSortLabelWidth(inputSortLabel === null || inputSortLabel === void 0 ? void 0 : (_inputSortLabel$curre = inputSortLabel.current) === null || _inputSortLabel$curre === void 0 ? void 0 : _inputSortLabel$curre.offsetWidth);\n  }, []);\n  const filters = [{\n    value: 0,\n    label: translate(\"None\")\n  }, {\n    value: \"1\",\n    label: translate(\"Name\")\n  }, {\n    value: \"2\",\n    label: translate(\"ID Number\")\n  }, {\n    value: \"3\",\n    label: translate(\"Activity\")\n  }, {\n    value: \"4\",\n    label: translate(\"Functional Body\")\n  }\n  /*{\r\n    value: \"5\",\r\n    label: translate(\"Excluded\"),\r\n  },*/\n  ];\n  const [isExcluded, setExcluded] = React.useState(false);\n\n  const handleChangeExcluded = event => {\n    setExcluded(!isExcluded); //filterData();\n  };\n\n  const [Observers, setObservers] = React.useState(null);\n  const [filteredObservers, setFilteredObservers] = React.useState(null);\n  const [filter, setFilter] = React.useState(0);\n  const [search, setSearch] = React.useState(\"\");\n\n  const filterData = () => {\n    let _filteredObservers = Observers;\n    let _value = search;\n\n    if (_filteredObservers != null) {\n      if (filter == 0) {\n        _filteredObservers = Observers.filter((observer, index) => {\n          var _observer$number;\n\n          let level = levels.find(level => level.id == (observer === null || observer === void 0 ? void 0 : observer.level_id)).name;\n          let activity = activities.find(activity => activity.id == (observer === null || observer === void 0 ? void 0 : observer.activity_id)).name;\n          return (observer === null || observer === void 0 ? void 0 : observer.first_name.includes(_value)) || (observer === null || observer === void 0 ? void 0 : observer.last_name.includes(_value)) || (observer === null || observer === void 0 ? void 0 : (_observer$number = observer.number) === null || _observer$number === void 0 ? void 0 : _observer$number.toString().includes(_value)) || activity.includes(_value) || level.includes(_value);\n        }); //setFilteredObservers(_filteredObservers);\n      }\n\n      if (filter == 1) {\n        _filteredObservers = Observers.filter((observer, index) => {\n          return (observer === null || observer === void 0 ? void 0 : observer.first_name.includes(_value)) || (observer === null || observer === void 0 ? void 0 : observer.last_name.includes(_value));\n        }); //setFilteredObservers(_filteredObservers);\n      }\n\n      if (filter == 2) {\n        _filteredObservers = Observers.filter((observer, index) => {\n          return observer === null || observer === void 0 ? void 0 : observer.number.toString().includes(_value);\n        }); //setFilteredObservers(_filteredObservers);\n      }\n\n      if (filter == 3) {\n        _filteredObservers = Observers.filter((observer, index) => {\n          let activity = activities.find(activity => activity.id == (observer === null || observer === void 0 ? void 0 : observer.activity_id)).name;\n          return activity.includes(_value);\n        }); //setFilteredObservers(_filteredObservers);\n      }\n\n      if (filter == 4) {\n        _filteredObservers = Observers.filter((observer, index) => {\n          let level = levels.find(level => level.id == (observer === null || observer === void 0 ? void 0 : observer.level_id)).name;\n          return level.includes(_value);\n        }); //setFilteredObservers(_filteredObservers);\n      }\n\n      if (isExcluded) {\n        _filteredObservers = _filteredObservers.filter((observer, index) => {\n          return observer === null || observer === void 0 ? void 0 : observer.excluded;\n        });\n      }\n    }\n\n    setFilteredObservers(_filteredObservers);\n  };\n\n  const handleChangeFilter = event => {\n    setFilter(event.target.value); //filterData();\n  };\n\n  const handleSearch = event => {\n    var _event$target;\n\n    let _value = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n\n    setSearch(_value); //filterData();\n  };\n\n  useEffect(() => {\n    filterData();\n  }, [filter, search, isExcluded]);\n  const [sortBy, setSortBy] = React.useState(0);\n\n  const handleSortBy = event => {\n    var _event$target2;\n\n    let _value = event === null || event === void 0 ? void 0 : (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.value;\n\n    setSortBy(_value);\n    let _filteredObservers = Observers;\n\n    if (sortBy == 1) {\n      _filteredObservers = Observers.sort((a, b) => {\n        if (a.last_name > b.last_name) {\n          return 1;\n        } else if (a.last_name < b.last_name) {\n          return -1;\n        }\n\n        if (a.first_name > b.first_name) {\n          return 1;\n        } else if (a.first_name < b.first_name) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      setFilteredObservers(_filteredObservers);\n    }\n\n    if (sortBy == 2) {\n      _filteredObservers = Observers.sort((a, b) => {\n        if (parseInt(a.number, 10) > parseInt(b.number, 10)) {\n          return 1;\n        } else if (parseInt(a.number, 10) < parseInt(b.number, 10)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      setFilteredObservers(_filteredObservers);\n    }\n\n    if (sortBy == 3) {\n      _filteredObservers = Observers.sort((a, b) => {\n        let a_activity = activities.find(activity => activity.id == a.activity_id).name;\n        let b_activity = activities.find(activity => activity.id == b.activity_id).name;\n        if (a_activity > b_activity) return 1;\n        if (a_activity < b_activity) return -1;\n        return 0;\n      });\n      setFilteredObservers(_filteredObservers);\n    }\n\n    if (sortBy == 4) {\n      _filteredObservers = Observers.sort((a, b) => {\n        let a_level = levels.find(level => level.id == a.level_id).name;\n        let b_level = levels.find(level => level.id == b.level_id).name;\n        if (a_level > b_level) return 1;\n        if (a_level < b_level) return -1;\n        return 0;\n      });\n      setFilteredObservers(_filteredObservers);\n    }\n  };\n  /************************** Data ****************************/\n  //const [observersRefs, setObserversRefs] = React.useState([]);\n\n\n  useEffect(() => {\n    ObserverService.GetAll().then(res => {\n      console.log(\"Observers\", res.result);\n      setFilteredObservers(res.result);\n      setObservers(res.result); //setObserversRefs(Observers.map(observer => {return {id: observer.id, ref: useRef()};}));\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  useEffect(() => {\n    if (!showObserverDetail) {\n      ObserverService.GetAll().then(res => {\n        console.log(\"Observers\", res.result);\n        setFilteredObservers(res.result);\n        setObservers(res.result); //setObserversRefs(Observers.map(observer => {return {id: observer.id, ref: useRef()};}));\n      }).catch(error => {\n        console.error(\"error\", error);\n      });\n    }\n  }, [showObserverDetail]);\n  /************************** Finish Data ****************************/\n\n  /************************** Handle edit data ****************************/\n\n  const [isEditable, setIsEditable] = React.useState(true);\n  /************************** Finish Handle edit data ****************************/\n\n  /**************************  Handle Export data ****************************/\n\n  const [showExportColumns, setShowExportColumns] = React.useState(false);\n  let columns = [{\n    title: translate(\"Id\"),\n    field: \"id\",\n    hidden: true\n  }, {\n    title: translate(\"ID Number\"),\n    field: \"number\"\n  }, {\n    title: translate(\"Name\"),\n    field: \"printing_name\"\n  }, {\n    title: translate(\"Functional Body\"),\n    field: \"authority\"\n  }, {\n    title: translate(\"Activity\"),\n    field: \"activity\"\n  }, {\n    title: translate(\"Office Phone\"),\n    field: \"office_number\"\n  }, {\n    title: translate(\"Excluded\"),\n    field: \"is_excluded\"\n  }];\n  const {\n    0: checked,\n    1: setChecked\n  } = useState([]);\n  const {\n    0: selectedColumns,\n    1: setSelectedColumns\n  } = useState([]);\n\n  const handleCheck = event => {\n    var updatedList = [...checked];\n\n    if (event.target.checked) {\n      updatedList = [...checked, event.target.value];\n    } else {\n      updatedList.splice(checked.indexOf(event.target.value), 1);\n    }\n\n    setChecked(updatedList);\n    setSelectedColumns(columns.filter(item => {\n      return updatedList.includes(item.field);\n    }));\n  };\n\n  const csvOptions = {\n    fieldSeparator: \";\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    useBom: true,\n    useKeysAsHeaders: false,\n    headers: selectedColumns.map(c => c.title)\n  };\n  const csvExporter = new ExportToCsv(csvOptions);\n\n  const handleExportData = () => {\n    setShowExportColumns(!showExportColumns);\n  };\n\n  const generateExcel = () => {\n    csvExporter.generateCsv(filteredObservers.map((observer, idx) => {\n      let object = {};\n      selectedColumns.forEach((item, index) => {\n        var _$get;\n\n        if (item.field === 'full_name') _.set(object, 'full_name', `${observer.nick_name} ${observer.first_name} ${observer.last_name}`); //else if (item.field === 'office_phone')\n        //_.set(object, 'office_phone', observer.person.phones.find(phone => phone.type === \"office\")?.phone ?? \"\");\n        else if (item.field === 'is_excluded') _.set(object, 'is_excluded', observer.excluded == 0 ? translate(\"No\") : translate(\"Yes\"));else if (item.field === 'authority') _.set(object, 'authority', levels.find(level => level.id == observer.level_id).name);else if (item.field === 'activity') _.set(object, 'activity', activities.find(activity => activity.id == observer.activity_id).name);else _.set(object, `col ${index}`, (_$get = _.get(observer, item.field)) !== null && _$get !== void 0 ? _$get : \"\");\n      });\n      console.log(object);\n      return object;\n    }));\n  };\n  /************************** Finish Handle Export Data ****************************/\n\n\n  const [confirm, setConfirm] = React.useState(false);\n  const [deleteObserver, setDeleteObserver] = React.useState(false);\n\n  const handleConfirmOpen = () => {\n    setConfirm(true);\n  };\n\n  const handleConfirmClose = () => {\n    setConfirm(false);\n  };\n\n  const handleDeleteObserver = () => {};\n\n  const ConfirmDialog = () => /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsxs(Dialog, {\n      open: confirm,\n      onClose: handleConfirmClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsx(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: translate(\"Delete a observer\")\n      }), /*#__PURE__*/_jsx(DialogContent, {\n        children: /*#__PURE__*/_jsx(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: translate(\"Are you sure you want to delete this observer\")\n        })\n      }), /*#__PURE__*/_jsxs(DialogActions, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: handleDeleteObserver,\n          children: translate(\"Yes\")\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: handleConfirmClose,\n          autoFocus: true,\n          children: translate(\"No\")\n        })]\n      })]\n    })\n  });\n  /************************** Handle Delete Observer ****************************/\n\n\n  const tableRef = useRef();\n  const generatePDF = useReactToPrint({\n    content: () => tableRef.current,\n    documentTitle: translate(\"Observers\")\n  });\n\n  const renderObservers = () => {\n    if (filteredObservers != null && filteredObservers.length > 0) {\n      let data = filteredObservers;\n      let options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        pageSize: 10,\n        maxBodyHeight: \"500px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      let actions = [{\n        icon: () => /*#__PURE__*/_jsx(SuiButton, {\n          style: {\n            minWidth: 140,\n            width: 140\n          },\n          color: \"primary\",\n          children: translate(\"Observer Details\")\n        }),\n        onClick: (evt, data) => getObserver(data)\n      }, {\n        icon: () => /*#__PURE__*/_jsx(SuiButton, {\n          style: {\n            minWidth: 140,\n            width: 140\n          },\n          color: \"primary\",\n          children: translate(\"Observing Assignments\")\n        }),\n        onClick: (evt, data) => {}\n      }];\n      return /*#__PURE__*/_jsx(\"div\", {\n        ref: tableRef,\n        children: /*#__PURE__*/_jsx(ActionTable, {\n          Title: translate(\"Observers List\"),\n          Columns: columns,\n          Data: data.map(item => {\n            var _levels$find, _activities$find;\n\n            return _objectSpread(_objectSpread({}, item), {}, {\n              //full_name: `${item.nick_name} ${item.first_name} ${item.last_name}`,\n              is_excluded: item.excluded == 0 ? translate(\"No\") : translate(\"Yes\"),\n              authority: levels === null || levels === void 0 ? void 0 : (_levels$find = levels.find(level => level.id == item.level_id)) === null || _levels$find === void 0 ? void 0 : _levels$find.name,\n              activity: activities === null || activities === void 0 ? void 0 : (_activities$find = activities.find(activity => activity.id == item.activity_id)) === null || _activities$find === void 0 ? void 0 : _activities$find.name\n            });\n          }),\n          Options: options,\n          Actions: actions\n        })\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {\n      loading: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(GridContainer, {\n    children: [!showObserverDetail && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(GridItem, {\n        md: 12,\n        children: [/*#__PURE__*/_jsxs(GridItem, {\n          container: true,\n          md: 12,\n          style: {\n            margin: \"0px 0px 10px 0\"\n          },\n          children: [/*#__PURE__*/_jsx(GridItem, {\n            md: 7\n          }), /*#__PURE__*/_jsxs(GridItem, {\n            children: [/*#__PURE__*/_jsxs(Button, {\n              style: {\n                margin: \"0px 5px\"\n              },\n              disabled: false,\n              variant: \"contained\",\n              className: classes.submitBtn,\n              onClick: generatePDF,\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  padding: \"0px 0px 0px 10px\"\n                },\n                children: translate(\"Print\")\n              }), /*#__PURE__*/_jsx(Print, {})]\n            }), /*#__PURE__*/_jsxs(Button, {\n              style: {\n                margin: \"0px 5px\"\n              },\n              disabled: false,\n              variant: \"contained\",\n              className: classes.submitBtn,\n              onClick: handleExportData,\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  padding: \"0px 0px 0px 10px\"\n                },\n                children: translate(\"Export to excel\")\n              }), /*#__PURE__*/_jsx(Description, {})]\n            }), /*#__PURE__*/_jsxs(Button, {\n              style: {\n                margin: \"0px 5px\"\n              },\n              disabled: false,\n              variant: \"contained\",\n              className: classes.submitBtn,\n              onClick: handleCreate,\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  padding: \"0px 0px 0px 10px\"\n                },\n                children: translate(\"Add New Observer\")\n              }), /*#__PURE__*/_jsx(AddBox, {})]\n            })]\n          })]\n        }), showExportColumns && /*#__PURE__*/_jsx(GridItem, {\n          children: /*#__PURE__*/_jsx(Accordion, {\n            children: /*#__PURE__*/_jsx(AccordionDetails, {\n              children: /*#__PURE__*/_jsxs(GridItem, {\n                container: true,\n                children: [/*#__PURE__*/_jsx(GridItem, {\n                  md: 12,\n                  style: {\n                    display: \"flex\",\n                    justifyContent: \"center\"\n                  },\n                  children: /*#__PURE__*/_jsx(Typography, {\n                    style: {\n                      backgroundColor: \"lightgray\",\n                      boxShadow: \"0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)\",\n                      padding: \"0em 1.2em\",\n                      margin: \"0em 0em .5em 0em\"\n                    },\n                    children: translate(\"Select Columns\")\n                  })\n                }), /*#__PURE__*/_jsxs(GridItem, {\n                  md: 12,\n                  children: [/*#__PURE__*/_jsx(GridItem, {\n                    className: \"list-container\",\n                    style: {\n                      display: \"flex\",\n                      justifyContent: \"space-between\"\n                    },\n                    children: columns // .filter((item) => !item.hidden)\n                    .map((item, index) => /*#__PURE__*/_jsxs(GridItem, {\n                      children: [/*#__PURE__*/_jsx(\"input\", {\n                        value: item.field,\n                        type: \"checkbox\",\n                        onChange: handleCheck,\n                        checked: checked.includes(item.field)\n                      }), /*#__PURE__*/_jsx(\"span\", {\n                        children: item.title\n                      })]\n                    }, index))\n                  }), /*#__PURE__*/_jsx(GridItem, {\n                    md: 12,\n                    style: {\n                      display: \"flex\",\n                      justifyContent: \"center\"\n                    },\n                    children: /*#__PURE__*/_jsxs(Button, {\n                      style: {\n                        margin: \"0px 5px\"\n                      },\n                      disabled: false,\n                      variant: \"contained\",\n                      className: classes.successText,\n                      onClick: generateExcel,\n                      children: [/*#__PURE__*/_jsx(\"span\", {\n                        style: {\n                          padding: \"0px 0px 0px 10px\"\n                        },\n                        children: translate(\"Export\")\n                      }), /*#__PURE__*/_jsx(Description, {})]\n                    })\n                  })]\n                })]\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(GridItem, {\n          style: {\n            marginBottom: \"1em\",\n            marginTop: \"2em\"\n          },\n          children: [/*#__PURE__*/_jsxs(FormControl, {\n            size: \"small\",\n            variant: \"outlined\",\n            style: {\n              minWidth: 150,\n              margin: \"0 0 0 1em\"\n            },\n            children: [/*#__PURE__*/_jsxs(InputLabel, {\n              style: {\n                display: \"flex\"\n              },\n              shrink: true,\n              ref: inputLabel,\n              htmlFor: \"outlined-filter\",\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: translate(\"Filter\")\n              }), /*#__PURE__*/_jsx(FilterList, {})]\n            }), /*#__PURE__*/_jsx(Select, {\n              id: \"select-filter\",\n              value: filter,\n              onChange: handleChangeFilter,\n              label: filters[filter].label,\n              input: /*#__PURE__*/_jsx(OutlinedInput, {\n                notched: true,\n                labelWidth: labelWidth,\n                name: \"filter\",\n                id: \"outlined-filter\"\n              }),\n              children: filters.map(option => /*#__PURE__*/_jsx(MenuItem, {\n                value: option.value,\n                children: option.label\n              }, option.value))\n            })]\n          }), /*#__PURE__*/_jsx(FormControl, {\n            children: /*#__PURE__*/_jsx(TextField, {\n              onKeyUp: handleSearch,\n              size: \"small\",\n              id: \"outlined-basic\",\n              label: \"\\u0628\\u062D\\u062B\",\n              variant: \"outlined\",\n              InputProps: {\n                startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                  position: \"start\",\n                  children: /*#__PURE__*/_jsx(Search, {})\n                })\n              }\n            })\n          }), /*#__PURE__*/_jsxs(FormControl, {\n            size: \"small\",\n            variant: \"outlined\",\n            style: {\n              minWidth: 150,\n              margin: \"0 1em 0 1em\"\n            },\n            children: [/*#__PURE__*/_jsxs(InputLabel, {\n              style: {\n                display: \"flex\"\n              },\n              shrink: true,\n              ref: inputSortLabel,\n              htmlFor: \"outlined-sort\",\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: translate(\"Sort By\")\n              }), /*#__PURE__*/_jsx(Sort, {})]\n            }), /*#__PURE__*/_jsx(Select, {\n              displayEmpty: true,\n              fullWidth: true,\n              labelId: \"autowidth-label\",\n              id: \"select-sort\",\n              value: sortBy,\n              onChange: handleSortBy,\n              autoWidth: true,\n              input: /*#__PURE__*/_jsx(OutlinedInput, {\n                notched: true,\n                labelWidth: sortLabelWidth,\n                name: \"sort\",\n                id: \"outlined-sort\"\n              }),\n              label: filters[sortBy].label,\n              children: filters.map(option => /*#__PURE__*/_jsx(MenuItem, {\n                value: option.value,\n                children: option.label\n              }, option.value))\n            })]\n          }), /*#__PURE__*/_jsxs(FormControl, {\n            size: \"small\",\n            variant: \"outlined\",\n            style: {\n              minWidth: 150,\n              margin: \"0 1em 0 1em\"\n            },\n            children: [/*#__PURE__*/_jsx(Checkbox, {\n              disabled: !isEditable,\n              onChange: handleChangeExcluded,\n              id: \"excluded\",\n              name: \"excluded\",\n              checked: isExcluded //onBlur={handleBlur}\n              ,\n              placeholder: translate(\"Excluded\")\n            }), /*#__PURE__*/_jsx(InputLabel, {\n              style: {\n                display: \"flex\"\n              },\n              shrink: true //ref={inputExcludedLabel}\n              ,\n              htmlFor: \"outlined-sort\",\n              children: /*#__PURE__*/_jsx(\"span\", {\n                children: translate(\"Excluded\")\n              })\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(GridItem, {\n        md: 12,\n        children: renderObservers()\n      })]\n    }), showObserverDetail &&\n    /*#__PURE__*/\n    //<div ref={observerDetailsRef}>\n    _jsx(ObserverDetails, {\n      isCreate: isCreate,\n      details: observer,\n      activateEdit: activateEdit,\n      setShow: setShow,\n      show: showObserverDetail //isEditable={isEditable}\n      ,\n      isEditable: true //ref={observerDetailsRef}\n      ,\n      levels: levels,\n      activities: activities\n    }) //</div>\n    , /*#__PURE__*/_jsx(ConfirmDialog, {})]\n  });\n};\n\nObserversList.auth = true;\nObserversList.layout = Admin;\nexport default ObserversList;","map":null,"metadata":{},"sourceType":"module"}