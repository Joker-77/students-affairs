{"ast":null,"code":"import apiConnector from \"./TokenizedApiClient\";\nexport default class ExamService {\n  static async GetAllCourses(programId, eduYearId) {\n    const listUrl = process.env.LIST_EXAM_COURSE_URL;\n    console.clear();\n    console.log(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`);\n    return await apiConnector.get(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async GetAllPlans(programId, eduYearId, eduCourseId, methodId) {\n    const listUrl = process.env.LIST_EXAM_URL;\n    return await apiConnector.get(`${listUrl}/plan?program_id=${programId}&edu_year_id=\n            ${eduYearId}&edu_course_id=${eduCourseId}&method_id=${methodId}`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async GetAllHalls(edu_year_id = '1', date) {\n    const listUrl = process.env.LIST_EXAM_URL;\n    return await apiConnector.get(`${listUrl}halls/`).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async Add(payload) {\n    const createUrl = process.env.CREATE_COURSE_URL;\n    console.log(createUrl);\n    return await apiConnector.post(createUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n}","map":{"version":3,"sources":["F:/StudentAffairs/students/students/Services/ExamService.ts"],"names":["apiConnector","ExamService","GetAllCourses","programId","eduYearId","listUrl","process","env","LIST_EXAM_COURSE_URL","console","clear","log","get","then","response","data","success","result","catch","error","GetAllPlans","eduCourseId","methodId","LIST_EXAM_URL","GetAllHalls","edu_year_id","date","Add","payload","createUrl","CREATE_COURSE_URL","post"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,sBAAzB;AAGA,eAAe,MAAMC,WAAN,CAAkB;AAC/B,eAAaC,aAAb,CAA2BC,SAA3B,EAA+CC,SAA/C,EAAyF;AACvF,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA5B;AACAC,IAAAA,OAAO,CAACC,KAAR;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAa,GAAEN,OAAQ,eAAcF,SAAU,gBAAeC,SAAU,EAAxE;AACA,WAAO,MAAMJ,YAAY,CACtBY,GADU,CACL,GAAEP,OAAQ,eAAcF,SAAU,gBAAeC,SAAU,EADtD,EAEVS,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAVU,CAAb;AAWD;;AACD,eAAaC,WAAb,CAAyBjB,SAAzB,EAA6CC,SAA7C,EACEiB,WADF,EACwBC,QADxB,EACiE;AAC/D,UAAMjB,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYgB,aAA5B;AACA,WAAO,MAAMvB,YAAY,CACtBY,GADU,CACL,GAAEP,OAAQ,oBAAmBF,SAAU;AACnD,cAAcC,SAAU,kBAAiBiB,WAAY,cAAaC,QAAS,EAF1D,EAGVT,IAHU,CAGJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KARU,EASVC,KATU,CASHC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAXU,CAAb;AAYD;;AAED,eAAaK,WAAb,CAAyBC,WAAmB,GAAG,GAA/C,EAAoDC,IAApD,EAAyF;AACvF,UAAMrB,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYgB,aAA5B;AACA,WAAO,MAAMvB,YAAY,CACxBY,GADY,CACP,GAAEP,OAAQ,QADH,EAEZQ,IAFY,CAENC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPY,EAQZC,KARY,CAQLC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAVY,CAAb;AAWD;;AAED,eAAaQ,GAAb,CAAiBC,OAAjB,EAAgD;AAC9C,UAAMC,SAAS,GAAGvB,OAAO,CAACC,GAAR,CAAYuB,iBAA9B;AACArB,IAAAA,OAAO,CAACE,GAAR,CAAYkB,SAAZ;AACA,WAAO,MAAM7B,YAAY,CACtB+B,IADU,CACLF,SADK,EACMD,OADN,EAEVf,IAFU,CAEJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAIC,MAAM,GAAGH,QAAQ,CAACC,IAAtB;AACA,eAAOE,MAAP;AACD;AACF,KAPU,EAQVC,KARU,CAQHC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAVU,CAAb;AAWD;;AA/D8B","sourcesContent":["import apiConnector from \"./TokenizedApiClient\";\r\nimport { ApiResponse } from \"../Models/ApiResponse/ApiResponse\";\r\n\r\nexport default class ExamService {\r\n  static async GetAllCourses(programId?: string, eduYearId?: string): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_COURSE_URL as string;\r\n    console.clear();\r\n    console.log(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`);\r\n    return await apiConnector\r\n      .get(`${listUrl}?program_id=${programId}&edu_year_id=${eduYearId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n  static async GetAllPlans(programId?: string, eduYearId?: string,\r\n    eduCourseId?: string, methodId?: string): Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_URL as string;\r\n    return await apiConnector\r\n      .get(`${listUrl}/plan?program_id=${programId}&edu_year_id=\r\n            ${eduYearId}&edu_course_id=${eduCourseId}&method_id=${methodId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n \r\n  static async GetAllHalls(edu_year_id: string = '1', date: string) : Promise<ApiResponse> {\r\n    const listUrl = process.env.LIST_EXAM_URL as string;\r\n    return await apiConnector\r\n    .get(`${listUrl}halls/`)\r\n    .then((response) => {\r\n      if (response.data.success) {\r\n        let result = response.data;\r\n        return result;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  }\r\n\r\n  static async Add(payload): Promise<ApiResponse> {\r\n    const createUrl = process.env.CREATE_COURSE_URL as string;\r\n    console.log(createUrl);\r\n    return await apiConnector\r\n      .post(createUrl, payload)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          let result = response.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}