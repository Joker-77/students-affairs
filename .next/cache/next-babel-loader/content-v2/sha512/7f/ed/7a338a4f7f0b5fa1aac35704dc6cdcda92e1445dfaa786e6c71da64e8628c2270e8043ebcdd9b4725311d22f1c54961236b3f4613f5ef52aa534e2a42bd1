{"ast":null,"code":"import apiConnector from \"./TokenizedApiClient\";\nexport default class TeacherService {\n  static async GetAll() {\n    const listUrl = process.env.LIST_TEACHER_URL;\n    return await apiConnector.get(listUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n  /*static async AddAfterSearch(payload): Promise<ApiResponse> {\r\n    const addUrl = process.env.SEARCH_ADD_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .post(addUrl, payload)\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\n\n\n  static async Add(payload) {\n    const addUrl = process.env.ADD_TEACHER_URL;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      var _response$data;\n\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) {\n        let result = response === null || response === void 0 ? void 0 : response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n  /*static async Search(payload): Promise<ApiResponse> {\r\n    const searchUrl = process.env.SEARCH_CANDIDATE_URL as string;\r\n    return await apiConnector\r\n      .get(searchUrl, {\r\n        params: payload,\r\n      })\r\n      .then((response) => {\r\n        if (response?.data?.success) {\r\n          let result = response?.data;\r\n          return result;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }*/\n\n\n  static async Edit(payload) {\n    const editUrl = process.env.EDIT_TEACHER_URL;\n    return await apiConnector.post(editUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  static async Get(id) {\n    const detailUrl = process.env.LIST_TEACHER_URL + `/${id}`;\n    return await apiConnector.get(detailUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n  /* Teacher Assignments */\n\n\n  static async GetTeachersAssignments(plan_id, edu_year_id) {\n    const detailUrl = process.env.LIST_TEACHER_ASSIGNMENT + `?plan_id=${plan_id}&edu_year_id=${edu_year_id}`;\n    return await apiConnector.get(detailUrl).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async AddTeachersAssignments(payload) {\n    const addUrl = process.env.ADD_TEACHER_ASSIGNMENT;\n    return await apiConnector.post(addUrl, payload).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n  static async DeleteTeachersAssignments(_id) {\n    const delUrl = process.env.DELETE_TEACHER_ASSIGNMENT;\n    let data = new FormData();\n    data.append(\"id\", _id);\n    return await apiConnector.post(delUrl, data).then(response => {\n      if (response.data.success) {\n        let result = response.data;\n        return result;\n      }\n    }).catch(error => {\n      console.log(\"Api Error:\", error);\n      throw error;\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}