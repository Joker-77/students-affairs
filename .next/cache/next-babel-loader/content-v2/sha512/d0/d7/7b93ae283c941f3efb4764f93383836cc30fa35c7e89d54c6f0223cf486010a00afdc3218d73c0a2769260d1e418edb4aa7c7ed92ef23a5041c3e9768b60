{"ast":null,"code":"import Box from \"@material-ui/core/Box\";\nimport { styled } from \"@material-ui/core/styles\";\nexport default styled(Box)(({\n  theme,\n  ownerState\n}) => {\n  // console.clear();\n  // console.log(theme);\n  // console.log(ownerState);\n  const {\n    palette,\n    functions,\n    borders,\n    boxShadows\n  } = theme;\n  const {\n    variant,\n    bgColor,\n    color,\n    opacity,\n    borderRadius,\n    shadow\n  } = ownerState;\n  const {\n    gradients,\n    grey,\n    white\n  } = palette;\n  const {\n    linearGradient\n  } = functions;\n  const {\n    borderRadius: radius\n  } = borders;\n  const greyColors = {\n    \"grey-100\": grey[100],\n    \"grey-200\": grey[200],\n    \"grey-300\": grey[300],\n    \"grey-400\": grey[400],\n    \"grey-500\": grey[500],\n    \"grey-600\": grey[600],\n    \"grey-700\": grey[700],\n    \"grey-800\": grey[800],\n    \"grey-900\": grey[900]\n  };\n  const validGradients = [\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\", \"light\"];\n  const validColors = [\"transparent\", \"white\", \"black\", \"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"light\", \"dark\", \"text\", \"grey-100\", \"grey-200\", \"grey-300\", \"grey-400\", \"grey-500\", \"grey-600\", \"grey-700\", \"grey-800\", \"grey-900\"];\n  const validBorderRadius = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl\", \"section\"];\n  const validBoxShadows = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl\", \"inset\"]; // background value\n\n  let backgroundValue = bgColor;\n\n  if (variant === \"gradient\") {\n    backgroundValue = validGradients.find(el => el === bgColor) ? linearGradient(gradients[bgColor].main, gradients[bgColor].state) : white.main;\n  } else if (validColors.find(el => el === bgColor)) {\n    backgroundValue = palette[bgColor] ? palette[bgColor].main : greyColors[bgColor];\n  } else {\n    backgroundValue = bgColor;\n  } // color value\n\n\n  let colorValue = color;\n\n  if (validColors.find(el => el === color)) {\n    colorValue = palette[color] ? palette[color].main : greyColors[color];\n  } // borderRadius value\n\n\n  let borderRadiusValue = borderRadius;\n\n  if (validBorderRadius.find(el => el === borderRadius)) {\n    borderRadiusValue = radius[borderRadius];\n  } // boxShadow value\n\n\n  let boxShadowValue = boxShadows;\n\n  if (validBoxShadows.find(el => el === shadow)) {\n    boxShadowValue = boxShadows[shadow];\n  }\n\n  return {\n    opacity,\n    background: backgroundValue,\n    color: colorValue,\n    borderRadius: borderRadiusValue,\n    boxShadow: boxShadowValue\n  };\n});","map":null,"metadata":{},"sourceType":"module"}