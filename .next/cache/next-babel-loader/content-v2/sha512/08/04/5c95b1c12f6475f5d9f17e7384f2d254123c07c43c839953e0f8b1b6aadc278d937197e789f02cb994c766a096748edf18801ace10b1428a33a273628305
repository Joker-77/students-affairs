{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// @mui material components\nimport Button from \"@material-ui/core/Button\";\nimport { styled } from \"@material-ui/core/styles\";\nexport default styled(Button)(({\n  theme,\n  ownerState\n}) => {\n  const {\n    palette,\n    functions,\n    borders\n  } = theme;\n  const {\n    color,\n    variant,\n    size,\n    circular,\n    iconOnly\n  } = ownerState;\n  const {\n    white,\n    dark,\n    text,\n    transparent,\n    gradients\n  } = palette;\n  const {\n    boxShadow,\n    linearGradient,\n    pxToRem,\n    rgba\n  } = functions;\n  const {\n    borderRadius\n  } = borders; // styles for the button with variant=\"contained\"\n\n  const containedStyles = () => {\n    // background color value\n    const backgroundValue = palette[color] ? palette[color].main : white.main; // backgroundColor value when button is focused\n\n    const focusedBackgroundValue = palette[color] ? palette[color].focus : white.focus; // boxShadow value\n\n    const boxShadowValue = palette[color] ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5) : boxShadow([0, 0], [0, 3.2], dark.main, 0.5); // color value\n\n    let colorValue = white.main;\n\n    if (color === \"white\" || !palette[color]) {\n      colorValue = text.main;\n    } else if (color === \"light\") {\n      colorValue = gradients.dark.state;\n    } // color value when button is focused\n\n\n    let focusedColorValue = white.main;\n\n    if (color === \"white\") {\n      focusedColorValue = text.main;\n    } else if (color === \"primary\" || color === \"error\" || color === \"dark\") {\n      focusedColorValue = white.main;\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      \"&:hover\": {\n        backgroundColor: backgroundValue\n      },\n      \"&:focus:not(:hover)\": {\n        backgroundColor: focusedBackgroundValue,\n        boxShadow: boxShadowValue\n      },\n      \"&:disabled\": {\n        backgroundColor: backgroundValue,\n        color: focusedColorValue\n      }\n    };\n  }; // styles for the button with variant=\"outlined\"\n\n\n  const outliedStyles = () => {\n    // background color value\n    const backgroundValue = color === \"white\" ? rgba(white.main, 0.1) : transparent.main; // color value\n\n    const colorValue = palette[color] ? palette[color].main : white.main; // boxShadow value\n\n    const boxShadowValue = palette[color] ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5) : boxShadow([0, 0], [0, 3.2], white.main, 0.5); // border color value\n\n    let borderColorValue = palette[color] ? palette[color].main : rgba(white.main, 0.75);\n\n    if (color === \"white\") {\n      borderColorValue = rgba(white.main, 0.75);\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      borderColor: borderColorValue,\n      \"&:hover\": {\n        background: transparent.main,\n        borderColor: colorValue\n      },\n      \"&:focus:not(:hover)\": {\n        background: transparent.main,\n        boxShadow: boxShadowValue\n      },\n      \"&:active:not(:hover)\": {\n        backgroundColor: colorValue,\n        color: white.main,\n        opacity: 0.85\n      },\n      \"&:disabled\": {\n        color: colorValue,\n        borderColor: colorValue\n      }\n    };\n  }; // styles for the button with variant=\"gradient\"\n\n\n  const gradientStyles = () => {\n    // background value\n    const backgroundValue = color === \"white\" || !gradients[color] ? white.main : linearGradient(gradients[color].main, gradients[color].state); // color value\n\n    let colorValue = white.main;\n\n    if (color === \"white\") {\n      colorValue = text.main;\n    } else if (color === \"light\") {\n      colorValue = gradients.dark.state;\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      \"&:focus:not(:hover)\": {\n        boxShadow: \"none\"\n      },\n      \"&:disabled\": {\n        background: backgroundValue,\n        color: colorValue\n      }\n    };\n  }; // styles for the button with variant=\"text\"\n\n\n  const textStyles = () => {\n    // color value\n    const colorValue = palette[color] ? palette[color].main : white.main; // color value when button is focused\n\n    const focusedColorValue = palette[color] ? palette[color].focus : white.focus;\n    return {\n      color: colorValue,\n      \"&:hover\": {\n        color: focusedColorValue\n      },\n      \"&:focus:not(:hover)\": {\n        color: focusedColorValue\n      }\n    };\n  }; // styles for the button with circular={true}\n\n\n  const circularStyles = () => ({\n    borderRadius: borderRadius.section\n  }); // styles for the button with iconOnly={true}\n\n\n  const iconOnlyStyles = () => {\n    // width, height, minWidth and minHeight values\n    let sizeValue = pxToRem(38);\n\n    if (size === \"small\") {\n      sizeValue = pxToRem(25.4);\n    } else if (size === \"large\") {\n      sizeValue = pxToRem(52);\n    } // padding value\n\n\n    let paddingValue = `${pxToRem(11)} ${pxToRem(11)} ${pxToRem(10)}`;\n\n    if (size === \"small\") {\n      paddingValue = pxToRem(4.5);\n    } else if (size === \"large\") {\n      paddingValue = pxToRem(16);\n    }\n\n    return {\n      width: sizeValue,\n      minWidth: sizeValue,\n      height: sizeValue,\n      minHeight: sizeValue,\n      padding: paddingValue,\n      \"& .material-icons\": {\n        marginTop: 0\n      },\n      \"&:hover, &:focus, &:active\": {\n        transform: \"none\"\n      }\n    };\n  };\n\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, variant === \"contained\" && containedStyles()), variant === \"outlined\" && outliedStyles()), variant === \"gradient\" && gradientStyles()), variant === \"text\" && textStyles()), circular && circularStyles()), iconOnly && iconOnlyStyles());\n});","map":{"version":3,"sources":["F:/StudentAffairs/students/students/components/SuiButton/SuiButtonRoot.js"],"names":["Button","styled","theme","ownerState","palette","functions","borders","color","variant","size","circular","iconOnly","white","dark","text","transparent","gradients","boxShadow","linearGradient","pxToRem","rgba","borderRadius","containedStyles","backgroundValue","main","focusedBackgroundValue","focus","boxShadowValue","colorValue","state","focusedColorValue","background","backgroundColor","outliedStyles","borderColorValue","borderColor","opacity","gradientStyles","textStyles","circularStyles","section","iconOnlyStyles","sizeValue","paddingValue","width","minWidth","height","minHeight","padding","marginTop","transform"],"mappings":"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","sourcesContent":["// @mui material components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\n\r\nexport default styled(Button)(({ theme, ownerState }) => {\r\n  const { palette, functions, borders } = theme;\r\n  const { color, variant, size, circular, iconOnly } = ownerState;\r\n\r\n  const { white, dark, text, transparent, gradients } = palette;\r\n  const { boxShadow, linearGradient, pxToRem, rgba } = functions;\r\n  const { borderRadius } = borders;\r\n\r\n  // styles for the button with variant=\"contained\"\r\n  const containedStyles = () => {\r\n    // background color value\r\n    const backgroundValue = palette[color] ? palette[color].main : white.main;\r\n\r\n    // backgroundColor value when button is focused\r\n    const focusedBackgroundValue = palette[color]\r\n      ? palette[color].focus\r\n      : white.focus;\r\n\r\n    // boxShadow value\r\n    const boxShadowValue = palette[color]\r\n      ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5)\r\n      : boxShadow([0, 0], [0, 3.2], dark.main, 0.5);\r\n\r\n    // color value\r\n    let colorValue = white.main;\r\n\r\n    if (color === \"white\" || !palette[color]) {\r\n      colorValue = text.main;\r\n    } else if (color === \"light\") {\r\n      colorValue = gradients.dark.state;\r\n    }\r\n\r\n    // color value when button is focused\r\n    let focusedColorValue = white.main;\r\n\r\n    if (color === \"white\") {\r\n      focusedColorValue = text.main;\r\n    } else if (color === \"primary\" || color === \"error\" || color === \"dark\") {\r\n      focusedColorValue = white.main;\r\n    }\r\n\r\n    return {\r\n      background: backgroundValue,\r\n      color: colorValue,\r\n\r\n      \"&:hover\": {\r\n        backgroundColor: backgroundValue,\r\n      },\r\n\r\n      \"&:focus:not(:hover)\": {\r\n        backgroundColor: focusedBackgroundValue,\r\n        boxShadow: boxShadowValue,\r\n      },\r\n\r\n      \"&:disabled\": {\r\n        backgroundColor: backgroundValue,\r\n        color: focusedColorValue,\r\n      },\r\n    };\r\n  };\r\n\r\n  // styles for the button with variant=\"outlined\"\r\n  const outliedStyles = () => {\r\n    // background color value\r\n    const backgroundValue =\r\n      color === \"white\" ? rgba(white.main, 0.1) : transparent.main;\r\n\r\n    // color value\r\n    const colorValue = palette[color] ? palette[color].main : white.main;\r\n\r\n    // boxShadow value\r\n    const boxShadowValue = palette[color]\r\n      ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5)\r\n      : boxShadow([0, 0], [0, 3.2], white.main, 0.5);\r\n\r\n    // border color value\r\n    let borderColorValue = palette[color]\r\n      ? palette[color].main\r\n      : rgba(white.main, 0.75);\r\n\r\n    if (color === \"white\") {\r\n      borderColorValue = rgba(white.main, 0.75);\r\n    }\r\n\r\n    return {\r\n      background: backgroundValue,\r\n      color: colorValue,\r\n      borderColor: borderColorValue,\r\n\r\n      \"&:hover\": {\r\n        background: transparent.main,\r\n        borderColor: colorValue,\r\n      },\r\n\r\n      \"&:focus:not(:hover)\": {\r\n        background: transparent.main,\r\n        boxShadow: boxShadowValue,\r\n      },\r\n\r\n      \"&:active:not(:hover)\": {\r\n        backgroundColor: colorValue,\r\n        color: white.main,\r\n        opacity: 0.85,\r\n      },\r\n\r\n      \"&:disabled\": {\r\n        color: colorValue,\r\n        borderColor: colorValue,\r\n      },\r\n    };\r\n  };\r\n\r\n  // styles for the button with variant=\"gradient\"\r\n  const gradientStyles = () => {\r\n    // background value\r\n    const backgroundValue =\r\n      color === \"white\" || !gradients[color]\r\n        ? white.main\r\n        : linearGradient(gradients[color].main, gradients[color].state);\r\n\r\n    // color value\r\n    let colorValue = white.main;\r\n\r\n    if (color === \"white\") {\r\n      colorValue = text.main;\r\n    } else if (color === \"light\") {\r\n      colorValue = gradients.dark.state;\r\n    }\r\n\r\n    return {\r\n      background: backgroundValue,\r\n      color: colorValue,\r\n\r\n      \"&:focus:not(:hover)\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"&:disabled\": {\r\n        background: backgroundValue,\r\n        color: colorValue,\r\n      },\r\n    };\r\n  };\r\n\r\n  // styles for the button with variant=\"text\"\r\n  const textStyles = () => {\r\n    // color value\r\n    const colorValue = palette[color] ? palette[color].main : white.main;\r\n\r\n    // color value when button is focused\r\n    const focusedColorValue = palette[color]\r\n      ? palette[color].focus\r\n      : white.focus;\r\n\r\n    return {\r\n      color: colorValue,\r\n\r\n      \"&:hover\": {\r\n        color: focusedColorValue,\r\n      },\r\n\r\n      \"&:focus:not(:hover)\": {\r\n        color: focusedColorValue,\r\n      },\r\n    };\r\n  };\r\n\r\n  // styles for the button with circular={true}\r\n  const circularStyles = () => ({\r\n    borderRadius: borderRadius.section,\r\n  });\r\n\r\n  // styles for the button with iconOnly={true}\r\n  const iconOnlyStyles = () => {\r\n    // width, height, minWidth and minHeight values\r\n    let sizeValue = pxToRem(38);\r\n\r\n    if (size === \"small\") {\r\n      sizeValue = pxToRem(25.4);\r\n    } else if (size === \"large\") {\r\n      sizeValue = pxToRem(52);\r\n    }\r\n\r\n    // padding value\r\n    let paddingValue = `${pxToRem(11)} ${pxToRem(11)} ${pxToRem(10)}`;\r\n\r\n    if (size === \"small\") {\r\n      paddingValue = pxToRem(4.5);\r\n    } else if (size === \"large\") {\r\n      paddingValue = pxToRem(16);\r\n    }\r\n\r\n    return {\r\n      width: sizeValue,\r\n      minWidth: sizeValue,\r\n      height: sizeValue,\r\n      minHeight: sizeValue,\r\n      padding: paddingValue,\r\n\r\n      \"& .material-icons\": {\r\n        marginTop: 0,\r\n      },\r\n\r\n      \"&:hover, &:focus, &:active\": {\r\n        transform: \"none\",\r\n      },\r\n    };\r\n  };\r\n\r\n  return {\r\n    ...(variant === \"contained\" && containedStyles()),\r\n    ...(variant === \"outlined\" && outliedStyles()),\r\n    ...(variant === \"gradient\" && gradientStyles()),\r\n    ...(variant === \"text\" && textStyles()),\r\n    ...(circular && circularStyles()),\r\n    ...(iconOnly && iconOnlyStyles()),\r\n  };\r\n});\r\n"]},"metadata":{},"sourceType":"module"}