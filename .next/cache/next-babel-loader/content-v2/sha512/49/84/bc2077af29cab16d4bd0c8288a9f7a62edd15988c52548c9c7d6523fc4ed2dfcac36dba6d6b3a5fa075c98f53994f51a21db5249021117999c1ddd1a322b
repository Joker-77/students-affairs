{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport Admin from \"../../../../layouts/Admin\";\nimport { Box, Grid, TextField, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport SuiButton from \"../../../../components/SuiButton\";\nimport React from \"react\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport AssignObserversToHall from \"../../../../components/AssignObserversToHall\";\nimport * as Yup from \"yup\";\nimport EducationalYearService from \"../../../../Services/EducationalYearService\";\nimport ExamHallsService from \"../../../../Services/ExamHallsService\";\n\nvar Observations = function Observations() {\n  var _useState = useState(null),\n      eduYear = _useState[0],\n      setEduYear = _useState[1];\n\n  var today = new Date();\n  var todayStr = today.getFullYear() + \"-\" + (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + today.getDate().toString().padStart(2, \"0\");\n\n  var _useTranslation = useTranslation(),\n      translate = _useTranslation.translate;\n\n  var _useState2 = useState(todayStr),\n      examDate = _useState2[0],\n      setExamDate = _useState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showAssignObservers = _React$useState2[0],\n      setshowAssignObservers = _React$useState2[1];\n\n  var setShow = function setShow() {\n    setshowAssignObservers(!showAssignObservers);\n  };\n\n  var handleDateChange = function handleDateChange(event) {\n    setExamDate(event.target.value);\n  };\n\n  useEffect(function () {\n    if (eduYear) {\n      ExamHallsService.GetAll(eduYear.id, examDate).then(function (res) {\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(function (error) {\n        console.error(\"error\", error);\n      });\n    }\n  }, [examDate]);\n  useEffect(function () {\n    if (eduYear && !showAssignObservers) {\n      ExamHallsService.GetAll(eduYear.id, examDate).then(function (res) {\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(function (error) {\n        console.error(\"error\", error);\n      });\n    }\n  }, [showAssignObservers]);\n\n  var handleAddObserver = function handleAddObserver(data) {\n    setHall(data);\n    setshowAssignObservers(true);\n  };\n\n  var handleClose = function handleClose() {\n    setshowAssignObservers(false);\n  };\n\n  var handleAddObserverSubmit = function handleAddObserverSubmit(values, submitting) {};\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState([]),\n      halls = _useState4[0],\n      setHalls = _useState4[1];\n\n  var _useState5 = useState(null),\n      hall = _useState5[0],\n      setHall = _useState5[1];\n  /************** LOADING DATA ***************/\n\n\n  useEffect(function () {\n    EducationalYearService.GetAll().then(function (res) {\n      var edu_year = res.result.slice(0)[0];\n      setEduYear(edu_year);\n      ExamHallsService.GetAll(edu_year === null || edu_year === void 0 ? void 0 : edu_year.id, examDate).then(function (res) {\n        console.log(\"Exam Halls:\");\n        console.log(res.result);\n        setHalls(res.result);\n      }).catch(function (error) {\n        console.error(\"error\", error);\n      });\n    }).catch(function (error) {\n      console.error(\"error\", error);\n    });\n  }, []);\n  var addObserverScheme = Yup.object().shape({\n    employee: Yup.number().required(translate(\"{0} is required\", \"Observer\"))\n  });\n  var columns = [{\n    title: translate(\"Exam Halls Ids\"),\n    field: \"exam_halls_ids\",\n    hidden: true\n  }, {\n    title: translate(\"Hall Id\"),\n    field: \"hall\",\n    hidden: true\n  }, {\n    title: translate(\"Hall\"),\n    field: \"hallName\"\n  }, {\n    title: translate(\"From\"),\n    field: \"from\"\n  }, {\n    title: translate(\"To\"),\n    field: \"to\"\n  }, {\n    title: translate(\"Exams details\"),\n    field: \"examsDetails\"\n  }, {\n    title: translate(\"Number of observers\"),\n    field: \"observers\"\n  }];\n\n  var renderHalls = function renderHalls() {\n    if (halls != null && halls.length > 0) {\n      var data = halls;\n      var options = {\n        // exportAllData: true,\n        // exportButton: true,\n        actionsColumnIndex: -1,\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        pageSize: 10,\n        maxBodyHeight: \"500px\",\n        search: false,\n        tableLayout: \"auto\"\n      };\n      var actions = [{\n        icon: function icon() {\n          return /*#__PURE__*/_jsx(SuiButton, {\n            style: {\n              margin: 5\n            },\n            color: \"primary\",\n            children: translate(\"Assign Observers\")\n          });\n        },\n        onClick: function onClick(evt, data) {\n          return handleAddObserver(data);\n        }\n      }];\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(ActionTable, {\n          Title: \"\",\n          Columns: columns,\n          Data: data.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              hallName: item.hall.name,\n              from: item.timePeriod.slice(11, 16),\n              to: item.timePeriod.slice(33, 38),\n              examsDetails: item.exams.reduce(function (acc, exam) {\n                return acc ? \"\".concat(acc, \" + \").concat(exam.ar_year, \" \").concat(exam.ar_name, \" \").concat(exam.code) : \"\".concat(exam.ar_year, \" \").concat(exam.ar_name, \" \").concat(exam.code);\n              }, \"\")\n            });\n          }),\n          Options: options,\n          Actions: actions\n        })\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {\n      loading: false\n    });\n  };\n  /*return (\r\n      <React.Fragment>\r\n      <Grid container>\r\n          <Grid item md={12} spacing={2}>\r\n              <Grid item md={4}>\r\n                  <Box mb={2}>\r\n                      <Box mb={1} ml={0.5}>\r\n                          <Typography component=\"label\" variant=\"caption\">\r\n                              {translate(\"Examination Halls on\")}\r\n                          </Typography>\r\n                      </Box>\r\n                      <TextField\r\n                          disabled={false}\r\n                          onChange={handleDateChange}\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          type=\"date\"\r\n                          id=\"exam_date\"\r\n                          name=\"exam_date\"\r\n                          //defaultValue={todayStr}\r\n                          value={examDate}\r\n                          //onBlur={handleBlur}\r\n                          //error={Boolean(touched.birth_date && errors.birth_date)}\r\n                          //helperText={touched.birth_date && errors.birth_date}\r\n                          placeholder={translate(\"Exam date\")}\r\n                          fullWidth\r\n                      />\r\n                  </Box>\r\n              </Grid>\r\n              <Grid item md={8}>\r\n                  \r\n              </Grid>\r\n          </Grid>\r\n      </Grid>\r\n      {halls && halls.length > 0 ? (\r\n      <Grid container>\r\n          <Grid item md={12} spacing={2}>\r\n              <Grid item md={3}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Hall\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"From\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"To\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={3}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Exams details\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <Grid item md={1.5}>\r\n                      <Typography component=\"label\" variant=\"caption\">\r\n                          {translate(\"Number of observers\")}\r\n                      </Typography>\r\n              </Grid>\r\n              <GridItem md={1.5}>\r\n                  \r\n              </GridItem>\r\n          </Grid>\r\n          <FieldArray\r\n              name=\"halls\"\r\n              render={(arrayHelpers) => (\r\n                  <div>\r\n                      {halls.map((hall, index) => (\r\n                          <div key={index}>\r\n                              <Grid container spacing={2}>\r\n                                  <Grid item xs={3}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.hallName}`}\r\n                                              name={`${hall.id}-${hall.hallName}`}\r\n                                              value={hall.hallName}\r\n                                              placeholder={translate(\"Hall\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.from}`}\r\n                                              name={`${hall.id}-${hall.from}`}\r\n                                              value={hall.from}\r\n                                              placeholder={translate(\"From\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.to}`}\r\n                                              name={`${hall.id}-${hall.to}`}\r\n                                              value={hall.to}\r\n                                              placeholder={translate(\"To\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={3}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.examsDetails}`}\r\n                                              name={`${hall.id}-${hall.examsDetails}`}\r\n                                              value={hall.examsDetails}\r\n                                              placeholder={translate(\"Exams details\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <TextField\r\n                                              disabled={true}\r\n                                              variant=\"outlined\"\r\n                                              size=\"small\"\r\n                                              type=\"text\"\r\n                                              id={`${hall.id}-${hall.observersNumber}`}\r\n                                              name={`${hall.id}-${hall.observersNumber}`}\r\n                                              value={hall.observersNumber}\r\n                                              placeholder={translate(\"Number of observers\")}\r\n                                              fullWidth\r\n                                          />\r\n                                      </Grid>\r\n                                  </Grid>\r\n                                  <Grid item xs={1.5}>\r\n                                      <Grid item>\r\n                                          <SuiButton\r\n                                              style={{ margin: 5 }}\r\n                                              color=\"primary\"\r\n                                              onClick={handleAddObserver}\r\n                                          >\r\n                                              {translate(\"Assign Observers\")}\r\n                                          </SuiButton>\r\n                                      </Grid>\r\n                                  </Grid>\r\n                              </Grid>\r\n                          </div>\r\n                      ))}\r\n                  </div>\r\n              )}\r\n          />\r\n      </Grid>\r\n          ) : (\r\n                  <React.Fragment>\r\n                      {translate(\"No exams on this date\")}\r\n                  </React.Fragment>\r\n              )}\r\n      </React.Fragment>\r\n  );*/\n\n\n  return !showAssignObservers ? /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        md: 12,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          md: 4,\n          children: /*#__PURE__*/_jsx(Box, {\n            mb: 2,\n            children: /*#__PURE__*/_jsx(Box, {\n              mb: 1,\n              ml: 0.5,\n              children: /*#__PURE__*/_jsx(Typography, {\n                component: \"label\",\n                variant: \"caption\",\n                children: \"\".concat(translate(\"Educational year\"), \": \").concat(eduYear === null || eduYear === void 0 ? void 0 : eduYear.year)\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          md: 4,\n          children: /*#__PURE__*/_jsxs(Box, {\n            mb: 2,\n            children: [/*#__PURE__*/_jsx(Box, {\n              mb: 1,\n              ml: 0.5,\n              children: /*#__PURE__*/_jsx(Typography, {\n                component: \"label\",\n                variant: \"caption\",\n                children: translate(\"Examination Halls on\")\n              })\n            }), /*#__PURE__*/_jsx(TextField, {\n              disabled: false,\n              onChange: handleDateChange,\n              variant: \"outlined\",\n              size: \"small\",\n              type: \"date\",\n              id: \"exam_date\",\n              name: \"exam_date\" //defaultValue={todayStr}\n              ,\n              value: examDate //onBlur={handleBlur}\n              //error={Boolean(touched.birth_date && errors.birth_date)}\n              //helperText={touched.birth_date && errors.birth_date}\n              ,\n              placeholder: translate(\"Exam date\"),\n              fullWidth: true\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          md: 8\n        })]\n      })\n    }), renderHalls()]\n  }) : /*#__PURE__*/_jsx(AssignObserversToHall, {\n    setShow: setShow,\n    hall: hall,\n    formScheme: addObserverScheme,\n    examDate: examDate\n  });\n};\n\nObservations.auth = true;\nObservations.layout = Admin;\nexport default Observations;","map":null,"metadata":{},"sourceType":"module"}