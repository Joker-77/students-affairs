{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport apiConnector from \"./ApiClient\";\n\nvar ObservationService = /*#__PURE__*/function () {\n  function ObservationService() {\n    _classCallCheck(this, ObservationService);\n  }\n\n  _createClass(ObservationService, null, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(date, employee_id, hall_id) {\n        var listUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                listUrl = process.env.LIST_OBSERVATIONS_URL;\n                _context.next = 3;\n                return apiConnector.get(\"\".concat(listUrl, \"?date=\").concat(date, \"&employee_id=\").concat(employee_id, \"&hall_id=\").concat(hall_id)).then(function (response) {\n                  if (response.data.success) {\n                    var result = response.data;\n                    return result;\n                  }\n                }).catch(function (error) {\n                  console.log(\"Api Error:\", error);\n                  throw error;\n                });\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll(_x, _x2, _x3) {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"GetAvailableObservers\",\n    value: function () {\n      var _GetAvailableObservers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(date, from, to) {\n        var listUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                listUrl = process.env.LIST_AVAILABLE_OBSERVERS_URL;\n                _context2.next = 3;\n                return apiConnector.get(\"\".concat(listUrl, \"?date=\").concat(date, \"&from=\").concat(from, \"&to=\").concat(to)).then(function (response) {\n                  if (response.data.success) {\n                    var result = response.data;\n                    return result;\n                  }\n                }).catch(function (error) {\n                  console.log(\"Api Error:\", error);\n                  throw error;\n                });\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function GetAvailableObservers(_x4, _x5, _x6) {\n        return _GetAvailableObservers.apply(this, arguments);\n      }\n\n      return GetAvailableObservers;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n        var addUrl;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                addUrl = process.env.ADD_OBSERVATION_URL;\n                _context3.next = 3;\n                return apiConnector.post(addUrl, payload).then(function (response) {\n                  if (response.data.success) {\n                    var result = response.data;\n                    return result;\n                  }\n                }).catch(function (error) {\n                  console.log(\"Api Error:\", error);\n                  throw error;\n                });\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Add(_x7) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n        var deleteUrl;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                deleteUrl = process.env.DELETE_OBSERVATION_URL;\n                _context4.next = 3;\n                return apiConnector.post(deleteUrl, payload).then(function (response) {\n                  if (response.data.success) {\n                    var result = response.data;\n                    return result;\n                  }\n                }).catch(function (error) {\n                  console.log(\"Api Error:\", error);\n                  throw error;\n                });\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function Delete(_x8) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return ObservationService;\n}();\n\nexport { ObservationService as default };","map":null,"metadata":{},"sourceType":"module"}