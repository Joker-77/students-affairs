{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport CertificateService from \"../../../../Services/CertificateService\";\nimport AddCertificateModal from \"../../../../components/Modals/AddCertificateModal\";\nimport * as Yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\n\nconst CertificateList = ({}) => {\n  var _router$query;\n\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const router = useRouter();\n  const candidateId = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id;\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [selectedCertificate, setSelectedCertificate] = React.useState(0);\n  const [initAddCertificate, setInitAddCertificate] = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  });\n  const AddCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n  const UpdateCertificateScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Type\")),\n    year: Yup.string().required(translate(\"{0} is required\", \"Year\")),\n    result: Yup.string().required(translate(\"{0} is required\", \"Result\")),\n    city: Yup.string().required(translate(\"{0} is required\", \"City\")),\n    round: Yup.string().required(translate(\"{0} is required\", \"Round\")),\n    subscription_number: Yup.string().required(translate(\"{0} is required\", \"Subscription number\")),\n    candidate_id: Yup.string().required(translate(\"{0} is required\", \"Candidate\"))\n  });\n\n  const submitAddCertificate = async (values, setSubmitting) => {\n    setSubmitting(true);\n    CertificateService.Add(values).then(res => {\n      console.log(\"Certificate\", res);\n      const CertificateCopy = [res.result, ...Certificates];\n      setCertificates(CertificateCopy);\n      setOpen(false);\n    }).catch(error => {\n      console.error(\"error\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Data ****************************/\n\n\n  useEffect(() => {\n    CertificateService.GetAll(candidateId).then(res => {\n      console.log(\"Certificate\", res);\n      setCertificates(res.result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  /************************** Finish Data ****************************/\n\n  /************************** Handle edit data ****************************/\n\n  const [openUpdateCertificate, setOpenUpdateCertificate] = React.useState(false);\n  const [openModalForDetails, setOpenModalForDetails] = React.useState(false);\n\n  const handleOpenUpdateCertificate = data => {\n    console.log(\"data\", data);\n    setInitUpdateCertificate({\n      id: data.id,\n      type: data.type,\n      year: data.year,\n      result: data.result,\n      city: data.city,\n      details: data.details,\n      round: data.round,\n      subscription_number: data.subscription_number,\n      candidate_id: data.candidate_id\n    });\n    setOpenUpdateCertificate(true);\n  };\n\n  const handleCloseUpdateCertificate = () => {\n    setOpenModalForDetails(false);\n    setDisabled(false);\n    setOpenUpdateCertificate(false);\n  };\n\n  const [initUpdateCertificate, setInitUpdateCertificate] = React.useState({\n    id: 0,\n    type: \"\",\n    year: \"\",\n    result: \"\",\n    city: \"\",\n    details: [],\n    round: \"\",\n    subscription_number: \"\",\n    candidate_id: +candidateId\n  });\n\n  const submitUpdateCertificate = async (values, setSubmitting) => {\n    setSubmitting(true);\n    console.log(\"values\", values);\n    CertificateService.Edit(values).then(res => {\n      console.log(\"Certificate\", res);\n      const CertificateCopy = [...Certificates].map(item => item.id == res.result.id ? res.result : item);\n      setCertificates(CertificateCopy);\n      setOpenUpdateCertificate(false);\n    }).catch(error => {\n      console.error(\"roles\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Finish Handle edit data ****************************/\n\n\n  const [disabled, setDisabled] = React.useState(false);\n\n  const handleDetails = data => {\n    setOpenModalForDetails(true);\n    setDisabled(true);\n    handleOpenUpdateCertificate(data);\n  };\n\n  const [Certificates, setCertificates] = React.useState(null);\n\n  const renderCertificate = () => {\n    if (Certificates != null && Certificates.length > 0) {\n      let columns = [{\n        title: translate(\"Id\"),\n        field: \"id\",\n        hidden: true\n      }, {\n        title: translate(\"Type\"),\n        field: \"type\"\n      }, {\n        title: translate(\"Year\"),\n        field: \"year\"\n      }, {\n        title: translate(\"Result\"),\n        field: \"result\"\n      }, {\n        title: translate(\"City\"),\n        field: \"city\"\n      }, {\n        title: translate(\"Round\"),\n        field: \"round\"\n      }, {\n        title: translate(\"Subscription number\"),\n        field: \"subscription_number\"\n      }];\n      let data = Certificates;\n      let options = {\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        maxBodyHeight: \"500px\"\n      };\n      return /*#__PURE__*/_jsx(ActionTable, {\n        Title: translate(\"Certificate List\"),\n        Columns: columns,\n        Data: data,\n        Options: options,\n        Actions: [{\n          tooltip: translate(\"Certificate Details\"),\n          icon: \"details\",\n          onClick: (evt, data) => handleDetails(data)\n        } // {\n        //   tooltip: translate(\"Edit Certificate\"),\n        //   icon: \"edit\",\n        //   onClick: (evt, data) => handleOpenUpdateCertificate(data),\n        // },\n        ]\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {});\n  };\n\n  return /*#__PURE__*/_jsxs(GridContainer, {\n    children: [/*#__PURE__*/_jsxs(GridItem, {\n      md: 12,\n      children: [/*#__PURE__*/_jsx(Button, {\n        disabled: false,\n        variant: \"contained\",\n        className: classes.submitBtn,\n        onClick: handleOpen,\n        children: translate(\"Add New Certificate\")\n      }), renderCertificate()]\n    }), /*#__PURE__*/_jsx(AddCertificateModal, {\n      disabled: disabled,\n      title: translate(\"Add Certificate\"),\n      open: open,\n      formScheme: AddCertificateScheme,\n      handleClose: handleClose,\n      initValues: initAddCertificate,\n      submitForm: submitAddCertificate\n    }, \"addCertificate\"), /*#__PURE__*/_jsx(AddCertificateModal, {\n      disabled: disabled,\n      title: !openModalForDetails ? translate(\"Update Certificate\") : translate(\"Certificate Details\"),\n      open: openUpdateCertificate,\n      formScheme: UpdateCertificateScheme,\n      handleClose: handleCloseUpdateCertificate,\n      initValues: initUpdateCertificate,\n      submitForm: submitUpdateCertificate\n    }, \"updateCertificate\")]\n  });\n};\n\nCertificateList.auth = true;\nCertificateList.layout = Admin;\nexport default CertificateList;","map":null,"metadata":{},"sourceType":"module"}