{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport { Button, Grid, IconButton } from \"@material-ui/core\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport AttachmentService from \"../../../../Services/AttachmentService\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\nimport { AttachFile, Delete } from \"@material-ui/icons\";\nimport CardHeader from \"../../../../components/Card/CardHeader\";\nimport CardBody from \"../../../../components/Card/CardBody\";\nimport Card from \"../../../../components/Card/Card\";\nimport colors from \"../../../../assets/theme/base/colors\";\nimport * as Yup from \"yup\";\nimport AddAttachmentModal from \"../../../../components/Modals/AddAttachmentModal\";\n\nconst CandidateCandidateAttachmentsList = ({\n  attachments,\n  candidateId\n}) => {\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const router = useRouter();\n  const [open, setOpen] = React.useState(false);\n  const [body, setBody] = React.useState(false);\n\n  const handleOpen = body => {\n    setOpen(true);\n    setBody(body);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const AddAttachmentScheme = Yup.object().shape({\n    type: Yup.string().required(translate(\"{0} is required\", \"Name\"))\n  });\n  const [initAddAttachment, setInitAddAttachment] = React.useState({\n    type: 3\n  });\n  const fileItem = {\n    padding: \"5px 20px\",\n    border: \"1px solid #cdcdcd\",\n    borderRadius: 30,\n    marginBottom: 5,\n    marginTop: 5\n  };\n  const fileContainer = {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  };\n  const fileLink = {\n    fontSize: 15,\n    color: \"#000\"\n  };\n  const icon = {\n    width: 20,\n    height: 20,\n    color: colors.error.main\n  };\n  const spacer = {\n    marginBottom: \"25px\"\n  };\n  const [submitting, setSubmitting] = React.useState(null);\n\n  const submitAddOtherAttachment = (values, setLoading) => {\n    submitAddAttachment(_objectSpread(_objectSpread({}, body), {}, {\n      name: values.name\n    }), setLoading);\n  };\n\n  const submitAddAttachment = async (values, setLoading = setSubmitting) => {\n    setLoading(values.type);\n    AttachmentService.Add(values).then(res => {\n      console.log(\"Attachment\", res);\n      const AttachmentCopy = [res.result, ...Attachments];\n      setAttachments(AttachmentCopy);\n      handleClose();\n    }).catch(error => {\n      console.error(\"error\", error);\n    }).finally(() => {\n      values.type !== 3 && setLoading(null);\n    });\n  };\n  /************************** Handle delete data ****************************/\n\n\n  const submitDeleteAttachment = async values => {\n    console.log(\"values\", values);\n    AttachmentService.Delete(values).then(res => {\n      console.log(\"Attachment\", res);\n      const AttachmentCopy = [...Attachments].filter(item => item.id != values.id);\n      setAttachments(AttachmentCopy);\n    }).catch(error => {\n      console.error(\"roles\", error);\n    });\n  };\n\n  const getParamsByName = name => name === \"id_image\" ? {\n    type: 1,\n    name: translate(\"ID image\")\n  } : name === \"personal_image\" ? {\n    type: 2,\n    name: translate(\"Personal image\")\n  } : {\n    type: 3,\n    name: \"\"\n  };\n\n  const handleUpload = ({\n    target\n  }) => {\n    const fileReader = new FileReader();\n    const body = getParamsByName(target.name);\n    fileReader.readAsDataURL(target.files[0]);\n\n    fileReader.onload = e => {\n      if (body.type === 3) {\n        handleOpen(_objectSpread(_objectSpread({}, body), {}, {\n          file: e.target.result,\n          candidate_id: candidateId\n        }));\n      } else {\n        submitAddAttachment(_objectSpread(_objectSpread({}, body), {}, {\n          file: e.target.result,\n          candidate_id: candidateId\n        }));\n      }\n    };\n  };\n\n  const renderUploadButton = (type, label, name) => /*#__PURE__*/_jsxs(Button, {\n    disabled: submitting === type,\n    variant: \"contained\",\n    className: classes.submitBtn,\n    component: \"label\",\n    style: {\n      minWidth: 200,\n      color: \"white\"\n    },\n    children: [/*#__PURE__*/_jsx(AttachFile, {}), submitting === type ? translate(\"Processing ...\") : label, /*#__PURE__*/_jsx(\"input\", {\n      accept: \"image/*\",\n      type: \"file\",\n      name: name,\n      hidden: true,\n      onChange: handleUpload\n    })]\n  });\n\n  const [Attachments, setAttachments] = React.useState([]);\n  useEffect(() => {\n    console.log(\"attachments\", attachments);\n    setAttachments(attachments);\n  }, [attachments]);\n\n  const renderAttachment = () => {\n    if (Attachments != null && Attachments.length > 0) {\n      return /*#__PURE__*/_jsx(React.Fragment, {\n        children: Attachments.map(item => /*#__PURE__*/_jsx(GridContainer, {\n          children: /*#__PURE__*/_jsx(GridItem, {\n            sm: 8,\n            children: /*#__PURE__*/_jsx(Card, {\n              style: fileItem,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                style: fileContainer,\n                children: [/*#__PURE__*/_jsx(\"a\", {\n                  style: fileLink,\n                  href: `${process.env.BASE_URL}/${item.url}`,\n                  target: \"_blank\",\n                  children: item.name\n                }), /*#__PURE__*/_jsx(IconButton, {\n                  style: icon,\n                  onClick: () => submitDeleteAttachment({\n                    id: item.id\n                  }),\n                  children: /*#__PURE__*/_jsx(Delete, {\n                    style: icon\n                  })\n                })]\n              })\n            })\n          })\n        }))\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {});\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(CardHeader, {\n        children: /*#__PURE__*/_jsx(\"h4\", {\n          style: {\n            fontWeight: \"bold\",\n            color: \"#01579b\"\n          },\n          children: translate(\"Attachments\")\n        })\n      }), /*#__PURE__*/_jsx(CardBody, {\n        children: /*#__PURE__*/_jsx(GridContainer, {\n          children: /*#__PURE__*/_jsxs(GridItem, {\n            md: 12,\n            children: [/*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                md: 6,\n                children: renderUploadButton(2, translate(\"Upload personal image\"), \"personal_image\")\n              }), /*#__PURE__*/_jsx(Grid, {\n                md: 6,\n                children: renderUploadButton(1, translate(\"Upload ID image\"), \"id_image\")\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              id: \"certificate\",\n              style: spacer\n            }), renderUploadButton(3, translate(\"Upload Other Attachment\"), \"other_attachment\"), /*#__PURE__*/_jsx(\"div\", {\n              id: \"certificate\",\n              style: spacer\n            }), renderAttachment()]\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(AddAttachmentModal, {\n      title: translate(\"Add Attachment\"),\n      open: open,\n      handleClose: handleClose,\n      formScheme: AddAttachmentScheme,\n      initValues: initAddAttachment,\n      submitForm: submitAddOtherAttachment\n    }, \"addAttachment\")]\n  });\n};\n\nCandidateCandidateAttachmentsList.auth = true;\nCandidateCandidateAttachmentsList.layout = Admin;\nexport default CandidateCandidateAttachmentsList;","map":null,"metadata":{},"sourceType":"module"}