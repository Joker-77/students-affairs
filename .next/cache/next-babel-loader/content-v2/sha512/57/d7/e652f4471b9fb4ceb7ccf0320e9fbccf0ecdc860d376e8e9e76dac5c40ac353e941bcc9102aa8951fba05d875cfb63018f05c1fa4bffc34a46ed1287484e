{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Admin from \"../../../../layouts/Admin\";\nimport styles from \"../../../../assets/jss/nextjs-material-dashboard/views/rtlStyle.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridContainer from \"../../../../components/Grid/GridContainer.js\";\nimport GridItem from \"../../../../components/Grid/GridItem.js\";\nimport ActionTable from \"../../../../components/MaterialTable/ActionTable\";\nimport Placeholder from \"../../../../Utility/Placeholders\";\nimport SpecialityService from \"../../../../Services/SpecialityService\";\nimport AddSpecialityModal from \"../../../../components/Modals/AddSpecialityModal\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"../../../../Utility/Translations/useTranslation\";\n\nconst SpecialityList = ({}) => {\n  const {\n    translate\n  } = useTranslation();\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [selectedSpeciality, setSelectedSpeciality] = React.useState(0);\n  const [initAddSpeciality, setInitAddSpeciality] = React.useState({\n    id: 0,\n    en_name: \"\",\n    ar_name: \"\",\n    code: \"\"\n  });\n  const AddSpecialityScheme = Yup.object().shape({\n    en_name: Yup.string().required(translate(\"{0} is required\", \"English Name\")),\n    ar_name: Yup.string().required(translate(\"{0} is required\", \"Arabic Name\")),\n    code: Yup.string().required(translate(\"{0} is required\", \"Code\"))\n  });\n  const UpdateSpecialityScheme = Yup.object().shape({\n    en_name: Yup.string().required(translate(\"{0} is required\", \"English Name\")),\n    ar_name: Yup.string().required(translate(\"{0} is required\", \"Arabic Name\")),\n    code: Yup.string().required(translate(\"{0} is required\", \"Code\"))\n  });\n\n  const submitAddSpeciality = async (values, setSubmitting) => {\n    setSubmitting(true);\n    SpecialityService.Add(values).then(res => {\n      console.log(\"Speciality\", res);\n      const SpecialityCopy = [res.result, ...Speciality];\n      setSpeciality(SpecialityCopy);\n      setOpen(false);\n    }).catch(error => {\n      console.error(\"error\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Data ****************************/\n\n\n  useEffect(() => {\n    SpecialityService.GetAll().then(res => {\n      console.log(\"Speciality\", res);\n      setSpeciality(res.result);\n    }).catch(error => {\n      console.error(\"error\", error);\n    });\n  }, []);\n  /************************** Finish Data ****************************/\n\n  /************************** Handle edit data ****************************/\n\n  const [openUpdateSpeciality, setOpenUpdateSpeciality] = React.useState(false);\n  const [openModalForDetails, setOpenModalForDetails] = React.useState(false);\n\n  const handleOpenUpdateSpeciality = data => {\n    console.log(\"data\", data);\n    setInitUpdateSpeciality({\n      id: data.id,\n      ar_name: data.ar_name,\n      en_name: data.en_name,\n      ar_name: data.ar_short_name,\n      en_name: data.en_short_name,\n      code: data.code\n    });\n    setOpenUpdateSpeciality(true);\n  };\n\n  const handleCloseUpdateSpeciality = () => {\n    setOpenModalForDetails(false);\n    setDisabled(false);\n    setOpenUpdateSpeciality(false);\n  };\n\n  const [initUpdateSpeciality, setInitUpdateSpeciality] = React.useState({\n    id: 0,\n    ar_name: \"\",\n    en_name: \"\",\n    ar_short_name: \"\",\n    en_short_name: \"\",\n    code: \"\"\n  });\n\n  const submitUpdateSpeciality = async (values, setSubmitting) => {\n    setSubmitting(true);\n    console.log(\"values\", values);\n    SpecialityService.Edit(values).then(res => {\n      console.log(\"Speciality\", res);\n      const SpecialityCopy = [...Speciality].map(item => item.id == res.result.id ? res.result : item);\n      setSpeciality(SpecialityCopy);\n      setOpenUpdateSpeciality(false);\n    }).catch(error => {\n      console.error(\"roles\", error);\n    }).finally(() => {\n      setSubmitting(false);\n    });\n  };\n  /************************** Finish Handle edit data ****************************/\n\n\n  const [disabled, setDisabled] = React.useState(false);\n\n  const handleDetails = data => {\n    setOpenModalForDetails(true);\n    setDisabled(true);\n    handleOpenUpdateSpeciality(data);\n  };\n\n  const [Speciality, setSpeciality] = React.useState(null);\n\n  const renderSpeciality = () => {\n    if (Speciality != null && Speciality.length > 0) {\n      let columns = [{\n        title: translate(\"Id\"),\n        field: \"id\",\n        hidden: true\n      }, {\n        title: translate(\"Arabic Name\"),\n        field: \"ar_name\"\n      }, {\n        title: translate(\"English Name\"),\n        field: \"en_name\"\n      }, {\n        title: translate(\"Arabic Short Name\"),\n        field: \"ar_short_name\"\n      }, {\n        title: translate(\"English Short Name\"),\n        field: \"en_short_name\"\n      }, {\n        title: translate(\"Code\"),\n        field: \"code\"\n      }];\n      let data = Speciality;\n      let options = {\n        headerStyle: {\n          backgroundColor: \"#01579b\",\n          color: \"#FFF\",\n          fontWeight: \"bold\"\n        },\n        filtering: false,\n        paging: true,\n        maxBodyHeight: \"500px\"\n      };\n      return /*#__PURE__*/_jsx(ActionTable, {\n        Title: translate(\"Speciality List\"),\n        Columns: columns,\n        Data: data,\n        Options: options,\n        Actions: [{\n          tooltip: translate(\"Speciality Details\"),\n          icon: \"details\",\n          onClick: (evt, data) => handleDetails(data)\n        }, {\n          tooltip: translate(\"Edit Speciality\"),\n          icon: \"edit\",\n          onClick: (evt, data) => handleOpenUpdateSpeciality(data)\n        }]\n      });\n    } else return /*#__PURE__*/_jsx(Placeholder, {});\n  };\n\n  return /*#__PURE__*/_jsxs(GridContainer, {\n    children: [/*#__PURE__*/_jsxs(GridItem, {\n      md: 12,\n      children: [/*#__PURE__*/_jsx(Button, {\n        disabled: false,\n        variant: \"contained\",\n        className: classes.submitBtn,\n        onClick: handleOpen,\n        children: translate(\"Add New Speciality\")\n      }), renderSpeciality()]\n    }), /*#__PURE__*/_jsx(AddSpecialityModal, {\n      disabled: disabled,\n      title: translate(\"Add Speciality\"),\n      open: open,\n      formScheme: AddSpecialityScheme,\n      handleClose: handleClose,\n      initValues: initAddSpeciality,\n      submitForm: submitAddSpeciality\n    }, \"addSpeciality\"), /*#__PURE__*/_jsx(AddSpecialityModal, {\n      disabled: disabled,\n      title: !openModalForDetails ? translate(\"Update Speciality\") : translate(\"Speciality Details\"),\n      open: openUpdateSpeciality,\n      formScheme: UpdateSpecialityScheme,\n      handleClose: handleCloseUpdateSpeciality,\n      initValues: initUpdateSpeciality,\n      submitForm: submitUpdateSpeciality\n    }, \"updateSpeciality\")]\n  });\n};\n\nSpecialityList.auth = true;\nSpecialityList.layout = Admin;\nexport default SpecialityList;","map":null,"metadata":{},"sourceType":"module"}