{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducers/reducer\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/es/storage\";\nexport const store = () => configureStore({\n  reducer: {\n    baseReducer: reducer\n  },\n  devTools: true // process.env.ENV !== \"production\",\n\n});\nexport const makeStore = () => {\n  const isServer = false;\n\n  if (isServer) {\n    return store();\n  } else {\n    // we need it only on client side\n    const persistConfig = {\n      key: \"root\",\n      storage\n    };\n    const persistedReducer = persistReducer(persistConfig, reducer);\n    let store = configureStore({\n      reducer: persistedReducer,\n      devTools: true // process.env.ENV !== \"production\",\n\n    });\n    store.__persistor = persistStore(store);\n    return store;\n  }\n}; // export type AppDispatch = typeof makeStore;\n// export type RootState = ReturnType<typeof makeStore>;\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["F:/StudentAffairs/students/students/redux/store.tsx"],"names":["configureStore","reducer","createWrapper","persistReducer","persistStore","storage","store","baseReducer","devTools","makeStore","isServer","persistConfig","key","persistedReducer","__persistor","wrapper"],"mappings":"AAAA,SAAiBA,cAAjB,QAAoD,kBAApD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAO,MAAMC,KAAK,GAAG,MACnBN,cAAc,CAAC;AACbC,EAAAA,OAAO,EAAE;AACPM,IAAAA,WAAW,EAAEN;AADN,GADI;AAIbO,EAAAA,QAAQ,EAAE,IAJG,CAIG;;AAJH,CAAD,CADT;AAOP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,QAAQ,QAAd;;AACA,MAAIA,QAAJ,EAAc;AACZ,WAAOJ,KAAK,EAAZ;AACD,GAFD,MAEO;AACL;AACA,UAAMK,aAAa,GAAG;AACpBC,MAAAA,GAAG,EAAE,MADe;AAEpBP,MAAAA;AAFoB,KAAtB;AAIA,UAAMQ,gBAAgB,GAAGV,cAAc,CAACQ,aAAD,EAAgBV,OAAhB,CAAvC;AACA,QAAIK,KAAU,GAAGN,cAAc,CAAC;AAC9BC,MAAAA,OAAO,EAAEY,gBADqB;AAE9BL,MAAAA,QAAQ,EAAE,IAFoB,CAEd;;AAFc,KAAD,CAA/B;AAIAF,IAAAA,KAAK,CAACQ,WAAN,GAAoBV,YAAY,CAACE,KAAD,CAAhC;AACA,WAAOA,KAAP;AACD;AACF,CAlBM,C,CAmBP;AACA;;AAWA,OAAO,MAAMS,OAAO,GAAGb,aAAa,CAAYO,SAAZ,CAA7B","sourcesContent":["import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport { reducer } from \"./reducers/reducer\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport storage from \"redux-persist/es/storage\";\r\n\r\nexport const store = () =>\r\n  configureStore({\r\n    reducer: {\r\n      baseReducer: reducer,\r\n    },\r\n    devTools: true, // process.env.ENV !== \"production\",\r\n  });\r\nexport const makeStore = () => {\r\n  const isServer = typeof window === \"undefined\";\r\n  if (isServer) {\r\n    return store();\r\n  } else {\r\n    // we need it only on client side\r\n    const persistConfig = {\r\n      key: \"root\",\r\n      storage,\r\n    };\r\n    const persistedReducer = persistReducer(persistConfig, reducer);\r\n    let store: any = configureStore({\r\n      reducer: persistedReducer,\r\n      devTools: true, // process.env.ENV !== \"production\",\r\n    });\r\n    store.__persistor = persistStore(store);\r\n    return store;\r\n  }\r\n};\r\n// export type AppDispatch = typeof makeStore;\r\n// export type RootState = ReturnType<typeof makeStore>;\r\nexport type RootStore = ReturnType<typeof makeStore>;\r\nexport type RootState = ReturnType<RootStore[\"getState\"]>;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n\r\nexport const wrapper = createWrapper<RootStore>(makeStore);\r\n"]},"metadata":{},"sourceType":"module"}