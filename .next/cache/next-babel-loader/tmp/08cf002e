{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @mui material components\nimport Button from \"@material-ui/core/Button\";\nimport { styled } from \"@material-ui/core/styles\";\nexport default styled(Button)(({\n  theme,\n  ownerState\n}) => {\n  const {\n    palette,\n    functions,\n    borders\n  } = theme;\n  const {\n    color,\n    variant,\n    size,\n    circular,\n    iconOnly\n  } = ownerState;\n  const {\n    white,\n    dark,\n    text,\n    transparent,\n    gradients\n  } = palette;\n  const {\n    boxShadow,\n    linearGradient,\n    pxToRem,\n    rgba\n  } = functions;\n  const {\n    borderRadius\n  } = borders; // styles for the button with variant=\"contained\"\n\n  const containedStyles = () => {\n    // background color value\n    const backgroundValue = palette[color] ? palette[color].main : white.main; // backgroundColor value when button is focused\n\n    const focusedBackgroundValue = palette[color] ? palette[color].focus : white.focus; // boxShadow value\n\n    const boxShadowValue = palette[color] ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5) : boxShadow([0, 0], [0, 3.2], dark.main, 0.5); // color value\n\n    let colorValue = white.main;\n\n    if (color === \"white\" || !palette[color]) {\n      colorValue = text.main;\n    } else if (color === \"light\") {\n      colorValue = gradients.dark.state;\n    } // color value when button is focused\n\n\n    let focusedColorValue = white.main;\n\n    if (color === \"white\") {\n      focusedColorValue = text.main;\n    } else if (color === \"primary\" || color === \"error\" || color === \"dark\") {\n      focusedColorValue = white.main;\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      \"&:hover\": {\n        backgroundColor: backgroundValue\n      },\n      \"&:focus:not(:hover)\": {\n        backgroundColor: focusedBackgroundValue,\n        boxShadow: boxShadowValue\n      },\n      \"&:disabled\": {\n        backgroundColor: backgroundValue,\n        color: focusedColorValue\n      }\n    };\n  }; // styles for the button with variant=\"outlined\"\n\n\n  const outliedStyles = () => {\n    // background color value\n    const backgroundValue = color === \"white\" ? rgba(white.main, 0.1) : transparent.main; // color value\n\n    const colorValue = palette[color] ? palette[color].main : white.main; // boxShadow value\n\n    const boxShadowValue = palette[color] ? boxShadow([0, 0], [0, 3.2], palette[color].main, 0.5) : boxShadow([0, 0], [0, 3.2], white.main, 0.5); // border color value\n\n    let borderColorValue = palette[color] ? palette[color].main : rgba(white.main, 0.75);\n\n    if (color === \"white\") {\n      borderColorValue = rgba(white.main, 0.75);\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      borderColor: borderColorValue,\n      \"&:hover\": {\n        background: transparent.main,\n        borderColor: colorValue\n      },\n      \"&:focus:not(:hover)\": {\n        background: transparent.main,\n        boxShadow: boxShadowValue\n      },\n      \"&:active:not(:hover)\": {\n        backgroundColor: colorValue,\n        color: white.main,\n        opacity: 0.85\n      },\n      \"&:disabled\": {\n        color: colorValue,\n        borderColor: colorValue\n      }\n    };\n  }; // styles for the button with variant=\"gradient\"\n\n\n  const gradientStyles = () => {\n    // background value\n    const backgroundValue = color === \"white\" || !gradients[color] ? white.main : linearGradient(gradients[color].main, gradients[color].state); // color value\n\n    let colorValue = white.main;\n\n    if (color === \"white\") {\n      colorValue = text.main;\n    } else if (color === \"light\") {\n      colorValue = gradients.dark.state;\n    }\n\n    return {\n      background: backgroundValue,\n      color: colorValue,\n      \"&:focus:not(:hover)\": {\n        boxShadow: \"none\"\n      },\n      \"&:disabled\": {\n        background: backgroundValue,\n        color: colorValue\n      }\n    };\n  }; // styles for the button with variant=\"text\"\n\n\n  const textStyles = () => {\n    // color value\n    const colorValue = palette[color] ? palette[color].main : white.main; // color value when button is focused\n\n    const focusedColorValue = palette[color] ? palette[color].focus : white.focus;\n    return {\n      color: colorValue,\n      \"&:hover\": {\n        color: focusedColorValue\n      },\n      \"&:focus:not(:hover)\": {\n        color: focusedColorValue\n      }\n    };\n  }; // styles for the button with circular={true}\n\n\n  const circularStyles = () => ({\n    borderRadius: borderRadius.section\n  }); // styles for the button with iconOnly={true}\n\n\n  const iconOnlyStyles = () => {\n    // width, height, minWidth and minHeight values\n    let sizeValue = pxToRem(38);\n\n    if (size === \"small\") {\n      sizeValue = pxToRem(25.4);\n    } else if (size === \"large\") {\n      sizeValue = pxToRem(52);\n    } // padding value\n\n\n    let paddingValue = `${pxToRem(11)} ${pxToRem(11)} ${pxToRem(10)}`;\n\n    if (size === \"small\") {\n      paddingValue = pxToRem(4.5);\n    } else if (size === \"large\") {\n      paddingValue = pxToRem(16);\n    }\n\n    return {\n      width: sizeValue,\n      minWidth: sizeValue,\n      height: sizeValue,\n      minHeight: sizeValue,\n      padding: paddingValue,\n      \"& .material-icons\": {\n        marginTop: 0\n      },\n      \"&:hover, &:focus, &:active\": {\n        transform: \"none\"\n      }\n    };\n  };\n\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, variant === \"contained\" && containedStyles()), variant === \"outlined\" && outliedStyles()), variant === \"gradient\" && gradientStyles()), variant === \"text\" && textStyles()), circular && circularStyles()), iconOnly && iconOnlyStyles());\n});","map":null,"metadata":{},"sourceType":"module"}